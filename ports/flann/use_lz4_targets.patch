diff --git a/CMakeLists.txt b/CMakeLists.txt
index f4b94d2..7ff331a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -146,8 +146,7 @@ if (BUILD_CUDA_LIB)
     endif(CUDA_FOUND)
 endif(BUILD_CUDA_LIB)
 
-find_package(PkgConfig REQUIRED)
-pkg_check_modules(LZ4 REQUIRED liblz4)
+find_package(lz4 REQUIRED)
 
 #set the C/C++ include path to the "include" directory
 include_directories(BEFORE ${PROJECT_SOURCE_DIR}/src/cpp)
diff --git a/src/cpp/CMakeLists.txt b/src/cpp/CMakeLists.txt
index b30f3da..73392b2 100644
--- a/src/cpp/CMakeLists.txt
+++ b/src/cpp/CMakeLists.txt
@@ -8,12 +8,14 @@ file(GLOB_RECURSE C_SOURCES flann.cpp)
 file(GLOB_RECURSE CPP_SOURCES flann_cpp.cpp)
 file(GLOB_RECURSE CU_SOURCES *.cu)
 
+if(NOT BUILD_SHARED_LIBS)
 add_library(flann_cpp_s STATIC ${CPP_SOURCES})
-target_link_libraries(flann_cpp_s ${LZ4_LIBRARIES})
+target_link_libraries(flann_cpp_s PRIVATE lz4::lz4)
 if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
     set_target_properties(flann_cpp_s PROPERTIES COMPILE_FLAGS -fPIC)
 endif()
 set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC FLANN_USE_CUDA)
+endif()
 
 if (BUILD_CUDA_LIB)
     SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS};-DFLANN_USE_CUDA")
@@ -29,42 +31,44 @@ if (BUILD_CUDA_LIB)
     set_property(TARGET flann_cuda_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
 endif()
 
+if(BUILD_SHARED_LIBS)
 if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
-    add_library(flann_cpp SHARED "")
+    add_library(flann_cpp SHARED ${CPP_SOURCES})
     set_target_properties(flann_cpp PROPERTIES LINKER_LANGUAGE CXX)
-    target_link_libraries(flann_cpp -Wl,-whole-archive flann_cpp_s -Wl,-no-whole-archive)
+    target_link_libraries(flann_cpp PRIVATE lz4::lz4)
+    target_link_libraries(flann_cpp PRIVATE -Wl,-whole-archive flann_cpp_s -Wl,-no-whole-archive)
 
     if (BUILD_CUDA_LIB)
-	    cuda_add_library(flann_cuda SHARED "")
+	    cuda_add_library(flann_cuda SHARED ${CPP_SOURCES})
         set_target_properties(flann_cuda PROPERTIES LINKER_LANGUAGE CXX)
         target_link_libraries(flann_cuda -Wl,-whole-archive flann_cuda_s -Wl,-no-whole-archive)
         set_property(TARGET flann_cpp_s PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
     # 	target_link_libraries(flann_cuda cudpp_x86_64)
     endif()
+    if (BUILD_CUDA_LIB)
+        set_target_properties(flann_cuda PROPERTIES
+           VERSION ${FLANN_VERSION}
+           SOVERSION ${FLANN_SOVERSION}
+           DEFINE_SYMBOL FLANN_EXPORTS
+        )
+    endif()
 else()
     add_library(flann_cpp SHARED ${CPP_SOURCES})
-    target_link_libraries(flann_cpp -Wl,--push-state,--no-as-needed ${LZ4_LIBRARIES} -Wl,--pop-state)
+    target_link_libraries(flann_cpp PRIVATE lz4::lz4)
+    target_link_libraries(flann_cpp PRIVATE -Wl,--push-state,--no-as-needed -Wl,--pop-state)
     # export lz4 headers, so that MSVC to creates flann_cpp.lib
     set_target_properties(flann_cpp PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS YES)
     if (BUILD_CUDA_LIB)
 		cuda_add_library(flann_cuda SHARED ${CPP_SOURCES})
         set_property(TARGET flann_cpp PROPERTY COMPILE_DEFINITIONS FLANN_USE_CUDA)
     endif()
-endif()
-
-set_target_properties(flann_cpp PROPERTIES
-   VERSION ${FLANN_VERSION}
-   SOVERSION ${FLANN_SOVERSION}
-   DEFINE_SYMBOL FLANN_EXPORTS
-)
-
-if (BUILD_CUDA_LIB)
-    set_target_properties(flann_cuda PROPERTIES
+    set_target_properties(flann_cpp PROPERTIES
        VERSION ${FLANN_VERSION}
        SOVERSION ${FLANN_SOVERSION}
        DEFINE_SYMBOL FLANN_EXPORTS
     )
 endif()
+endif()
 
 
 if (USE_MPI AND HDF5_IS_PARALLEL)
@@ -80,31 +84,38 @@ endif()
 
 
 if (BUILD_C_BINDINGS)
-    add_library(flann_s STATIC ${C_SOURCES})
-    target_link_libraries(flann_cpp -Wl,--push-state,--no-as-needed ${LZ4_LIBRARIES} -Wl,--pop-state)
-    if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
-        set_target_properties(flann_s PROPERTIES COMPILE_FLAGS -fPIC)
+    if(NOT BUILD_SHARED_LIBS)
+      add_library(flann_s STATIC ${C_SOURCES})
+      target_link_libraries(flann_s PRIVATE lz4::lz4)
+      target_link_libraries(flann_s PRIVATE -Wl,--push-state,--no-as-needed -Wl,--pop-state)
+      if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_CLANG)
+          set_target_properties(flann_s PROPERTIES COMPILE_FLAGS -fPIC)
+      endif()
+      set_property(TARGET flann_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
     endif()
-    set_property(TARGET flann_s PROPERTY COMPILE_DEFINITIONS FLANN_STATIC)
 
+    if(BUILD_SHARED_LIBS)
     if(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND CMAKE_COMPILER_IS_GNUCC)
-        add_library(flann SHARED "")
+        add_library(flann SHARED ${C_SOURCES})
         set_target_properties(flann PROPERTIES LINKER_LANGUAGE CXX)
-        target_link_libraries(flann -Wl,-whole-archive flann_s -Wl,-no-whole-archive)
+        target_link_libraries(flann PRIVATE lz4::lz4)
+        target_link_libraries(flann PRIVATE -Wl,-whole-archive flann_s -Wl,-no-whole-archive)
     else()
         add_library(flann SHARED ${C_SOURCES})
-        target_link_libraries(flann_cpp -Wl,--push-state,--no-as-needed ${LZ4_LIBRARIES} -Wl,--pop-state)
+        target_link_libraries(flann PRIVATE lz4::lz4)
+        target_link_libraries(flann PRIVATE -Wl,--push-state,--no-as-needed -Wl,--pop-state)
 
         if(MINGW AND OPENMP_FOUND)
           target_link_libraries(flann gomp)
         endif()
     endif()
-
     set_target_properties(flann PROPERTIES
        VERSION ${FLANN_VERSION}
        SOVERSION ${FLANN_SOVERSION}
        DEFINE_SYMBOL FLANN_EXPORTS
     )
+    endif()
+
 endif()
 
 if(WIN32)
@@ -116,15 +127,25 @@ if (BUILD_C_BINDINGS AND BUILD_MATLAB_BINDINGS)
 endif()
 endif(WIN32)
 
-
+if(NOT BUILD_SHARED_LIBS)
+install (
+    TARGETS flann_cpp_s
+    EXPORT ${targets_export_name}
+    INCLUDES DESTINATION include
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
+    ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
+)
+else()
 install (
-    TARGETS flann_cpp flann_cpp_s
+    TARGETS flann_cpp
     EXPORT ${targets_export_name}
     INCLUDES DESTINATION include
     RUNTIME DESTINATION bin
     LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
     ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
 )
+endif()
 
 if (BUILD_CUDA_LIB)
     install (
@@ -138,14 +159,25 @@ if (BUILD_CUDA_LIB)
 endif()
 
 if (BUILD_C_BINDINGS)
+    if(NOT BUILD_SHARED_LIBS)
     install (
-        TARGETS flann flann_s
+        TARGETS flann_s
         EXPORT ${targets_export_name}
         INCLUDES DESTINATION include
         RUNTIME DESTINATION bin
         LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
         ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
     )
+    else()
+    install (
+        TARGETS flann
+        EXPORT ${targets_export_name}
+        INCLUDES DESTINATION include
+        RUNTIME DESTINATION bin
+        LIBRARY DESTINATION ${FLANN_LIB_INSTALL_DIR}
+        ARCHIVE DESTINATION ${FLANN_LIB_INSTALL_DIR}
+    )
+    endif()
 endif()
 
 install (
