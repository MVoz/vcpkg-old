diff --git a/gmakefile b/gmakefile
index 5f0dade73..5c782717f 100644
--- a/gmakefile
+++ b/gmakefile
@@ -81,6 +81,11 @@ else
   cc_name := CC
 endif
 
+# implies shared libraries with MS compilers
+ifeq ($(SL_LINKER_FUNCTION),-LD)
+$(OBJDIR)/%.o : CCPPFLAGS+=-Dslepc_EXPORTS
+endif
+
 SLEPC_COMPILE.c = $(call quiet,$(cc_name)) -c $(PCC_FLAGS) $(CFLAGS) $(CCPPFLAGS) $(SLEPC_CC_INCLUDES) $(C_DEPFLAGS)
 SLEPC_COMPILE.cxx = $(call quiet,CXX) -c $(CXX_FLAGS) $(CFLAGS) $(CCPPFLAGS) $(SLEPC_CC_INCLUDES) $(CXX_DEPFLAGS)
 SLEPC_COMPILE.cu = $(call quiet,CUDAC) -c $(CUDAC_FLAGS) --compiler-options="$(PCC_FLAGS) $(CXXFLAGS) $(CCPPFLAGS)"
diff --git a/include/slepc/private/bvimpl.h b/include/slepc/private/bvimpl.h
index 46d597eba..17e165a0b 100644
--- a/include/slepc/private/bvimpl.h
+++ b/include/slepc/private/bvimpl.h
@@ -14,10 +14,10 @@
 #include <slepcbv.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool BVRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode BVRegisterAll(void);
+SLEPC_EXTERN PetscBool BVRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode BVRegisterAll(void);
 
-PETSC_EXTERN PetscLogEvent BV_Create,BV_Copy,BV_Mult,BV_MultVec,BV_MultInPlace,BV_Dot,BV_DotVec,BV_Orthogonalize,BV_OrthogonalizeVec,BV_Scale,BV_Norm,BV_NormVec,BV_SetRandom,BV_MatMult,BV_MatMultVec,BV_MatProject;
+SLEPC_EXTERN PetscLogEvent BV_Create,BV_Copy,BV_Mult,BV_MultVec,BV_MultInPlace,BV_Dot,BV_DotVec,BV_Orthogonalize,BV_OrthogonalizeVec,BV_Scale,BV_Norm,BV_NormVec,BV_SetRandom,BV_MatMult,BV_MatMultVec,BV_MatProject;
 
 typedef struct _BVOps *BVOps;
 
@@ -255,8 +255,8 @@ PETSC_INTERN PetscErrorCode BVOrthogonalize_LAPACK_TSQR(BV,PetscInt,PetscInt,Pet
 PETSC_INTERN PetscErrorCode BVOrthogonalize_LAPACK_TSQR_OnlyR(BV,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscInt);
 
 /* reduction operation used in BVOrthogonalize */
-PETSC_EXTERN MPI_Op MPIU_TSQR;
-PETSC_EXTERN void SlepcGivensPacked(void*,void*,PetscMPIInt*,MPI_Datatype*);
+SLEPC_EXTERN MPI_Op MPIU_TSQR;
+SLEPC_EXTERN void SlepcGivensPacked(void*,void*,PetscMPIInt*,MPI_Datatype*);
 
 #if defined(PETSC_HAVE_VECCUDA)
 #include <petsccuda.h>
diff --git a/include/slepc/private/dsimpl.h b/include/slepc/private/dsimpl.h
index 78db129a1..7fa1b6700 100644
--- a/include/slepc/private/dsimpl.h
+++ b/include/slepc/private/dsimpl.h
@@ -14,9 +14,9 @@
 #include <slepcds.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool DSRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode DSRegisterAll(void);
-PETSC_EXTERN PetscLogEvent DS_Solve,DS_Vectors,DS_Synchronize,DS_Other;
+SLEPC_EXTERN PetscBool DSRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode DSRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent DS_Solve,DS_Vectors,DS_Synchronize,DS_Other;
 PETSC_INTERN const char *DSMatName[];
 
 typedef struct _DSOps *DSOps;
diff --git a/include/slepc/private/epsimpl.h b/include/slepc/private/epsimpl.h
index b8b3a6ba9..9d686677c 100644
--- a/include/slepc/private/epsimpl.h
+++ b/include/slepc/private/epsimpl.h
@@ -14,9 +14,9 @@
 #include <slepceps.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool EPSRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode EPSRegisterAll(void);
-PETSC_EXTERN PetscLogEvent EPS_SetUp,EPS_Solve;
+SLEPC_EXTERN PetscBool EPSRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode EPSRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent EPS_SetUp,EPS_Solve;
 
 typedef struct _EPSOps *EPSOps;
 
diff --git a/include/slepc/private/fnimpl.h b/include/slepc/private/fnimpl.h
index 556f431d5..9957af16d 100644
--- a/include/slepc/private/fnimpl.h
+++ b/include/slepc/private/fnimpl.h
@@ -14,9 +14,9 @@
 #include <slepcfn.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool FNRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode FNRegisterAll(void);
-PETSC_EXTERN PetscLogEvent FN_Evaluate;
+SLEPC_EXTERN PetscBool FNRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode FNRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent FN_Evaluate;
 
 typedef struct _FNOps *FNOps;
 
diff --git a/include/slepc/private/lmeimpl.h b/include/slepc/private/lmeimpl.h
index f9aa66ae5..4806315de 100644
--- a/include/slepc/private/lmeimpl.h
+++ b/include/slepc/private/lmeimpl.h
@@ -14,9 +14,9 @@
 #include <slepclme.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool LMERegisterAllCalled;
-PETSC_EXTERN PetscErrorCode LMERegisterAll(void);
-PETSC_EXTERN PetscLogEvent LME_SetUp,LME_Solve,LME_ComputeError;
+SLEPC_EXTERN PetscBool LMERegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode LMERegisterAll(void);
+SLEPC_EXTERN PetscLogEvent LME_SetUp,LME_Solve,LME_ComputeError;
 
 typedef struct _LMEOps *LMEOps;
 
@@ -84,10 +84,10 @@ PETSC_INTERN PetscErrorCode LMERankSVD(LME,PetscInt,PetscScalar*,PetscScalar*,Pe
 
 #if !defined(PETSC_BLASLAPACK_STDCALL)
 #define SLICOTsb03od_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) SLEPC_SLICOT(sb03od,SB03OD) ((a),(b),(c),(d),(e),(f),(g),(h),(i),(j),(k),(l),(m),(n),(o),(p),(q),1,1,1)
-PETSC_EXTERN void SLEPC_SLICOT(sb03od,SB03OD)(const char*,const char*,const char*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscScalar*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt,PetscBLASInt,PetscBLASInt);
+SLEPC_EXTERN void SLEPC_SLICOT(sb03od,SB03OD)(const char*,const char*,const char*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscScalar*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt,PetscBLASInt,PetscBLASInt);
 #else
 #define SLICOTsb03od_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) SLEPC_SLICOT(sb03od,SB03OD) ((a),1,(b),1,(c),1,(d),(e),(f),(g),(h),(i),(j),(k),(l),(m),(n),(o),(p),(q))
-PETSC_EXTERN void PETSC_STDCALL SLEPC_SLICOT(sb03od,SB03OD)(const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscScalar*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL SLEPC_SLICOT(sb03od,SB03OD)(const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscScalar*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
 #endif
 
 #endif
diff --git a/include/slepc/private/mfnimpl.h b/include/slepc/private/mfnimpl.h
index de72d1be7..8ec301125 100644
--- a/include/slepc/private/mfnimpl.h
+++ b/include/slepc/private/mfnimpl.h
@@ -14,9 +14,9 @@
 #include <slepcmfn.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool MFNRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode MFNRegisterAll(void);
-PETSC_EXTERN PetscLogEvent MFN_SetUp, MFN_Solve;
+SLEPC_EXTERN PetscBool MFNRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode MFNRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent MFN_SetUp, MFN_Solve;
 
 typedef struct _MFNOps *MFNOps;
 
diff --git a/include/slepc/private/nepimpl.h b/include/slepc/private/nepimpl.h
index 2df14aa6a..d79ed5e57 100644
--- a/include/slepc/private/nepimpl.h
+++ b/include/slepc/private/nepimpl.h
@@ -14,9 +14,9 @@
 #include <slepcnep.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool NEPRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode NEPRegisterAll(void);
-PETSC_EXTERN PetscLogEvent NEP_SetUp,NEP_Solve,NEP_Refine,NEP_FunctionEval,NEP_JacobianEval,NEP_DerivativesEval;
+SLEPC_EXTERN PetscBool NEPRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode NEPRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent NEP_SetUp,NEP_Solve,NEP_Refine,NEP_FunctionEval,NEP_JacobianEval,NEP_DerivativesEval;
 
 typedef struct _NEPOps *NEPOps;
 
diff --git a/include/slepc/private/pepimpl.h b/include/slepc/private/pepimpl.h
index 54c42f780..59929532d 100644
--- a/include/slepc/private/pepimpl.h
+++ b/include/slepc/private/pepimpl.h
@@ -14,9 +14,9 @@
 #include <slepcpep.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool PEPRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode PEPRegisterAll(void);
-PETSC_EXTERN PetscLogEvent PEP_SetUp,PEP_Solve,PEP_Refine;
+SLEPC_EXTERN PetscBool PEPRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode PEPRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent PEP_SetUp,PEP_Solve,PEP_Refine;
 
 typedef struct _PEPOps *PEPOps;
 
diff --git a/include/slepc/private/rgimpl.h b/include/slepc/private/rgimpl.h
index 0963f778a..991b8f039 100644
--- a/include/slepc/private/rgimpl.h
+++ b/include/slepc/private/rgimpl.h
@@ -14,8 +14,8 @@
 #include <slepcrg.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool RGRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode RGRegisterAll(void);
+SLEPC_EXTERN PetscBool RGRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode RGRegisterAll(void);
 
 typedef struct _RGOps *RGOps;
 
diff --git a/include/slepc/private/slepcimpl.h b/include/slepc/private/slepcimpl.h
index a0b087435..6086a7532 100644
--- a/include/slepc/private/slepcimpl.h
+++ b/include/slepc/private/slepcimpl.h
@@ -79,8 +79,8 @@ PETSC_STATIC_INLINE PetscErrorCode SlepcPrintEigenvalueASCII(PetscScalar eigr,Pe
 }
 
 /* Private functions that are shared by several classes */
-PETSC_EXTERN PetscErrorCode SlepcBasisReference_Private(PetscInt,Vec*,PetscInt*,Vec**);
-PETSC_EXTERN PetscErrorCode SlepcBasisDestroy_Private(PetscInt*,Vec**);
+SLEPC_EXTERN PetscErrorCode SlepcBasisReference_Private(PetscInt,Vec*,PetscInt*,Vec**);
+SLEPC_EXTERN PetscErrorCode SlepcBasisDestroy_Private(PetscInt*,Vec**);
 
 PETSC_INTERN PetscErrorCode SlepcCitationsInitialize(void);
 PETSC_INTERN PetscErrorCode SlepcInitialize_DynamicLibraries(void);
diff --git a/include/slepc/private/stimpl.h b/include/slepc/private/stimpl.h
index 7487254b0..96924f8f2 100644
--- a/include/slepc/private/stimpl.h
+++ b/include/slepc/private/stimpl.h
@@ -14,9 +14,9 @@
 #include <slepcst.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool STRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode STRegisterAll(void);
-PETSC_EXTERN PetscLogEvent ST_SetUp,ST_Apply,ST_ApplyTranspose,ST_MatSetUp,ST_MatMult,ST_MatMultTranspose,ST_MatSolve,ST_MatSolveTranspose;
+SLEPC_EXTERN PetscBool STRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode STRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent ST_SetUp,ST_Apply,ST_ApplyTranspose,ST_MatSetUp,ST_MatMult,ST_MatMultTranspose,ST_MatSolve,ST_MatSolveTranspose;
 
 typedef struct _STOps *STOps;
 
diff --git a/include/slepc/private/svdimpl.h b/include/slepc/private/svdimpl.h
index d5802d063..ae4397f99 100644
--- a/include/slepc/private/svdimpl.h
+++ b/include/slepc/private/svdimpl.h
@@ -14,9 +14,9 @@
 #include <slepcsvd.h>
 #include <slepc/private/slepcimpl.h>
 
-PETSC_EXTERN PetscBool SVDRegisterAllCalled;
-PETSC_EXTERN PetscErrorCode SVDRegisterAll(void);
-PETSC_EXTERN PetscLogEvent SVD_SetUp,SVD_Solve;
+SLEPC_EXTERN PetscBool SVDRegisterAllCalled;
+SLEPC_EXTERN PetscErrorCode SVDRegisterAll(void);
+SLEPC_EXTERN PetscLogEvent SVD_SetUp,SVD_Solve;
 
 typedef struct _SVDOps *SVDOps;
 
diff --git a/include/slepc/private/vecimplslepc.h b/include/slepc/private/vecimplslepc.h
index 5a906a243..70949aaf0 100644
--- a/include/slepc/private/vecimplslepc.h
+++ b/include/slepc/private/vecimplslepc.h
@@ -77,7 +77,7 @@ PETSC_INTERN PetscErrorCode VecAbs_Comp(Vec);
 PETSC_INTERN PetscErrorCode VecExp_Comp(Vec);
 PETSC_INTERN PetscErrorCode VecLog_Comp(Vec);
 PETSC_INTERN PetscErrorCode VecShift_Comp(Vec,PetscScalar);
-PETSC_EXTERN PetscErrorCode VecCreate_Comp(Vec);
+SLEPC_EXTERN PetscErrorCode VecCreate_Comp(Vec);
 
 /* Definitions and structures for BLAS-type operations in Davidson solvers */
 
@@ -114,8 +114,8 @@ typedef struct VecPool_ {
 } VecPool_;
 typedef VecPool_* VecPool;
 
-PETSC_EXTERN PetscErrorCode SlepcVecPoolCreate(Vec,PetscInt,VecPool*);
-PETSC_EXTERN PetscErrorCode SlepcVecPoolDestroy(VecPool*);
-PETSC_EXTERN PetscErrorCode SlepcVecPoolGetVecs(VecPool,PetscInt,Vec**);
-PETSC_EXTERN PetscErrorCode SlepcVecPoolRestoreVecs(VecPool,PetscInt,Vec**);
+SLEPC_EXTERN PetscErrorCode SlepcVecPoolCreate(Vec,PetscInt,VecPool*);
+SLEPC_EXTERN PetscErrorCode SlepcVecPoolDestroy(VecPool*);
+SLEPC_EXTERN PetscErrorCode SlepcVecPoolGetVecs(VecPool,PetscInt,Vec**);
+SLEPC_EXTERN PetscErrorCode SlepcVecPoolRestoreVecs(VecPool,PetscInt,Vec**);
 #endif
diff --git a/include/slepcblaslapack_stdcall.h b/include/slepcblaslapack_stdcall.h
index aa513719c..ca15443c0 100644
--- a/include/slepcblaslapack_stdcall.h
+++ b/include/slepcblaslapack_stdcall.h
@@ -34,26 +34,26 @@
 #define LAPACKtgexc_ PETSCBLAS(tgexc,TGEXC)
 #define LAPACKgeqp3_ PETSCBLAS(geqp3,GEQP3)
 
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASR(rot,ROT) (PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(laev2,LAEV2) (PetscScalar*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,PetscReal*,PetscScalar*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(gehrd,GEHRD) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(gelqf,GELQF) (PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(larfg,LARFG) (PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lag2,LAG2) (PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lasv2,LASV2) (PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lartg,LARTG) (PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(laln2,LALN2) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(laed4,LAED4) (PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lamrg,LAMRG) (PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lapy2,LAPY2) (PetscReal*,PetscReal*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASR(rot,ROT) (PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(laev2,LAEV2) (PetscScalar*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,PetscReal*,PetscScalar*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(gehrd,GEHRD) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(gelqf,GELQF) (PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(larfg,LARFG) (PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lag2,LAG2) (PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lasv2,LASV2) (PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lartg,LARTG) (PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(laln2,LALN2) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(laed4,LAED4) (PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(lamrg,LAMRG) (PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lapy2,LAPY2) (PetscReal*,PetscReal*);
 #if !defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(orghr,ORGHR) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(tgexc,TGEXC) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(geqp3,GEQP3) (PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(orghr,ORGHR) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(tgexc,TGEXC) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(geqp3,GEQP3) (PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
 #else
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(unghr,UNGHR) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(tgexc,TGEXC) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(geqp3,GEQP3) (PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(unghr,UNGHR) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(tgexc,TGEXC) (PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLAS(geqp3,GEQP3) (PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
 #endif
 
 /* LAPACK functions with string parameters */
@@ -70,16 +70,16 @@ PETSC_EXTERN void     PETSC_STDCALL PETSCBLAS(geqp3,GEQP3) (PetscBLASInt*,PetscB
 #define LAPACKtrsyl_(a,b,c,d,e,f,g,h,i,j,k,l,m) PETSCBLAS(trsyl,TRSYL) ((a),1,(b),1,(c),(d),(e),(f),(g),(h),(i),(j),(k),(l),(m))
 #define LAPACKtrtri_(a,b,c,d,e,f) PETSCBLAS(trtri,TRTRI) ((a),1,(b),1,(c),(d),(e),(f))
 
-PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(trmm,TRMM) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
-PETSC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(lanhs,LANHS) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*);
-PETSC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(lange,LANGE) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*);
-PETSC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(pbtrf,PBTRF) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(larf,LARF) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*);
-PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(lacpy,LACPY) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
-PETSC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(lansy,LANSY) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*);
-PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(laset,LASET) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*);
-PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(trsyl,TRSYL) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(trtri,TRTRI) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void      PETSC_STDCALL PETSCBLAS(trmm,TRMM) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
+SLEPC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(lanhs,LANHS) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*);
+SLEPC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(lange,LANGE) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*);
+SLEPC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(pbtrf,PBTRF) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void      PETSC_STDCALL PETSCBLAS(larf,LARF) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*);
+SLEPC_EXTERN void      PETSC_STDCALL PETSCBLAS(lacpy,LACPY) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
+SLEPC_EXTERN SlepcLRT  PETSC_STDCALL PETSCBLAS(lansy,LANSY) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*);
+SLEPC_EXTERN void      PETSC_STDCALL PETSCBLAS(laset,LASET) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*);
+SLEPC_EXTERN void      PETSC_STDCALL PETSCBLAS(trsyl,TRSYL) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void      PETSC_STDCALL PETSCBLAS(trtri,TRTRI) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
 
 /* subroutines in which we use only the real version, do not care whether they have different name */
 #define LAPACKstevr_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) PETSCBLASREAL(stevr,STEVR) ((a),1,(b),1,(c),(d),(e),(f),(g),(h),(i),(j),(k),(l),(m),(n),(o),(p),(q),(r),(s),(t))
@@ -87,10 +87,10 @@ PETSC_EXTERN void      PETSC_STDCALL PETSCBLAS(trtri,TRTRI) (const char*,PetscBL
 #define LAPACKlamch_(a) PETSCBLASREAL(lamch,LAMCH) ((a),1)
 #define LAPACKlamc3_(a,b) PETSCBLASREAL(lamc3,LAMC3) ((a),(b))
 
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(stevr,STEVR) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(bdsdc,BDSDC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lamch,LAMCH) (const char*,PetscBLASInt);
-PETSC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lamc3,LAMC3) (PetscReal*,PetscReal*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(stevr,STEVR) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void     PETSC_STDCALL PETSCBLASREAL(bdsdc,BDSDC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lamch,LAMCH) (const char*,PetscBLASInt);
+SLEPC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lamc3,LAMC3) (PetscReal*,PetscReal*);
 
 /* subroutines with different name in real/complex */
 #if !defined(PETSC_USE_COMPLEX)
@@ -110,19 +110,19 @@ PETSC_EXTERN SlepcLRT PETSC_STDCALL PETSCBLASREAL(lamc3,LAMC3) (PetscReal*,Petsc
 #endif
 
 #if !defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(ormlq,ORMLQ) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(orgtr,ORGTR) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(sytrd,SYTRD) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(syevr,SYEVR) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(syevd,SYEVD) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(sygvd,SYGVD) (PetscBLASInt*,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(ormlq,ORMLQ) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(orgtr,ORGTR) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(sytrd,SYTRD) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(syevr,SYEVR) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(syevd,SYEVD) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(sygvd,SYGVD) (PetscBLASInt*,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
 #else
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(unmlq,UNMLQ) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(ungtr,UNGTR) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(hetrd,HETRD) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(heevr,HEEVR) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscBLASInt*, PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(heevd,HEEVD) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(hegvd,HEGVD) (PetscBLASInt*,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(unmlq,UNMLQ) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(ungtr,UNGTR) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(hetrd,HETRD) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(heevr,HEEVR) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscBLASInt*, PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(heevd,HEEVD) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(hegvd,HEGVD) (PetscBLASInt*,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
 #endif
 
 /* subroutines with different signature in real/complex */
@@ -153,39 +153,39 @@ PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(hegvd,HEGVD) (PetscBLASInt*,const char
 #endif
 
 #if !defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(ggevx,GGEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(ggev,GGEV) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(trevc,TREVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(geevx,GEEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(gees,GEES) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt(*)(PetscReal,PetscReal),PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(trexc,TREXC) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(gesdd,GESDD) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(tgevc,TGEVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(hsein,HSEIN) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(stedc,STEDC) (const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(lascl,LASCL) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(ggevx,GGEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(ggev,GGEV) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(trevc,TREVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(geevx,GEEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(gees,GEES) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt(*)(PetscReal,PetscReal),PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(trexc,TREXC) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(gesdd,GESDD) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(tgevc,TGEVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(hsein,HSEIN) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(stedc,STEDC) (const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(lascl,LASCL) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
 #else
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(ggevx,GGEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(ggev,GGEV) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(trevc,TREVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(geevx,GEEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(gees,GEES) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt(*)(PetscScalar),PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(trexc,TREXC) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(gesdd,GESDD) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(tgevc,TGEVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscReal*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(hsein,HSEIN) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(stedc,STEDC) (const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
-PETSC_EXTERN void PETSC_STDCALL PETSCBLAS(lascl,LASCL) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(ggevx,GGEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(ggev,GGEV) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(trevc,TREVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(geevx,GEEVX) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(gees,GEES) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt(*)(PetscScalar),PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(trexc,TREXC) (const char*,PetscBLASInt,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(gesdd,GESDD) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(tgevc,TGEVC) (const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(hsein,HSEIN) (const char*,PetscBLASInt,const char*,PetscBLASInt,const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(stedc,STEDC) (const char*,PetscBLASInt,PetscBLASInt*,PetscReal*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLAS(lascl,LASCL) (const char*,PetscBLASInt,PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*);
 #endif
 
 #if defined(PETSC_HAVE_COMPLEX)
 /* complex subroutines to be called with scalar-type=real */
 #define BLASCOMPLEXgemm_(a,b,c,d,e,f,g,h,i,j,k,l,m) PETSCBLASCOMPLEX(gemm,GEMM)((a),1,(b),1,(c),(d),(e),(f),(g),(h),(i),(j),(k),(l),(m))
-PETSC_EXTERN void PETSC_STDCALL PETSCBLASCOMPLEX(gemm,GEMM)(const char*,const char*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscComplex*,PetscComplex*,PetscBLASInt*,PetscComplex*,PetscBLASInt*,PetscComplex*,PetscComplex*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLASCOMPLEX(gemm,GEMM)(const char*,const char*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscComplex*,PetscComplex*,PetscBLASInt*,PetscComplex*,PetscBLASInt*,PetscComplex*,PetscComplex*,PetscBLASInt*);
 #define BLASCOMPLEXscal_   PETSCBLASCOMPLEX(scal,SCAL)
-PETSC_EXTERN void PETSC_STDCALL PETSCBLASCOMPLEX(scal,SCAL)(const PetscBLASInt*,const PetscComplex*,PetscComplex*,const PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLASCOMPLEX(scal,SCAL)(const PetscBLASInt*,const PetscComplex*,PetscComplex*,const PetscBLASInt*);
 #define LAPACKCOMPLEXgesv_ PETSCBLASCOMPLEX(gesv,GESV)
-PETSC_EXTERN void PETSC_STDCALL PETSCBLASCOMPLEX(gesv,GESV)(const PetscBLASInt*,const PetscBLASInt*,PetscComplex*,const PetscBLASInt*,PetscBLASInt*,PetscComplex*,const PetscBLASInt*,PetscBLASInt*);
+SLEPC_EXTERN void PETSC_STDCALL PETSCBLASCOMPLEX(gesv,GESV)(const PetscBLASInt*,const PetscBLASInt*,PetscComplex*,const PetscBLASInt*,PetscBLASInt*,PetscComplex*,const PetscBLASInt*,PetscBLASInt*);
 #endif
 
 #endif
diff --git a/include/slepcbv.h b/include/slepcbv.h
index 4ec9c73ff..65c5e11a7 100644
--- a/include/slepcbv.h
+++ b/include/slepcbv.h
@@ -15,7 +15,7 @@
 #define __SLEPCBV_H
 #include <slepcsys.h>
 
-PETSC_EXTERN PetscErrorCode BVInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode BVInitializePackage(void);
 
 /*S
     BV - Basis vectors, SLEPc object representing a collection of vectors
@@ -43,7 +43,7 @@ typedef const char* BVType;
 #define BVTENSOR     "tensor"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId BV_CLASSID;
+SLEPC_EXTERN PetscClassId BV_CLASSID;
 
 /*E
     BVOrthogType - Determines the method used in the orthogonalization
@@ -55,7 +55,7 @@ PETSC_EXTERN PetscClassId BV_CLASSID;
 E*/
 typedef enum { BV_ORTHOG_CGS,
                BV_ORTHOG_MGS } BVOrthogType;
-PETSC_EXTERN const char *BVOrthogTypes[];
+SLEPC_EXTERN const char *BVOrthogTypes[];
 
 /*E
     BVOrthogRefineType - Determines what type of refinement to use
@@ -68,7 +68,7 @@ E*/
 typedef enum { BV_ORTHOG_REFINE_IFNEEDED,
                BV_ORTHOG_REFINE_NEVER,
                BV_ORTHOG_REFINE_ALWAYS } BVOrthogRefineType;
-PETSC_EXTERN const char *BVOrthogRefineTypes[];
+SLEPC_EXTERN const char *BVOrthogRefineTypes[];
 
 /*E
     BVOrthogBlockType - Determines the method used in block
@@ -83,7 +83,7 @@ typedef enum { BV_ORTHOG_BLOCK_GS,
                BV_ORTHOG_BLOCK_TSQR,
                BV_ORTHOG_BLOCK_TSQRCHOL,
                BV_ORTHOG_BLOCK_SVQB     } BVOrthogBlockType;
-PETSC_EXTERN const char *BVOrthogBlockTypes[];
+SLEPC_EXTERN const char *BVOrthogBlockTypes[];
 
 /*E
    BVMatMultType - Different ways of performing the BVMatMult() operation
@@ -103,110 +103,110 @@ E*/
 typedef enum { BV_MATMULT_VECS,
                BV_MATMULT_MAT,
                BV_MATMULT_MAT_SAVE } BVMatMultType;
-PETSC_EXTERN const char *BVMatMultTypes[];
-
-PETSC_EXTERN PetscErrorCode BVCreate(MPI_Comm,BV*);
-PETSC_EXTERN PetscErrorCode BVDestroy(BV*);
-PETSC_EXTERN PetscErrorCode BVSetType(BV,BVType);
-PETSC_EXTERN PetscErrorCode BVGetType(BV,BVType*);
-PETSC_EXTERN PetscErrorCode BVSetSizes(BV,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode BVSetSizesFromVec(BV,Vec,PetscInt);
-PETSC_EXTERN PetscErrorCode BVGetSizes(BV,PetscInt*,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode BVResize(BV,PetscInt,PetscBool);
-PETSC_EXTERN PetscErrorCode BVSetFromOptions(BV);
-PETSC_EXTERN PetscErrorCode BVView(BV,PetscViewer);
+SLEPC_EXTERN const char *BVMatMultTypes[];
+
+SLEPC_EXTERN PetscErrorCode BVCreate(MPI_Comm,BV*);
+SLEPC_EXTERN PetscErrorCode BVDestroy(BV*);
+SLEPC_EXTERN PetscErrorCode BVSetType(BV,BVType);
+SLEPC_EXTERN PetscErrorCode BVGetType(BV,BVType*);
+SLEPC_EXTERN PetscErrorCode BVSetSizes(BV,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVSetSizesFromVec(BV,Vec,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVGetSizes(BV,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode BVResize(BV,PetscInt,PetscBool);
+SLEPC_EXTERN PetscErrorCode BVSetFromOptions(BV);
+SLEPC_EXTERN PetscErrorCode BVView(BV,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode BVViewFromOptions(BV bv,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)bv,obj,name);}
 
-PETSC_EXTERN PetscErrorCode BVGetColumn(BV,PetscInt,Vec*);
-PETSC_EXTERN PetscErrorCode BVRestoreColumn(BV,PetscInt,Vec*);
-PETSC_EXTERN PetscErrorCode BVGetSplit(BV,BV*,BV*);
-PETSC_EXTERN PetscErrorCode BVRestoreSplit(BV,BV*,BV*);
-PETSC_EXTERN PetscErrorCode BVGetArray(BV,PetscScalar**);
-PETSC_EXTERN PetscErrorCode BVRestoreArray(BV,PetscScalar**);
-PETSC_EXTERN PetscErrorCode BVGetArrayRead(BV,const PetscScalar**);
-PETSC_EXTERN PetscErrorCode BVRestoreArrayRead(BV,const PetscScalar**);
-PETSC_EXTERN PetscErrorCode BVCreateVec(BV,Vec*);
-PETSC_EXTERN PetscErrorCode BVSetActiveColumns(BV,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode BVGetActiveColumns(BV,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode BVInsertVec(BV,PetscInt,Vec);
-PETSC_EXTERN PetscErrorCode BVInsertVecs(BV,PetscInt,PetscInt*,Vec*,PetscBool);
-PETSC_EXTERN PetscErrorCode BVInsertConstraints(BV,PetscInt*,Vec*);
-PETSC_EXTERN PetscErrorCode BVSetNumConstraints(BV,PetscInt);
-PETSC_EXTERN PetscErrorCode BVGetNumConstraints(BV,PetscInt*);
-PETSC_EXTERN PetscErrorCode BVDuplicate(BV,BV*);
-PETSC_EXTERN PetscErrorCode BVDuplicateResize(BV,PetscInt,BV*);
-PETSC_EXTERN PetscErrorCode BVCopy(BV,BV);
-PETSC_EXTERN PetscErrorCode BVCopyVec(BV,PetscInt,Vec);
-PETSC_EXTERN PetscErrorCode BVCopyColumn(BV,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode BVSetMatrix(BV,Mat,PetscBool);
-PETSC_EXTERN PetscErrorCode BVGetMatrix(BV,Mat*,PetscBool*);
-PETSC_EXTERN PetscErrorCode BVApplyMatrix(BV,Vec,Vec);
-PETSC_EXTERN PetscErrorCode BVApplyMatrixBV(BV,BV);
-PETSC_EXTERN PetscErrorCode BVGetCachedBV(BV,BV*);
-PETSC_EXTERN PetscErrorCode BVSetSignature(BV,Vec);
-PETSC_EXTERN PetscErrorCode BVGetSignature(BV,Vec);
-PETSC_EXTERN PetscErrorCode BVSetBufferVec(BV,Vec);
-PETSC_EXTERN PetscErrorCode BVGetBufferVec(BV,Vec*);
-
-PETSC_EXTERN PetscErrorCode BVMult(BV,PetscScalar,PetscScalar,BV,Mat);
-PETSC_EXTERN PetscErrorCode BVMultVec(BV,PetscScalar,PetscScalar,Vec,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVMultColumn(BV,PetscScalar,PetscScalar,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVMultInPlace(BV,Mat,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode BVMultInPlaceTranspose(BV,Mat,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode BVMatMult(BV,Mat,BV);
-PETSC_EXTERN PetscErrorCode BVMatMultHermitianTranspose(BV,Mat,BV);
-PETSC_EXTERN PetscErrorCode BVMatMultColumn(BV,Mat,PetscInt);
-PETSC_EXTERN PetscErrorCode BVMatProject(BV,Mat,BV,Mat);
-PETSC_EXTERN PetscErrorCode BVDot(BV,BV,Mat);
-PETSC_EXTERN PetscErrorCode BVDotVec(BV,Vec,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVDotVecBegin(BV,Vec,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVDotVecEnd(BV,Vec,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVDotColumn(BV,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVDotColumnBegin(BV,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVDotColumnEnd(BV,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode BVScale(BV,PetscScalar);
-PETSC_EXTERN PetscErrorCode BVScaleColumn(BV,PetscInt,PetscScalar);
-PETSC_EXTERN PetscErrorCode BVNorm(BV,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVNormVec(BV,Vec,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVNormVecBegin(BV,Vec,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVNormVecEnd(BV,Vec,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVNormColumn(BV,PetscInt,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVNormColumnBegin(BV,PetscInt,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVNormColumnEnd(BV,PetscInt,NormType,PetscReal*);
-PETSC_EXTERN PetscErrorCode BVSetRandom(BV);
-PETSC_EXTERN PetscErrorCode BVSetRandomColumn(BV,PetscInt);
-PETSC_EXTERN PetscErrorCode BVSetRandomCond(BV,PetscReal);
-PETSC_EXTERN PetscErrorCode BVSetRandomContext(BV,PetscRandom);
-PETSC_EXTERN PetscErrorCode BVGetRandomContext(BV,PetscRandom*);
-
-PETSC_EXTERN PetscErrorCode BVSetOrthogonalization(BV,BVOrthogType,BVOrthogRefineType,PetscReal,BVOrthogBlockType);
-PETSC_EXTERN PetscErrorCode BVGetOrthogonalization(BV,BVOrthogType*,BVOrthogRefineType*,PetscReal*,BVOrthogBlockType*);
-PETSC_EXTERN PetscErrorCode BVOrthogonalize(BV,Mat);
-PETSC_EXTERN PetscErrorCode BVOrthogonalizeVec(BV,Vec,PetscScalar*,PetscReal*,PetscBool*);
-PETSC_EXTERN PetscErrorCode BVOrthogonalizeColumn(BV,PetscInt,PetscScalar*,PetscReal*,PetscBool*);
-PETSC_EXTERN PetscErrorCode BVOrthonormalizeColumn(BV,PetscInt,PetscBool,PetscReal*,PetscBool*);
-PETSC_EXTERN PetscErrorCode BVOrthogonalizeSomeColumn(BV,PetscInt,PetscBool*,PetscScalar*,PetscReal*,PetscBool*);
-PETSC_EXTERN PetscErrorCode BVSetMatMultMethod(BV,BVMatMultType);
-PETSC_EXTERN PetscErrorCode BVGetMatMultMethod(BV,BVMatMultType*);
-
-PETSC_EXTERN PetscErrorCode BVCreateFromMat(Mat,BV*);
-PETSC_EXTERN PetscErrorCode BVCreateMat(BV,Mat*);
-PETSC_EXTERN PetscErrorCode BVGetMat(BV,Mat*);
-PETSC_EXTERN PetscErrorCode BVRestoreMat(BV,Mat*);
-
-PETSC_EXTERN PetscErrorCode BVCreateTensor(BV,PetscInt,BV*);
-PETSC_EXTERN PetscErrorCode BVTensorBuildFirstColumn(BV,PetscInt);
-PETSC_EXTERN PetscErrorCode BVTensorCompress(BV,PetscInt);
-PETSC_EXTERN PetscErrorCode BVTensorGetDegree(BV,PetscInt*);
-PETSC_EXTERN PetscErrorCode BVTensorGetFactors(BV,BV*,Mat*);
-PETSC_EXTERN PetscErrorCode BVTensorRestoreFactors(BV,BV*,Mat*);
-
-PETSC_EXTERN PetscErrorCode BVSetOptionsPrefix(BV,const char*);
-PETSC_EXTERN PetscErrorCode BVAppendOptionsPrefix(BV,const char*);
-PETSC_EXTERN PetscErrorCode BVGetOptionsPrefix(BV,const char*[]);
-
-PETSC_EXTERN PetscFunctionList BVList;
-PETSC_EXTERN PetscErrorCode BVRegister(const char[],PetscErrorCode(*)(BV));
+SLEPC_EXTERN PetscErrorCode BVGetColumn(BV,PetscInt,Vec*);
+SLEPC_EXTERN PetscErrorCode BVRestoreColumn(BV,PetscInt,Vec*);
+SLEPC_EXTERN PetscErrorCode BVGetSplit(BV,BV*,BV*);
+SLEPC_EXTERN PetscErrorCode BVRestoreSplit(BV,BV*,BV*);
+SLEPC_EXTERN PetscErrorCode BVGetArray(BV,PetscScalar**);
+SLEPC_EXTERN PetscErrorCode BVRestoreArray(BV,PetscScalar**);
+SLEPC_EXTERN PetscErrorCode BVGetArrayRead(BV,const PetscScalar**);
+SLEPC_EXTERN PetscErrorCode BVRestoreArrayRead(BV,const PetscScalar**);
+SLEPC_EXTERN PetscErrorCode BVCreateVec(BV,Vec*);
+SLEPC_EXTERN PetscErrorCode BVSetActiveColumns(BV,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVGetActiveColumns(BV,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode BVInsertVec(BV,PetscInt,Vec);
+SLEPC_EXTERN PetscErrorCode BVInsertVecs(BV,PetscInt,PetscInt*,Vec*,PetscBool);
+SLEPC_EXTERN PetscErrorCode BVInsertConstraints(BV,PetscInt*,Vec*);
+SLEPC_EXTERN PetscErrorCode BVSetNumConstraints(BV,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVGetNumConstraints(BV,PetscInt*);
+SLEPC_EXTERN PetscErrorCode BVDuplicate(BV,BV*);
+SLEPC_EXTERN PetscErrorCode BVDuplicateResize(BV,PetscInt,BV*);
+SLEPC_EXTERN PetscErrorCode BVCopy(BV,BV);
+SLEPC_EXTERN PetscErrorCode BVCopyVec(BV,PetscInt,Vec);
+SLEPC_EXTERN PetscErrorCode BVCopyColumn(BV,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVSetMatrix(BV,Mat,PetscBool);
+SLEPC_EXTERN PetscErrorCode BVGetMatrix(BV,Mat*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode BVApplyMatrix(BV,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode BVApplyMatrixBV(BV,BV);
+SLEPC_EXTERN PetscErrorCode BVGetCachedBV(BV,BV*);
+SLEPC_EXTERN PetscErrorCode BVSetSignature(BV,Vec);
+SLEPC_EXTERN PetscErrorCode BVGetSignature(BV,Vec);
+SLEPC_EXTERN PetscErrorCode BVSetBufferVec(BV,Vec);
+SLEPC_EXTERN PetscErrorCode BVGetBufferVec(BV,Vec*);
+
+SLEPC_EXTERN PetscErrorCode BVMult(BV,PetscScalar,PetscScalar,BV,Mat);
+SLEPC_EXTERN PetscErrorCode BVMultVec(BV,PetscScalar,PetscScalar,Vec,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVMultColumn(BV,PetscScalar,PetscScalar,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVMultInPlace(BV,Mat,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVMultInPlaceTranspose(BV,Mat,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVMatMult(BV,Mat,BV);
+SLEPC_EXTERN PetscErrorCode BVMatMultHermitianTranspose(BV,Mat,BV);
+SLEPC_EXTERN PetscErrorCode BVMatMultColumn(BV,Mat,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVMatProject(BV,Mat,BV,Mat);
+SLEPC_EXTERN PetscErrorCode BVDot(BV,BV,Mat);
+SLEPC_EXTERN PetscErrorCode BVDotVec(BV,Vec,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVDotVecBegin(BV,Vec,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVDotVecEnd(BV,Vec,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVDotColumn(BV,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVDotColumnBegin(BV,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVDotColumnEnd(BV,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode BVScale(BV,PetscScalar);
+SLEPC_EXTERN PetscErrorCode BVScaleColumn(BV,PetscInt,PetscScalar);
+SLEPC_EXTERN PetscErrorCode BVNorm(BV,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVNormVec(BV,Vec,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVNormVecBegin(BV,Vec,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVNormVecEnd(BV,Vec,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVNormColumn(BV,PetscInt,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVNormColumnBegin(BV,PetscInt,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVNormColumnEnd(BV,PetscInt,NormType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode BVSetRandom(BV);
+SLEPC_EXTERN PetscErrorCode BVSetRandomColumn(BV,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVSetRandomCond(BV,PetscReal);
+SLEPC_EXTERN PetscErrorCode BVSetRandomContext(BV,PetscRandom);
+SLEPC_EXTERN PetscErrorCode BVGetRandomContext(BV,PetscRandom*);
+
+SLEPC_EXTERN PetscErrorCode BVSetOrthogonalization(BV,BVOrthogType,BVOrthogRefineType,PetscReal,BVOrthogBlockType);
+SLEPC_EXTERN PetscErrorCode BVGetOrthogonalization(BV,BVOrthogType*,BVOrthogRefineType*,PetscReal*,BVOrthogBlockType*);
+SLEPC_EXTERN PetscErrorCode BVOrthogonalize(BV,Mat);
+SLEPC_EXTERN PetscErrorCode BVOrthogonalizeVec(BV,Vec,PetscScalar*,PetscReal*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode BVOrthogonalizeColumn(BV,PetscInt,PetscScalar*,PetscReal*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode BVOrthonormalizeColumn(BV,PetscInt,PetscBool,PetscReal*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode BVOrthogonalizeSomeColumn(BV,PetscInt,PetscBool*,PetscScalar*,PetscReal*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode BVSetMatMultMethod(BV,BVMatMultType);
+SLEPC_EXTERN PetscErrorCode BVGetMatMultMethod(BV,BVMatMultType*);
+
+SLEPC_EXTERN PetscErrorCode BVCreateFromMat(Mat,BV*);
+SLEPC_EXTERN PetscErrorCode BVCreateMat(BV,Mat*);
+SLEPC_EXTERN PetscErrorCode BVGetMat(BV,Mat*);
+SLEPC_EXTERN PetscErrorCode BVRestoreMat(BV,Mat*);
+
+SLEPC_EXTERN PetscErrorCode BVCreateTensor(BV,PetscInt,BV*);
+SLEPC_EXTERN PetscErrorCode BVTensorBuildFirstColumn(BV,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVTensorCompress(BV,PetscInt);
+SLEPC_EXTERN PetscErrorCode BVTensorGetDegree(BV,PetscInt*);
+SLEPC_EXTERN PetscErrorCode BVTensorGetFactors(BV,BV*,Mat*);
+SLEPC_EXTERN PetscErrorCode BVTensorRestoreFactors(BV,BV*,Mat*);
+
+SLEPC_EXTERN PetscErrorCode BVSetOptionsPrefix(BV,const char*);
+SLEPC_EXTERN PetscErrorCode BVAppendOptionsPrefix(BV,const char*);
+SLEPC_EXTERN PetscErrorCode BVGetOptionsPrefix(BV,const char*[]);
+
+SLEPC_EXTERN PetscFunctionList BVList;
+SLEPC_EXTERN PetscErrorCode BVRegister(const char[],PetscErrorCode(*)(BV));
 
 #endif
 
diff --git a/include/slepcds.h b/include/slepcds.h
index 2e28a6204..44d0f1d1c 100644
--- a/include/slepcds.h
+++ b/include/slepcds.h
@@ -18,7 +18,7 @@
 
 #define DS_MAX_SOLVE 6
 
-PETSC_EXTERN PetscErrorCode DSInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode DSInitializePackage(void);
 /*S
     DS - Direct solver (or dense system), to represent low-dimensional
     eigenproblems that must be solved within iterative solvers. This is an
@@ -49,7 +49,7 @@ typedef const char* DSType;
 #define DSNEP    "nep"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId DS_CLASSID;
+SLEPC_EXTERN PetscClassId DS_CLASSID;
 
 /*E
     DSStateType - Indicates in which state the direct solver is
@@ -62,7 +62,7 @@ typedef enum { DS_STATE_RAW,
                DS_STATE_INTERMEDIATE,
                DS_STATE_CONDENSED,
                DS_STATE_TRUNCATED } DSStateType;
-PETSC_EXTERN const char *DSStateTypes[];
+SLEPC_EXTERN const char *DSStateTypes[];
 
 /*E
     DSMatType - Used to refer to one of the matrices stored internally in DS
@@ -119,7 +119,7 @@ typedef enum { DS_MAT_A,
                DS_NUM_MAT } DSMatType;
 
 /* Convenience for indexing extra matrices */
-PETSC_EXTERN DSMatType DSMatExtra[];
+SLEPC_EXTERN DSMatType DSMatExtra[];
 #define DS_NUM_EXTRA  10
 
 /*E
@@ -131,74 +131,74 @@ PETSC_EXTERN DSMatType DSMatExtra[];
 E*/
 typedef enum { DS_PARALLEL_REDUNDANT,
                DS_PARALLEL_SYNCHRONIZED } DSParallelType;
-PETSC_EXTERN const char *DSParallelTypes[];
-
-PETSC_EXTERN PetscErrorCode DSCreate(MPI_Comm,DS*);
-PETSC_EXTERN PetscErrorCode DSSetType(DS,DSType);
-PETSC_EXTERN PetscErrorCode DSGetType(DS,DSType*);
-PETSC_EXTERN PetscErrorCode DSSetOptionsPrefix(DS,const char *);
-PETSC_EXTERN PetscErrorCode DSAppendOptionsPrefix(DS,const char *);
-PETSC_EXTERN PetscErrorCode DSGetOptionsPrefix(DS,const char *[]);
-PETSC_EXTERN PetscErrorCode DSSetFromOptions(DS);
-PETSC_EXTERN PetscErrorCode DSView(DS,PetscViewer);
-PETSC_EXTERN PetscErrorCode DSViewMat(DS,PetscViewer,DSMatType);
-PETSC_EXTERN PetscErrorCode DSDestroy(DS*);
-PETSC_EXTERN PetscErrorCode DSReset(DS);
-
-PETSC_EXTERN PetscErrorCode DSAllocate(DS,PetscInt);
-PETSC_EXTERN PetscErrorCode DSGetLeadingDimension(DS,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSSetState(DS,DSStateType);
-PETSC_EXTERN PetscErrorCode DSGetState(DS,DSStateType*);
-PETSC_EXTERN PetscErrorCode DSSetDimensions(DS,PetscInt,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode DSGetDimensions(DS,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSSetBlockSize(DS,PetscInt);
-PETSC_EXTERN PetscErrorCode DSGetBlockSize(DS,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSTruncate(DS,PetscInt);
-PETSC_EXTERN PetscErrorCode DSSetIdentity(DS,DSMatType);
-PETSC_EXTERN PetscErrorCode DSSetMethod(DS,PetscInt);
-PETSC_EXTERN PetscErrorCode DSGetMethod(DS,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSSetParallel(DS,DSParallelType);
-PETSC_EXTERN PetscErrorCode DSGetParallel(DS,DSParallelType*);
-PETSC_EXTERN PetscErrorCode DSSetCompact(DS,PetscBool);
-PETSC_EXTERN PetscErrorCode DSGetCompact(DS,PetscBool*);
-PETSC_EXTERN PetscErrorCode DSSetExtraRow(DS,PetscBool);
-PETSC_EXTERN PetscErrorCode DSGetExtraRow(DS,PetscBool*);
-PETSC_EXTERN PetscErrorCode DSSetRefined(DS,PetscBool);
-PETSC_EXTERN PetscErrorCode DSGetRefined(DS,PetscBool*);
-PETSC_EXTERN PetscErrorCode DSGetMat(DS,DSMatType,Mat*);
-PETSC_EXTERN PetscErrorCode DSRestoreMat(DS,DSMatType,Mat*);
-PETSC_EXTERN PetscErrorCode DSGetArray(DS,DSMatType,PetscScalar*[]);
-PETSC_EXTERN PetscErrorCode DSRestoreArray(DS,DSMatType,PetscScalar*[]);
-PETSC_EXTERN PetscErrorCode DSGetArrayReal(DS,DSMatType,PetscReal*[]);
-PETSC_EXTERN PetscErrorCode DSRestoreArrayReal(DS,DSMatType,PetscReal*[]);
-PETSC_EXTERN PetscErrorCode DSVectors(DS,DSMatType,PetscInt*,PetscReal*);
-PETSC_EXTERN PetscErrorCode DSSolve(DS,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode DSSort(DS,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSSynchronize(DS,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode DSCopyMat(DS,DSMatType,PetscInt,PetscInt,Mat,PetscInt,PetscInt,PetscInt,PetscInt,PetscBool);
-PETSC_EXTERN PetscErrorCode DSMatGetSize(DS,DSMatType,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSMatIsHermitian(DS,DSMatType,PetscBool*);
-PETSC_EXTERN PetscErrorCode DSSetSlepcSC(DS,SlepcSC);
-PETSC_EXTERN PetscErrorCode DSGetSlepcSC(DS,SlepcSC*);
-PETSC_EXTERN PetscErrorCode DSUpdateExtraRow(DS);
-PETSC_EXTERN PetscErrorCode DSCond(DS,PetscReal*);
-PETSC_EXTERN PetscErrorCode DSTranslateHarmonic(DS,PetscScalar,PetscReal,PetscBool,PetscScalar*,PetscReal*);
-PETSC_EXTERN PetscErrorCode DSTranslateRKS(DS,PetscScalar);
-PETSC_EXTERN PetscErrorCode DSOrthogonalize(DS,DSMatType,PetscInt,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSPseudoOrthogonalize(DS,DSMatType,PetscInt,PetscReal*,PetscInt*,PetscReal*);
+SLEPC_EXTERN const char *DSParallelTypes[];
+
+SLEPC_EXTERN PetscErrorCode DSCreate(MPI_Comm,DS*);
+SLEPC_EXTERN PetscErrorCode DSSetType(DS,DSType);
+SLEPC_EXTERN PetscErrorCode DSGetType(DS,DSType*);
+SLEPC_EXTERN PetscErrorCode DSSetOptionsPrefix(DS,const char *);
+SLEPC_EXTERN PetscErrorCode DSAppendOptionsPrefix(DS,const char *);
+SLEPC_EXTERN PetscErrorCode DSGetOptionsPrefix(DS,const char *[]);
+SLEPC_EXTERN PetscErrorCode DSSetFromOptions(DS);
+SLEPC_EXTERN PetscErrorCode DSView(DS,PetscViewer);
+SLEPC_EXTERN PetscErrorCode DSViewMat(DS,PetscViewer,DSMatType);
+SLEPC_EXTERN PetscErrorCode DSDestroy(DS*);
+SLEPC_EXTERN PetscErrorCode DSReset(DS);
+
+SLEPC_EXTERN PetscErrorCode DSAllocate(DS,PetscInt);
+SLEPC_EXTERN PetscErrorCode DSGetLeadingDimension(DS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSSetState(DS,DSStateType);
+SLEPC_EXTERN PetscErrorCode DSGetState(DS,DSStateType*);
+SLEPC_EXTERN PetscErrorCode DSSetDimensions(DS,PetscInt,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode DSGetDimensions(DS,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSSetBlockSize(DS,PetscInt);
+SLEPC_EXTERN PetscErrorCode DSGetBlockSize(DS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSTruncate(DS,PetscInt);
+SLEPC_EXTERN PetscErrorCode DSSetIdentity(DS,DSMatType);
+SLEPC_EXTERN PetscErrorCode DSSetMethod(DS,PetscInt);
+SLEPC_EXTERN PetscErrorCode DSGetMethod(DS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSSetParallel(DS,DSParallelType);
+SLEPC_EXTERN PetscErrorCode DSGetParallel(DS,DSParallelType*);
+SLEPC_EXTERN PetscErrorCode DSSetCompact(DS,PetscBool);
+SLEPC_EXTERN PetscErrorCode DSGetCompact(DS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode DSSetExtraRow(DS,PetscBool);
+SLEPC_EXTERN PetscErrorCode DSGetExtraRow(DS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode DSSetRefined(DS,PetscBool);
+SLEPC_EXTERN PetscErrorCode DSGetRefined(DS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode DSGetMat(DS,DSMatType,Mat*);
+SLEPC_EXTERN PetscErrorCode DSRestoreMat(DS,DSMatType,Mat*);
+SLEPC_EXTERN PetscErrorCode DSGetArray(DS,DSMatType,PetscScalar*[]);
+SLEPC_EXTERN PetscErrorCode DSRestoreArray(DS,DSMatType,PetscScalar*[]);
+SLEPC_EXTERN PetscErrorCode DSGetArrayReal(DS,DSMatType,PetscReal*[]);
+SLEPC_EXTERN PetscErrorCode DSRestoreArrayReal(DS,DSMatType,PetscReal*[]);
+SLEPC_EXTERN PetscErrorCode DSVectors(DS,DSMatType,PetscInt*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode DSSolve(DS,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode DSSort(DS,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSSynchronize(DS,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode DSCopyMat(DS,DSMatType,PetscInt,PetscInt,Mat,PetscInt,PetscInt,PetscInt,PetscInt,PetscBool);
+SLEPC_EXTERN PetscErrorCode DSMatGetSize(DS,DSMatType,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSMatIsHermitian(DS,DSMatType,PetscBool*);
+SLEPC_EXTERN PetscErrorCode DSSetSlepcSC(DS,SlepcSC);
+SLEPC_EXTERN PetscErrorCode DSGetSlepcSC(DS,SlepcSC*);
+SLEPC_EXTERN PetscErrorCode DSUpdateExtraRow(DS);
+SLEPC_EXTERN PetscErrorCode DSCond(DS,PetscReal*);
+SLEPC_EXTERN PetscErrorCode DSTranslateHarmonic(DS,PetscScalar,PetscReal,PetscBool,PetscScalar*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode DSTranslateRKS(DS,PetscScalar);
+SLEPC_EXTERN PetscErrorCode DSOrthogonalize(DS,DSMatType,PetscInt,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSPseudoOrthogonalize(DS,DSMatType,PetscInt,PetscReal*,PetscInt*,PetscReal*);
 
 /* --------- options specific to particular solvers -------- */
 
-PETSC_EXTERN PetscErrorCode DSPEPSetDegree(DS,PetscInt);
-PETSC_EXTERN PetscErrorCode DSPEPGetDegree(DS,PetscInt*);
-PETSC_EXTERN PetscErrorCode DSPEPSetCoefficients(DS,PetscReal*);
-PETSC_EXTERN PetscErrorCode DSPEPGetCoefficients(DS,PetscReal**);
+SLEPC_EXTERN PetscErrorCode DSPEPSetDegree(DS,PetscInt);
+SLEPC_EXTERN PetscErrorCode DSPEPGetDegree(DS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSPEPSetCoefficients(DS,PetscReal*);
+SLEPC_EXTERN PetscErrorCode DSPEPGetCoefficients(DS,PetscReal**);
 
-PETSC_EXTERN PetscErrorCode DSNEPSetFN(DS,PetscInt,FN*);
-PETSC_EXTERN PetscErrorCode DSNEPGetFN(DS,PetscInt,FN*);
-PETSC_EXTERN PetscErrorCode DSNEPGetNumFN(DS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode DSNEPSetFN(DS,PetscInt,FN*);
+SLEPC_EXTERN PetscErrorCode DSNEPGetFN(DS,PetscInt,FN*);
+SLEPC_EXTERN PetscErrorCode DSNEPGetNumFN(DS,PetscInt*);
 
-PETSC_EXTERN PetscFunctionList DSList;
-PETSC_EXTERN PetscErrorCode DSRegister(const char[],PetscErrorCode(*)(DS));
+SLEPC_EXTERN PetscFunctionList DSList;
+SLEPC_EXTERN PetscErrorCode DSRegister(const char[],PetscErrorCode(*)(DS));
 
 #endif
diff --git a/include/slepceps.h b/include/slepceps.h
index 9255f258b..f5118c921 100644
--- a/include/slepceps.h
+++ b/include/slepceps.h
@@ -19,7 +19,7 @@
 #include <slepcrg.h>
 #include <petscsnes.h>
 
-PETSC_EXTERN PetscErrorCode EPSInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode EPSInitializePackage(void);
 
 /*S
     EPS - Abstract SLEPc object that manages all the eigenvalue
@@ -58,7 +58,7 @@ typedef const char* EPSType;
 #define EPSFEAST       "feast"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId EPS_CLASSID;
+SLEPC_EXTERN PetscClassId EPS_CLASSID;
 
 /*E
     EPSProblemType - Determines the type of eigenvalue problem
@@ -120,7 +120,7 @@ typedef enum { EPS_BALANCE_NONE,
                EPS_BALANCE_ONESIDE,
                EPS_BALANCE_TWOSIDE,
                EPS_BALANCE_USER } EPSBalance;
-PETSC_EXTERN const char *EPSBalanceTypes[];
+SLEPC_EXTERN const char *EPSBalanceTypes[];
 
 /*E
     EPSErrorType - The error type used to assess accuracy of computed solutions
@@ -132,7 +132,7 @@ E*/
 typedef enum { EPS_ERROR_ABSOLUTE,
                EPS_ERROR_RELATIVE,
                EPS_ERROR_BACKWARD } EPSErrorType;
-PETSC_EXTERN const char *EPSErrorTypes[];
+SLEPC_EXTERN const char *EPSErrorTypes[];
 
 /*E
     EPSConv - Determines the convergence test
@@ -172,118 +172,118 @@ typedef enum {/* converged */
               EPS_DIVERGED_BREAKDOWN           = -2,
               EPS_DIVERGED_SYMMETRY_LOST       = -3,
               EPS_CONVERGED_ITERATING          =  0} EPSConvergedReason;
-PETSC_EXTERN const char *const*EPSConvergedReasons;
-
-PETSC_EXTERN PetscErrorCode EPSCreate(MPI_Comm,EPS*);
-PETSC_EXTERN PetscErrorCode EPSDestroy(EPS*);
-PETSC_EXTERN PetscErrorCode EPSReset(EPS);
-PETSC_EXTERN PetscErrorCode EPSSetType(EPS,EPSType);
-PETSC_EXTERN PetscErrorCode EPSGetType(EPS,EPSType*);
-PETSC_EXTERN PetscErrorCode EPSSetProblemType(EPS,EPSProblemType);
-PETSC_EXTERN PetscErrorCode EPSGetProblemType(EPS,EPSProblemType*);
-PETSC_EXTERN PetscErrorCode EPSSetExtraction(EPS,EPSExtraction);
-PETSC_EXTERN PetscErrorCode EPSGetExtraction(EPS,EPSExtraction*);
-PETSC_EXTERN PetscErrorCode EPSSetBalance(EPS,EPSBalance,PetscInt,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSGetBalance(EPS,EPSBalance*,PetscInt*,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSSetOperators(EPS,Mat,Mat);
-PETSC_EXTERN PetscErrorCode EPSGetOperators(EPS,Mat*,Mat*);
-PETSC_EXTERN PetscErrorCode EPSSetFromOptions(EPS);
-PETSC_EXTERN PetscErrorCode EPSSetUp(EPS);
-PETSC_EXTERN PetscErrorCode EPSSolve(EPS);
-PETSC_EXTERN PetscErrorCode EPSView(EPS,PetscViewer);
+SLEPC_EXTERN const char *const*EPSConvergedReasons;
+
+SLEPC_EXTERN PetscErrorCode EPSCreate(MPI_Comm,EPS*);
+SLEPC_EXTERN PetscErrorCode EPSDestroy(EPS*);
+SLEPC_EXTERN PetscErrorCode EPSReset(EPS);
+SLEPC_EXTERN PetscErrorCode EPSSetType(EPS,EPSType);
+SLEPC_EXTERN PetscErrorCode EPSGetType(EPS,EPSType*);
+SLEPC_EXTERN PetscErrorCode EPSSetProblemType(EPS,EPSProblemType);
+SLEPC_EXTERN PetscErrorCode EPSGetProblemType(EPS,EPSProblemType*);
+SLEPC_EXTERN PetscErrorCode EPSSetExtraction(EPS,EPSExtraction);
+SLEPC_EXTERN PetscErrorCode EPSGetExtraction(EPS,EPSExtraction*);
+SLEPC_EXTERN PetscErrorCode EPSSetBalance(EPS,EPSBalance,PetscInt,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSGetBalance(EPS,EPSBalance*,PetscInt*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSSetOperators(EPS,Mat,Mat);
+SLEPC_EXTERN PetscErrorCode EPSGetOperators(EPS,Mat*,Mat*);
+SLEPC_EXTERN PetscErrorCode EPSSetFromOptions(EPS);
+SLEPC_EXTERN PetscErrorCode EPSSetUp(EPS);
+SLEPC_EXTERN PetscErrorCode EPSSolve(EPS);
+SLEPC_EXTERN PetscErrorCode EPSView(EPS,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode EPSViewFromOptions(EPS eps,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)eps,obj,name);}
-PETSC_EXTERN PetscErrorCode EPSErrorView(EPS,EPSErrorType,PetscViewer);
+SLEPC_EXTERN PetscErrorCode EPSErrorView(EPS,EPSErrorType,PetscViewer);
 PETSC_DEPRECATED("Use EPSErrorView()") PETSC_STATIC_INLINE PetscErrorCode EPSPrintSolution(EPS eps,PetscViewer v) {return EPSErrorView(eps,EPS_ERROR_RELATIVE,v);}
-PETSC_EXTERN PetscErrorCode EPSErrorViewFromOptions(EPS);
-PETSC_EXTERN PetscErrorCode EPSReasonView(EPS,PetscViewer);
-PETSC_EXTERN PetscErrorCode EPSReasonViewFromOptions(EPS);
-PETSC_EXTERN PetscErrorCode EPSValuesView(EPS,PetscViewer);
-PETSC_EXTERN PetscErrorCode EPSValuesViewFromOptions(EPS);
-PETSC_EXTERN PetscErrorCode EPSVectorsView(EPS,PetscViewer);
-PETSC_EXTERN PetscErrorCode EPSVectorsViewFromOptions(EPS);
-
-PETSC_EXTERN PetscErrorCode EPSSetTarget(EPS,PetscScalar);
-PETSC_EXTERN PetscErrorCode EPSGetTarget(EPS,PetscScalar*);
-PETSC_EXTERN PetscErrorCode EPSSetInterval(EPS,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSGetInterval(EPS,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSSetST(EPS,ST);
-PETSC_EXTERN PetscErrorCode EPSGetST(EPS,ST*);
-PETSC_EXTERN PetscErrorCode EPSSetBV(EPS,BV);
-PETSC_EXTERN PetscErrorCode EPSGetBV(EPS,BV*);
-PETSC_EXTERN PetscErrorCode EPSSetRG(EPS,RG);
-PETSC_EXTERN PetscErrorCode EPSGetRG(EPS,RG*);
-PETSC_EXTERN PetscErrorCode EPSSetDS(EPS,DS);
-PETSC_EXTERN PetscErrorCode EPSGetDS(EPS,DS*);
-PETSC_EXTERN PetscErrorCode EPSSetTolerances(EPS,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSGetTolerances(EPS,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSSetConvergenceTestFunction(EPS,PetscErrorCode (*)(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode EPSSetConvergenceTest(EPS,EPSConv);
-PETSC_EXTERN PetscErrorCode EPSGetConvergenceTest(EPS,EPSConv*);
-PETSC_EXTERN PetscErrorCode EPSConvergedAbsolute(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode EPSConvergedRelative(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode EPSConvergedNorm(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode EPSSetStoppingTestFunction(EPS,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscInt,PetscInt,EPSConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode EPSSetStoppingTest(EPS,EPSStop);
-PETSC_EXTERN PetscErrorCode EPSGetStoppingTest(EPS,EPSStop*);
-PETSC_EXTERN PetscErrorCode EPSStoppingBasic(EPS,PetscInt,PetscInt,PetscInt,PetscInt,EPSConvergedReason*,void*);
-PETSC_EXTERN PetscErrorCode EPSGetConvergedReason(EPS,EPSConvergedReason*);
-
-PETSC_EXTERN PetscErrorCode EPSSetDimensions(EPS,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSGetDimensions(EPS,PetscInt*,PetscInt*,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode EPSGetConverged(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSGetEigenpair(EPS,PetscInt,PetscScalar*,PetscScalar*,Vec,Vec);
-PETSC_EXTERN PetscErrorCode EPSGetEigenvalue(EPS,PetscInt,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode EPSGetEigenvector(EPS,PetscInt,Vec,Vec);
-
-PETSC_EXTERN PetscErrorCode EPSComputeError(EPS,PetscInt,EPSErrorType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSErrorViewFromOptions(EPS);
+SLEPC_EXTERN PetscErrorCode EPSReasonView(EPS,PetscViewer);
+SLEPC_EXTERN PetscErrorCode EPSReasonViewFromOptions(EPS);
+SLEPC_EXTERN PetscErrorCode EPSValuesView(EPS,PetscViewer);
+SLEPC_EXTERN PetscErrorCode EPSValuesViewFromOptions(EPS);
+SLEPC_EXTERN PetscErrorCode EPSVectorsView(EPS,PetscViewer);
+SLEPC_EXTERN PetscErrorCode EPSVectorsViewFromOptions(EPS);
+
+SLEPC_EXTERN PetscErrorCode EPSSetTarget(EPS,PetscScalar);
+SLEPC_EXTERN PetscErrorCode EPSGetTarget(EPS,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode EPSSetInterval(EPS,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSGetInterval(EPS,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSSetST(EPS,ST);
+SLEPC_EXTERN PetscErrorCode EPSGetST(EPS,ST*);
+SLEPC_EXTERN PetscErrorCode EPSSetBV(EPS,BV);
+SLEPC_EXTERN PetscErrorCode EPSGetBV(EPS,BV*);
+SLEPC_EXTERN PetscErrorCode EPSSetRG(EPS,RG);
+SLEPC_EXTERN PetscErrorCode EPSGetRG(EPS,RG*);
+SLEPC_EXTERN PetscErrorCode EPSSetDS(EPS,DS);
+SLEPC_EXTERN PetscErrorCode EPSGetDS(EPS,DS*);
+SLEPC_EXTERN PetscErrorCode EPSSetTolerances(EPS,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSGetTolerances(EPS,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSSetConvergenceTestFunction(EPS,PetscErrorCode (*)(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode EPSSetConvergenceTest(EPS,EPSConv);
+SLEPC_EXTERN PetscErrorCode EPSGetConvergenceTest(EPS,EPSConv*);
+SLEPC_EXTERN PetscErrorCode EPSConvergedAbsolute(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode EPSConvergedRelative(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode EPSConvergedNorm(EPS,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode EPSSetStoppingTestFunction(EPS,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscInt,PetscInt,EPSConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode EPSSetStoppingTest(EPS,EPSStop);
+SLEPC_EXTERN PetscErrorCode EPSGetStoppingTest(EPS,EPSStop*);
+SLEPC_EXTERN PetscErrorCode EPSStoppingBasic(EPS,PetscInt,PetscInt,PetscInt,PetscInt,EPSConvergedReason*,void*);
+SLEPC_EXTERN PetscErrorCode EPSGetConvergedReason(EPS,EPSConvergedReason*);
+
+SLEPC_EXTERN PetscErrorCode EPSSetDimensions(EPS,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSGetDimensions(EPS,PetscInt*,PetscInt*,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode EPSGetConverged(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSGetEigenpair(EPS,PetscInt,PetscScalar*,PetscScalar*,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode EPSGetEigenvalue(EPS,PetscInt,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode EPSGetEigenvector(EPS,PetscInt,Vec,Vec);
+
+SLEPC_EXTERN PetscErrorCode EPSComputeError(EPS,PetscInt,EPSErrorType,PetscReal*);
 PETSC_DEPRECATED("Use EPSComputeError()") PETSC_STATIC_INLINE PetscErrorCode EPSComputeRelativeError(EPS eps,PetscInt i,PetscReal *r) {return EPSComputeError(eps,i,EPS_ERROR_RELATIVE,r);}
 PETSC_DEPRECATED("Use EPSComputeError() with EPS_ERROR_ABSOLUTE") PETSC_STATIC_INLINE PetscErrorCode EPSComputeResidualNorm(EPS eps,PetscInt i,PetscReal *r) {return EPSComputeError(eps,i,EPS_ERROR_ABSOLUTE,r);}
-PETSC_EXTERN PetscErrorCode EPSGetInvariantSubspace(EPS,Vec*);
-PETSC_EXTERN PetscErrorCode EPSGetErrorEstimate(EPS,PetscInt,PetscReal*);
-
-PETSC_EXTERN PetscErrorCode EPSMonitor(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSMonitorSet(EPS,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
-PETSC_EXTERN PetscErrorCode EPSMonitorSetFromOptions(EPS,const char*,const char*,const char*,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
-PETSC_EXTERN PetscErrorCode EPSConvMonitorSetFromOptions(EPS,const char*,const char*,const char*,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor));
-PETSC_EXTERN PetscErrorCode EPSMonitorCancel(EPS);
-PETSC_EXTERN PetscErrorCode EPSGetMonitorContext(EPS,void**);
-PETSC_EXTERN PetscErrorCode EPSGetIterationNumber(EPS,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode EPSSetWhichEigenpairs(EPS,EPSWhich);
-PETSC_EXTERN PetscErrorCode EPSGetWhichEigenpairs(EPS,EPSWhich*);
-PETSC_EXTERN PetscErrorCode EPSSetTrueResidual(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSGetTrueResidual(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSSetPurify(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSGetPurify(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSSetEigenvalueComparison(EPS,PetscErrorCode (*func)(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*),void*);
-PETSC_EXTERN PetscErrorCode EPSSetArbitrarySelection(EPS,PetscErrorCode (*func)(PetscScalar,PetscScalar,Vec,Vec,PetscScalar*,PetscScalar*,void*),void*);
-PETSC_EXTERN PetscErrorCode EPSIsGeneralized(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSIsHermitian(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSIsPositive(EPS,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode EPSMonitorFirst(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode EPSMonitorAll(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode EPSMonitorConverged(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor);
-PETSC_EXTERN PetscErrorCode EPSMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
-PETSC_EXTERN PetscErrorCode EPSMonitorLG(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
-PETSC_EXTERN PetscErrorCode EPSMonitorLGAll(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
-
-PETSC_EXTERN PetscErrorCode EPSSetTrackAll(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSGetTrackAll(EPS,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode EPSSetDeflationSpace(EPS,PetscInt,Vec*);
-PETSC_EXTERN PetscErrorCode EPSSetInitialSpace(EPS,PetscInt,Vec*);
-
-PETSC_EXTERN PetscErrorCode EPSSetOptionsPrefix(EPS,const char*);
-PETSC_EXTERN PetscErrorCode EPSAppendOptionsPrefix(EPS,const char*);
-PETSC_EXTERN PetscErrorCode EPSGetOptionsPrefix(EPS,const char*[]);
-
-PETSC_EXTERN PetscFunctionList EPSList;
-PETSC_EXTERN PetscErrorCode EPSRegister(const char[],PetscErrorCode(*)(EPS));
-
-PETSC_EXTERN PetscErrorCode EPSSetWorkVecs(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSAllocateSolution(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSGetInvariantSubspace(EPS,Vec*);
+SLEPC_EXTERN PetscErrorCode EPSGetErrorEstimate(EPS,PetscInt,PetscReal*);
+
+SLEPC_EXTERN PetscErrorCode EPSMonitor(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSMonitorSet(EPS,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
+SLEPC_EXTERN PetscErrorCode EPSMonitorSetFromOptions(EPS,const char*,const char*,const char*,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSConvMonitorSetFromOptions(EPS,const char*,const char*,const char*,PetscErrorCode (*)(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor));
+SLEPC_EXTERN PetscErrorCode EPSMonitorCancel(EPS);
+SLEPC_EXTERN PetscErrorCode EPSGetMonitorContext(EPS,void**);
+SLEPC_EXTERN PetscErrorCode EPSGetIterationNumber(EPS,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode EPSSetWhichEigenpairs(EPS,EPSWhich);
+SLEPC_EXTERN PetscErrorCode EPSGetWhichEigenpairs(EPS,EPSWhich*);
+SLEPC_EXTERN PetscErrorCode EPSSetTrueResidual(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSGetTrueResidual(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSSetPurify(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSGetPurify(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSSetEigenvalueComparison(EPS,PetscErrorCode (*func)(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*),void*);
+SLEPC_EXTERN PetscErrorCode EPSSetArbitrarySelection(EPS,PetscErrorCode (*func)(PetscScalar,PetscScalar,Vec,Vec,PetscScalar*,PetscScalar*,void*),void*);
+SLEPC_EXTERN PetscErrorCode EPSIsGeneralized(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSIsHermitian(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSIsPositive(EPS,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode EPSMonitorFirst(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode EPSMonitorAll(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode EPSMonitorConverged(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor);
+SLEPC_EXTERN PetscErrorCode EPSMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
+SLEPC_EXTERN PetscErrorCode EPSMonitorLG(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
+SLEPC_EXTERN PetscErrorCode EPSMonitorLGAll(EPS,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
+
+SLEPC_EXTERN PetscErrorCode EPSSetTrackAll(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSGetTrackAll(EPS,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode EPSSetDeflationSpace(EPS,PetscInt,Vec*);
+SLEPC_EXTERN PetscErrorCode EPSSetInitialSpace(EPS,PetscInt,Vec*);
+
+SLEPC_EXTERN PetscErrorCode EPSSetOptionsPrefix(EPS,const char*);
+SLEPC_EXTERN PetscErrorCode EPSAppendOptionsPrefix(EPS,const char*);
+SLEPC_EXTERN PetscErrorCode EPSGetOptionsPrefix(EPS,const char*[]);
+
+SLEPC_EXTERN PetscFunctionList EPSList;
+SLEPC_EXTERN PetscErrorCode EPSRegister(const char[],PetscErrorCode(*)(EPS));
+
+SLEPC_EXTERN PetscErrorCode EPSSetWorkVecs(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSAllocateSolution(EPS,PetscInt);
 
 /* --------- options specific to particular eigensolvers -------- */
 
@@ -297,37 +297,37 @@ E*/
 typedef enum { EPS_POWER_SHIFT_CONSTANT,
                EPS_POWER_SHIFT_RAYLEIGH,
                EPS_POWER_SHIFT_WILKINSON } EPSPowerShiftType;
-PETSC_EXTERN const char *EPSPowerShiftTypes[];
-
-PETSC_EXTERN PetscErrorCode EPSPowerSetShiftType(EPS,EPSPowerShiftType);
-PETSC_EXTERN PetscErrorCode EPSPowerGetShiftType(EPS,EPSPowerShiftType*);
-PETSC_EXTERN PetscErrorCode EPSPowerSetNonlinear(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSPowerGetNonlinear(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSPowerSetUpdate(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSPowerGetUpdate(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSPowerSetSNES(EPS,SNES);
-PETSC_EXTERN PetscErrorCode EPSPowerGetSNES(EPS,SNES*);
-
-PETSC_EXTERN PetscErrorCode EPSArnoldiSetDelayed(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSArnoldiGetDelayed(EPS,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurSetRestart(EPS,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetRestart(EPS,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurSetLocking(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetLocking(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurSetPartitions(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetPartitions(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurSetDetectZeros(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetDetectZeros(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurSetDimensions(EPS,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetDimensions(EPS,PetscInt*,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurSetSubintervals(EPS,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetSubintervals(EPS,PetscReal**);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetInertias(EPS,PetscInt*,PetscReal**,PetscInt**);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetSubcommInfo(EPS,PetscInt*,PetscInt*,Vec*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetSubcommPairs(EPS,PetscInt,PetscScalar*,Vec);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurGetSubcommMats(EPS,Mat*,Mat*);
-PETSC_EXTERN PetscErrorCode EPSKrylovSchurUpdateSubcommMats(EPS,PetscScalar,PetscScalar,Mat,PetscScalar,PetscScalar, Mat,MatStructure,PetscBool);
+SLEPC_EXTERN const char *EPSPowerShiftTypes[];
+
+SLEPC_EXTERN PetscErrorCode EPSPowerSetShiftType(EPS,EPSPowerShiftType);
+SLEPC_EXTERN PetscErrorCode EPSPowerGetShiftType(EPS,EPSPowerShiftType*);
+SLEPC_EXTERN PetscErrorCode EPSPowerSetNonlinear(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSPowerGetNonlinear(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSPowerSetUpdate(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSPowerGetUpdate(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSPowerSetSNES(EPS,SNES);
+SLEPC_EXTERN PetscErrorCode EPSPowerGetSNES(EPS,SNES*);
+
+SLEPC_EXTERN PetscErrorCode EPSArnoldiSetDelayed(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSArnoldiGetDelayed(EPS,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurSetRestart(EPS,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetRestart(EPS,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurSetLocking(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetLocking(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurSetPartitions(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetPartitions(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurSetDetectZeros(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetDetectZeros(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurSetDimensions(EPS,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetDimensions(EPS,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurSetSubintervals(EPS,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetSubintervals(EPS,PetscReal**);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetInertias(EPS,PetscInt*,PetscReal**,PetscInt**);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetSubcommInfo(EPS,PetscInt*,PetscInt*,Vec*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetSubcommPairs(EPS,PetscInt,PetscScalar*,Vec);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurGetSubcommMats(EPS,Mat*,Mat*);
+SLEPC_EXTERN PetscErrorCode EPSKrylovSchurUpdateSubcommMats(EPS,PetscScalar,PetscScalar,Mat,PetscScalar,PetscScalar, Mat,MatStructure,PetscBool);
 
 /*E
     EPSLanczosReorthogType - determines the type of reorthogonalization
@@ -343,13 +343,13 @@ typedef enum { EPS_LANCZOS_REORTHOG_LOCAL,
                EPS_LANCZOS_REORTHOG_PERIODIC,
                EPS_LANCZOS_REORTHOG_PARTIAL,
                EPS_LANCZOS_REORTHOG_DELAYED } EPSLanczosReorthogType;
-PETSC_EXTERN const char *EPSLanczosReorthogTypes[];
+SLEPC_EXTERN const char *EPSLanczosReorthogTypes[];
 
-PETSC_EXTERN PetscErrorCode EPSLanczosSetReorthog(EPS,EPSLanczosReorthogType);
-PETSC_EXTERN PetscErrorCode EPSLanczosGetReorthog(EPS,EPSLanczosReorthogType*);
+SLEPC_EXTERN PetscErrorCode EPSLanczosSetReorthog(EPS,EPSLanczosReorthogType);
+SLEPC_EXTERN PetscErrorCode EPSLanczosGetReorthog(EPS,EPSLanczosReorthogType*);
 
-PETSC_EXTERN PetscErrorCode EPSBlzpackSetBlockSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSBlzpackSetNSteps(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSBlzpackSetBlockSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSBlzpackSetNSteps(EPS,PetscInt);
 
 /*E
     EPSPRIMMEMethod - determines the method selected in the PRIMME library
@@ -373,50 +373,50 @@ typedef enum { EPS_PRIMME_DYNAMIC=1,
                EPS_PRIMME_SUBSPACE_ITERATION,
                EPS_PRIMME_LOBPCG_ORTHOBASIS,
                EPS_PRIMME_LOBPCG_ORTHOBASISW } EPSPRIMMEMethod;
-PETSC_EXTERN const char *EPSPRIMMEMethods[];
-
-PETSC_EXTERN PetscErrorCode EPSPRIMMESetBlockSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSPRIMMEGetBlockSize(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSPRIMMESetMethod(EPS,EPSPRIMMEMethod);
-PETSC_EXTERN PetscErrorCode EPSPRIMMEGetMethod(EPS,EPSPRIMMEMethod*);
-
-PETSC_EXTERN PetscErrorCode EPSGDSetKrylovStart(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSGDGetKrylovStart(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSGDSetBlockSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSGDGetBlockSize(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSGDSetRestart(EPS,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSGDGetRestart(EPS,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSGDSetInitialSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSGDGetInitialSize(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSGDSetBOrth(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSGDGetBOrth(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSGDSetDoubleExpansion(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSGDGetDoubleExpansion(EPS,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode EPSJDSetKrylovStart(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSJDGetKrylovStart(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSJDSetBlockSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSJDGetBlockSize(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSJDSetRestart(EPS,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSJDGetRestart(EPS,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSJDSetInitialSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSJDGetInitialSize(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSJDSetFix(EPS,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSJDGetFix(EPS,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSJDSetConstCorrectionTol(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSJDGetConstCorrectionTol(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSJDSetBOrth(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSJDGetBOrth(EPS,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode EPSRQCGSetReset(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSRQCGGetReset(EPS,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode EPSLOBPCGSetBlockSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSLOBPCGGetBlockSize(EPS,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSLOBPCGSetRestart(EPS,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSLOBPCGGetRestart(EPS,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSLOBPCGSetLocking(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSLOBPCGGetLocking(EPS,PetscBool*);
+SLEPC_EXTERN const char *EPSPRIMMEMethods[];
+
+SLEPC_EXTERN PetscErrorCode EPSPRIMMESetBlockSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSPRIMMEGetBlockSize(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSPRIMMESetMethod(EPS,EPSPRIMMEMethod);
+SLEPC_EXTERN PetscErrorCode EPSPRIMMEGetMethod(EPS,EPSPRIMMEMethod*);
+
+SLEPC_EXTERN PetscErrorCode EPSGDSetKrylovStart(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSGDGetKrylovStart(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSGDSetBlockSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSGDGetBlockSize(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSGDSetRestart(EPS,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSGDGetRestart(EPS,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSGDSetInitialSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSGDGetInitialSize(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSGDSetBOrth(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSGDGetBOrth(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSGDSetDoubleExpansion(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSGDGetDoubleExpansion(EPS,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode EPSJDSetKrylovStart(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSJDGetKrylovStart(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSJDSetBlockSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSJDGetBlockSize(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSJDSetRestart(EPS,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSJDGetRestart(EPS,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSJDSetInitialSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSJDGetInitialSize(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSJDSetFix(EPS,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSJDGetFix(EPS,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSJDSetConstCorrectionTol(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSJDGetConstCorrectionTol(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSJDSetBOrth(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSJDGetBOrth(EPS,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode EPSRQCGSetReset(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSRQCGGetReset(EPS,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode EPSLOBPCGSetBlockSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSLOBPCGGetBlockSize(EPS,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSLOBPCGSetRestart(EPS,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSLOBPCGGetRestart(EPS,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSLOBPCGSetLocking(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSLOBPCGGetLocking(EPS,PetscBool*);
 
 /*E
     EPSCISSQuadRule - determines the quadrature rule in the CISS solver
@@ -427,7 +427,7 @@ PETSC_EXTERN PetscErrorCode EPSLOBPCGGetLocking(EPS,PetscBool*);
 E*/
 typedef enum { EPS_CISS_QUADRULE_TRAPEZOIDAL=1,
                EPS_CISS_QUADRULE_CHEBYSHEV } EPSCISSQuadRule;
-PETSC_EXTERN const char *EPSCISSQuadRules[];
+SLEPC_EXTERN const char *EPSCISSQuadRules[];
 
 /*E
     EPSCISSExtraction - determines the extraction technique in the CISS solver
@@ -438,29 +438,29 @@ PETSC_EXTERN const char *EPSCISSQuadRules[];
 E*/
 typedef enum { EPS_CISS_EXTRACTION_RITZ,
                EPS_CISS_EXTRACTION_HANKEL } EPSCISSExtraction;
-PETSC_EXTERN const char *EPSCISSExtractions[];
-
-PETSC_EXTERN PetscErrorCode EPSCISSSetExtraction(EPS,EPSCISSExtraction);
-PETSC_EXTERN PetscErrorCode EPSCISSGetExtraction(EPS,EPSCISSExtraction*);
-PETSC_EXTERN PetscErrorCode EPSCISSSetQuadRule(EPS,EPSCISSQuadRule);
-PETSC_EXTERN PetscErrorCode EPSCISSGetQuadRule(EPS,EPSCISSQuadRule*);
-PETSC_EXTERN PetscErrorCode EPSCISSSetRegion(EPS,PetscScalar,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSCISSGetRegion(EPS,PetscScalar*,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSCISSSetSizes(EPS,PetscInt,PetscInt,PetscInt,PetscInt,PetscInt,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSCISSGetSizes(EPS,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSCISSSetThreshold(EPS,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode EPSCISSGetThreshold(EPS,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode EPSCISSSetRefinement(EPS,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSCISSGetRefinement(EPS,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode EPSCISSSetUseST(EPS,PetscBool);
-PETSC_EXTERN PetscErrorCode EPSCISSGetUseST(EPS,PetscBool*);
-PETSC_EXTERN PetscErrorCode EPSCISSGetKSPs(EPS,PetscInt*,KSP**);
-
-PETSC_EXTERN PetscErrorCode EPSBLOPEXSetBlockSize(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSBLOPEXGetBlockSize(EPS,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode EPSFEASTSetNumPoints(EPS,PetscInt);
-PETSC_EXTERN PetscErrorCode EPSFEASTGetNumPoints(EPS,PetscInt*);
+SLEPC_EXTERN const char *EPSCISSExtractions[];
+
+SLEPC_EXTERN PetscErrorCode EPSCISSSetExtraction(EPS,EPSCISSExtraction);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetExtraction(EPS,EPSCISSExtraction*);
+SLEPC_EXTERN PetscErrorCode EPSCISSSetQuadRule(EPS,EPSCISSQuadRule);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetQuadRule(EPS,EPSCISSQuadRule*);
+SLEPC_EXTERN PetscErrorCode EPSCISSSetRegion(EPS,PetscScalar,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetRegion(EPS,PetscScalar*,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSCISSSetSizes(EPS,PetscInt,PetscInt,PetscInt,PetscInt,PetscInt,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetSizes(EPS,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSCISSSetThreshold(EPS,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetThreshold(EPS,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode EPSCISSSetRefinement(EPS,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetRefinement(EPS,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode EPSCISSSetUseST(EPS,PetscBool);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetUseST(EPS,PetscBool*);
+SLEPC_EXTERN PetscErrorCode EPSCISSGetKSPs(EPS,PetscInt*,KSP**);
+
+SLEPC_EXTERN PetscErrorCode EPSBLOPEXSetBlockSize(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSBLOPEXGetBlockSize(EPS,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode EPSFEASTSetNumPoints(EPS,PetscInt);
+SLEPC_EXTERN PetscErrorCode EPSFEASTGetNumPoints(EPS,PetscInt*);
 
 #endif
 
diff --git a/include/slepcexp.h b/include/slepcexp.h
new file mode 100644
index 000000000..70364b47d
--- /dev/null
+++ b/include/slepcexp.h
@@ -0,0 +1,36 @@
+/*
+   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+   SLEPc - Scalable Library for Eigenvalue Problem Computations
+   Copyright (c) 2002-2017, Universitat Politecnica de Valencia, Spain
+
+   This file is part of SLEPc.
+   SLEPc is distributed under a 2-clause BSD license (see LICENSE).
+   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+*/
+
+#if !defined(__SLEPCEXP_H)
+#define __SLEPCEXP_H
+
+#include <petscsys.h>
+
+#if defined(slepc_EXPORTS)      /* CMake defines this when building the shared library */
+#  define SLEPC_VISIBILITY_PUBLIC PETSC_DLLEXPORT
+#else  /* Win32 users need this to import symbols from petsc.dll */
+#  define SLEPC_VISIBILITY_PUBLIC PETSC_DLLIMPORT
+#endif
+
+/*
+    Functions tagged with SLEPC_EXTERN in the header files are
+  always defined as extern "C" when compiled with C++ so they may be
+  used from C and are always visible in the shared libraries
+*/
+#if defined(__cplusplus)
+#define SLEPC_EXTERN extern "C" SLEPC_VISIBILITY_PUBLIC
+#define SLEPC_EXTERN_TYPEDEF extern "C"
+#else
+#define SLEPC_EXTERN extern SLEPC_VISIBILITY_PUBLIC
+#define SLEPC_EXTERN_TYPEDEF
+#endif
+
+#endif
+
diff --git a/include/slepcfn.h b/include/slepcfn.h
index c9e0151ff..f94aadd6a 100644
--- a/include/slepcfn.h
+++ b/include/slepcfn.h
@@ -17,7 +17,7 @@
 
 #define FN_MAX_SOLVE 6
 
-PETSC_EXTERN PetscErrorCode FNInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode FNInitializePackage(void);
 /*S
    FN - Abstraction of a mathematical function.
 
@@ -44,7 +44,7 @@ typedef const char* FNType;
 #define FNINVSQRT  "invsqrt"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId FN_CLASSID;
+SLEPC_EXTERN PetscClassId FN_CLASSID;
 
 /*E
     FNCombineType - Determines how two functions are combined
@@ -67,45 +67,45 @@ typedef enum { FN_COMBINE_ADD,
 E*/
 typedef enum { FN_PARALLEL_REDUNDANT,
                FN_PARALLEL_SYNCHRONIZED } FNParallelType;
-PETSC_EXTERN const char *FNParallelTypes[];
-
-PETSC_EXTERN PetscErrorCode FNCreate(MPI_Comm,FN*);
-PETSC_EXTERN PetscErrorCode FNSetType(FN,FNType);
-PETSC_EXTERN PetscErrorCode FNGetType(FN,FNType*);
-PETSC_EXTERN PetscErrorCode FNSetOptionsPrefix(FN,const char *);
-PETSC_EXTERN PetscErrorCode FNAppendOptionsPrefix(FN,const char *);
-PETSC_EXTERN PetscErrorCode FNGetOptionsPrefix(FN,const char *[]);
-PETSC_EXTERN PetscErrorCode FNSetFromOptions(FN);
-PETSC_EXTERN PetscErrorCode FNView(FN,PetscViewer);
-PETSC_EXTERN PetscErrorCode FNDestroy(FN*);
-PETSC_EXTERN PetscErrorCode FNDuplicate(FN,MPI_Comm,FN*);
-
-PETSC_EXTERN PetscErrorCode FNSetScale(FN,PetscScalar,PetscScalar);
-PETSC_EXTERN PetscErrorCode FNGetScale(FN,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode FNSetMethod(FN,PetscInt);
-PETSC_EXTERN PetscErrorCode FNGetMethod(FN,PetscInt*);
-PETSC_EXTERN PetscErrorCode FNSetParallel(FN,FNParallelType);
-PETSC_EXTERN PetscErrorCode FNGetParallel(FN,FNParallelType*);
-
-PETSC_EXTERN PetscErrorCode FNEvaluateFunction(FN,PetscScalar,PetscScalar*);
-PETSC_EXTERN PetscErrorCode FNEvaluateDerivative(FN,PetscScalar,PetscScalar*);
-PETSC_EXTERN PetscErrorCode FNEvaluateFunctionMat(FN,Mat,Mat);
-PETSC_EXTERN PetscErrorCode FNEvaluateFunctionMatVec(FN,Mat,Vec);
-
-PETSC_EXTERN PetscFunctionList FNList;
-PETSC_EXTERN PetscErrorCode FNRegister(const char[],PetscErrorCode(*)(FN));
+SLEPC_EXTERN const char *FNParallelTypes[];
+
+SLEPC_EXTERN PetscErrorCode FNCreate(MPI_Comm,FN*);
+SLEPC_EXTERN PetscErrorCode FNSetType(FN,FNType);
+SLEPC_EXTERN PetscErrorCode FNGetType(FN,FNType*);
+SLEPC_EXTERN PetscErrorCode FNSetOptionsPrefix(FN,const char *);
+SLEPC_EXTERN PetscErrorCode FNAppendOptionsPrefix(FN,const char *);
+SLEPC_EXTERN PetscErrorCode FNGetOptionsPrefix(FN,const char *[]);
+SLEPC_EXTERN PetscErrorCode FNSetFromOptions(FN);
+SLEPC_EXTERN PetscErrorCode FNView(FN,PetscViewer);
+SLEPC_EXTERN PetscErrorCode FNDestroy(FN*);
+SLEPC_EXTERN PetscErrorCode FNDuplicate(FN,MPI_Comm,FN*);
+
+SLEPC_EXTERN PetscErrorCode FNSetScale(FN,PetscScalar,PetscScalar);
+SLEPC_EXTERN PetscErrorCode FNGetScale(FN,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode FNSetMethod(FN,PetscInt);
+SLEPC_EXTERN PetscErrorCode FNGetMethod(FN,PetscInt*);
+SLEPC_EXTERN PetscErrorCode FNSetParallel(FN,FNParallelType);
+SLEPC_EXTERN PetscErrorCode FNGetParallel(FN,FNParallelType*);
+
+SLEPC_EXTERN PetscErrorCode FNEvaluateFunction(FN,PetscScalar,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode FNEvaluateDerivative(FN,PetscScalar,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode FNEvaluateFunctionMat(FN,Mat,Mat);
+SLEPC_EXTERN PetscErrorCode FNEvaluateFunctionMatVec(FN,Mat,Vec);
+
+SLEPC_EXTERN PetscFunctionList FNList;
+SLEPC_EXTERN PetscErrorCode FNRegister(const char[],PetscErrorCode(*)(FN));
 
 /* --------- options specific to particular functions -------- */
 
-PETSC_EXTERN PetscErrorCode FNRationalSetNumerator(FN,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode FNRationalGetNumerator(FN,PetscInt*,PetscScalar**);
-PETSC_EXTERN PetscErrorCode FNRationalSetDenominator(FN,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode FNRationalGetDenominator(FN,PetscInt*,PetscScalar**);
+SLEPC_EXTERN PetscErrorCode FNRationalSetNumerator(FN,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode FNRationalGetNumerator(FN,PetscInt*,PetscScalar**);
+SLEPC_EXTERN PetscErrorCode FNRationalSetDenominator(FN,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode FNRationalGetDenominator(FN,PetscInt*,PetscScalar**);
 
-PETSC_EXTERN PetscErrorCode FNCombineSetChildren(FN,FNCombineType,FN,FN);
-PETSC_EXTERN PetscErrorCode FNCombineGetChildren(FN,FNCombineType*,FN*,FN*);
+SLEPC_EXTERN PetscErrorCode FNCombineSetChildren(FN,FNCombineType,FN,FN);
+SLEPC_EXTERN PetscErrorCode FNCombineGetChildren(FN,FNCombineType*,FN*,FN*);
 
-PETSC_EXTERN PetscErrorCode FNPhiSetIndex(FN,PetscInt);
-PETSC_EXTERN PetscErrorCode FNPhiGetIndex(FN,PetscInt*);
+SLEPC_EXTERN PetscErrorCode FNPhiSetIndex(FN,PetscInt);
+SLEPC_EXTERN PetscErrorCode FNPhiGetIndex(FN,PetscInt*);
 
 #endif
diff --git a/include/slepclme.h b/include/slepclme.h
index 9d961d1ea..3917272eb 100644
--- a/include/slepclme.h
+++ b/include/slepclme.h
@@ -15,7 +15,7 @@
 #define __SLEPCLME_H
 #include <slepcbv.h>
 
-PETSC_EXTERN PetscErrorCode LMEInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode LMEInitializePackage(void);
 
 /*S
     LME - SLEPc object that encapsulates functionality for linear matrix equations
@@ -37,7 +37,7 @@ typedef const char* LMEType;
 #define LMEKRYLOV   "krylov"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId LME_CLASSID;
+SLEPC_EXTERN PetscClassId LME_CLASSID;
 
 /*E
     LMEProblemType - Determines the type of linear matrix equation
@@ -52,57 +52,57 @@ typedef enum { LME_LYAPUNOV,
                LME_GEN_SYLVESTER,
                LME_DT_LYAPUNOV ,
                LME_STEIN} LMEProblemType;
-PETSC_EXTERN const char *LMEProblemTypes[];
-
-PETSC_EXTERN PetscErrorCode LMECreate(MPI_Comm,LME *);
-PETSC_EXTERN PetscErrorCode LMEDestroy(LME*);
-PETSC_EXTERN PetscErrorCode LMEReset(LME);
-PETSC_EXTERN PetscErrorCode LMESetType(LME,LMEType);
-PETSC_EXTERN PetscErrorCode LMEGetType(LME,LMEType*);
-PETSC_EXTERN PetscErrorCode LMESetProblemType(LME,LMEProblemType);
-PETSC_EXTERN PetscErrorCode LMEGetProblemType(LME,LMEProblemType*);
-PETSC_EXTERN PetscErrorCode LMESetCoefficients(LME,Mat,Mat,Mat,Mat);
-PETSC_EXTERN PetscErrorCode LMEGetCoefficients(LME,Mat*,Mat*,Mat*,Mat*);
-PETSC_EXTERN PetscErrorCode LMESetRHS(LME,Mat);
-PETSC_EXTERN PetscErrorCode LMEGetRHS(LME,Mat*);
-PETSC_EXTERN PetscErrorCode LMESetSolution(LME,Mat);
-PETSC_EXTERN PetscErrorCode LMEGetSolution(LME,Mat*);
-PETSC_EXTERN PetscErrorCode LMESetFromOptions(LME);
-PETSC_EXTERN PetscErrorCode LMESetUp(LME);
-PETSC_EXTERN PetscErrorCode LMESolve(LME);
-PETSC_EXTERN PetscErrorCode LMEView(LME,PetscViewer);
+SLEPC_EXTERN const char *LMEProblemTypes[];
+
+SLEPC_EXTERN PetscErrorCode LMECreate(MPI_Comm,LME *);
+SLEPC_EXTERN PetscErrorCode LMEDestroy(LME*);
+SLEPC_EXTERN PetscErrorCode LMEReset(LME);
+SLEPC_EXTERN PetscErrorCode LMESetType(LME,LMEType);
+SLEPC_EXTERN PetscErrorCode LMEGetType(LME,LMEType*);
+SLEPC_EXTERN PetscErrorCode LMESetProblemType(LME,LMEProblemType);
+SLEPC_EXTERN PetscErrorCode LMEGetProblemType(LME,LMEProblemType*);
+SLEPC_EXTERN PetscErrorCode LMESetCoefficients(LME,Mat,Mat,Mat,Mat);
+SLEPC_EXTERN PetscErrorCode LMEGetCoefficients(LME,Mat*,Mat*,Mat*,Mat*);
+SLEPC_EXTERN PetscErrorCode LMESetRHS(LME,Mat);
+SLEPC_EXTERN PetscErrorCode LMEGetRHS(LME,Mat*);
+SLEPC_EXTERN PetscErrorCode LMESetSolution(LME,Mat);
+SLEPC_EXTERN PetscErrorCode LMEGetSolution(LME,Mat*);
+SLEPC_EXTERN PetscErrorCode LMESetFromOptions(LME);
+SLEPC_EXTERN PetscErrorCode LMESetUp(LME);
+SLEPC_EXTERN PetscErrorCode LMESolve(LME);
+SLEPC_EXTERN PetscErrorCode LMEView(LME,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode LMEViewFromOptions(LME lme,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)lme,obj,name);}
-PETSC_EXTERN PetscErrorCode LMEReasonView(LME,PetscViewer);
-PETSC_EXTERN PetscErrorCode LMEReasonViewFromOptions(LME);
-
-PETSC_EXTERN PetscErrorCode LMESetBV(LME,BV);
-PETSC_EXTERN PetscErrorCode LMEGetBV(LME,BV*);
-PETSC_EXTERN PetscErrorCode LMESetTolerances(LME,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode LMEGetTolerances(LME,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode LMESetDimensions(LME,PetscInt);
-PETSC_EXTERN PetscErrorCode LMEGetDimensions(LME,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode LMEMonitor(LME,PetscInt,PetscReal);
-PETSC_EXTERN PetscErrorCode LMEMonitorSet(LME,PetscErrorCode (*)(LME,PetscInt,PetscReal,void*),void*,PetscErrorCode (*)(void**));
-PETSC_EXTERN PetscErrorCode LMEMonitorSetFromOptions(LME,const char*,const char*,const char*,PetscErrorCode (*)(LME,PetscInt,PetscReal,PetscViewerAndFormat*));
-PETSC_EXTERN PetscErrorCode LMEMonitorCancel(LME);
-PETSC_EXTERN PetscErrorCode LMEGetMonitorContext(LME,void **);
-PETSC_EXTERN PetscErrorCode LMEGetIterationNumber(LME,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode LMEGetErrorEstimate(LME,PetscReal*);
-PETSC_EXTERN PetscErrorCode LMEComputeError(LME,PetscReal*);
-PETSC_EXTERN PetscErrorCode LMESetErrorIfNotConverged(LME,PetscBool);
-PETSC_EXTERN PetscErrorCode LMEGetErrorIfNotConverged(LME,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode LMEDenseLyapunovChol(LME,PetscScalar*,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscInt,PetscReal*);
-
-PETSC_EXTERN PetscErrorCode LMEMonitorDefault(LME,PetscInt,PetscReal,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode LMEMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
-PETSC_EXTERN PetscErrorCode LMEMonitorLG(LME,PetscInt,PetscReal,void*);
-
-PETSC_EXTERN PetscErrorCode LMESetOptionsPrefix(LME,const char*);
-PETSC_EXTERN PetscErrorCode LMEAppendOptionsPrefix(LME,const char*);
-PETSC_EXTERN PetscErrorCode LMEGetOptionsPrefix(LME,const char*[]);
+SLEPC_EXTERN PetscErrorCode LMEReasonView(LME,PetscViewer);
+SLEPC_EXTERN PetscErrorCode LMEReasonViewFromOptions(LME);
+
+SLEPC_EXTERN PetscErrorCode LMESetBV(LME,BV);
+SLEPC_EXTERN PetscErrorCode LMEGetBV(LME,BV*);
+SLEPC_EXTERN PetscErrorCode LMESetTolerances(LME,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode LMEGetTolerances(LME,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode LMESetDimensions(LME,PetscInt);
+SLEPC_EXTERN PetscErrorCode LMEGetDimensions(LME,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode LMEMonitor(LME,PetscInt,PetscReal);
+SLEPC_EXTERN PetscErrorCode LMEMonitorSet(LME,PetscErrorCode (*)(LME,PetscInt,PetscReal,void*),void*,PetscErrorCode (*)(void**));
+SLEPC_EXTERN PetscErrorCode LMEMonitorSetFromOptions(LME,const char*,const char*,const char*,PetscErrorCode (*)(LME,PetscInt,PetscReal,PetscViewerAndFormat*));
+SLEPC_EXTERN PetscErrorCode LMEMonitorCancel(LME);
+SLEPC_EXTERN PetscErrorCode LMEGetMonitorContext(LME,void **);
+SLEPC_EXTERN PetscErrorCode LMEGetIterationNumber(LME,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode LMEGetErrorEstimate(LME,PetscReal*);
+SLEPC_EXTERN PetscErrorCode LMEComputeError(LME,PetscReal*);
+SLEPC_EXTERN PetscErrorCode LMESetErrorIfNotConverged(LME,PetscBool);
+SLEPC_EXTERN PetscErrorCode LMEGetErrorIfNotConverged(LME,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode LMEDenseLyapunovChol(LME,PetscScalar*,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscInt,PetscReal*);
+
+SLEPC_EXTERN PetscErrorCode LMEMonitorDefault(LME,PetscInt,PetscReal,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode LMEMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
+SLEPC_EXTERN PetscErrorCode LMEMonitorLG(LME,PetscInt,PetscReal,void*);
+
+SLEPC_EXTERN PetscErrorCode LMESetOptionsPrefix(LME,const char*);
+SLEPC_EXTERN PetscErrorCode LMEAppendOptionsPrefix(LME,const char*);
+SLEPC_EXTERN PetscErrorCode LMEGetOptionsPrefix(LME,const char*[]);
 
 /*E
     LMEConvergedReason - reason a matrix function iteration was said to
@@ -118,14 +118,14 @@ typedef enum {/* converged */
               LME_DIVERGED_ITS                 = -1,
               LME_DIVERGED_BREAKDOWN           = -2,
               LME_CONVERGED_ITERATING          =  0} LMEConvergedReason;
-PETSC_EXTERN const char *const*LMEConvergedReasons;
+SLEPC_EXTERN const char *const*LMEConvergedReasons;
 
-PETSC_EXTERN PetscErrorCode LMEGetConvergedReason(LME,LMEConvergedReason *);
+SLEPC_EXTERN PetscErrorCode LMEGetConvergedReason(LME,LMEConvergedReason *);
 
-PETSC_EXTERN PetscFunctionList LMEList;
-PETSC_EXTERN PetscErrorCode LMERegister(const char[],PetscErrorCode(*)(LME));
+SLEPC_EXTERN PetscFunctionList LMEList;
+SLEPC_EXTERN PetscErrorCode LMERegister(const char[],PetscErrorCode(*)(LME));
 
-PETSC_EXTERN PetscErrorCode LMEAllocateSolution(LME,PetscInt);
+SLEPC_EXTERN PetscErrorCode LMEAllocateSolution(LME,PetscInt);
 
 #endif
 
diff --git a/include/slepcmat.h b/include/slepcmat.h
index 3ee5bc829..e559e97e2 100644
--- a/include/slepcmat.h
+++ b/include/slepcmat.h
@@ -15,8 +15,8 @@
 #define __SLEPCMAT_H
 #include <petscmat.h>
 
-PETSC_EXTERN PetscErrorCode MatCreateTile(PetscScalar,Mat,PetscScalar,Mat,PetscScalar,Mat,PetscScalar,Mat,Mat*);
-PETSC_EXTERN PetscErrorCode MatCreateVecsEmpty(Mat,Vec*,Vec*);
+SLEPC_EXTERN PetscErrorCode MatCreateTile(PetscScalar,Mat,PetscScalar,Mat,PetscScalar,Mat,PetscScalar,Mat,Mat*);
+SLEPC_EXTERN PetscErrorCode MatCreateVecsEmpty(Mat,Vec*,Vec*);
 
 #endif
 
diff --git a/include/slepcmfn.h b/include/slepcmfn.h
index a1054dd3e..83f830c82 100644
--- a/include/slepcmfn.h
+++ b/include/slepcmfn.h
@@ -16,7 +16,7 @@
 #include <slepcbv.h>
 #include <slepcfn.h>
 
-PETSC_EXTERN PetscErrorCode MFNInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode MFNInitializePackage(void);
 
 /*S
     MFN - SLEPc object that encapsulates functionality for matrix functions.
@@ -39,49 +39,49 @@ typedef const char* MFNType;
 #define MFNEXPOKIT  "expokit"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId MFN_CLASSID;
-
-PETSC_EXTERN PetscErrorCode MFNCreate(MPI_Comm,MFN *);
-PETSC_EXTERN PetscErrorCode MFNDestroy(MFN*);
-PETSC_EXTERN PetscErrorCode MFNReset(MFN);
-PETSC_EXTERN PetscErrorCode MFNSetType(MFN,MFNType);
-PETSC_EXTERN PetscErrorCode MFNGetType(MFN,MFNType*);
-PETSC_EXTERN PetscErrorCode MFNSetOperator(MFN,Mat);
-PETSC_EXTERN PetscErrorCode MFNGetOperator(MFN,Mat*);
-PETSC_EXTERN PetscErrorCode MFNSetFromOptions(MFN);
-PETSC_EXTERN PetscErrorCode MFNSetUp(MFN);
-PETSC_EXTERN PetscErrorCode MFNSolve(MFN,Vec,Vec);
-PETSC_EXTERN PetscErrorCode MFNView(MFN,PetscViewer);
+SLEPC_EXTERN PetscClassId MFN_CLASSID;
+
+SLEPC_EXTERN PetscErrorCode MFNCreate(MPI_Comm,MFN *);
+SLEPC_EXTERN PetscErrorCode MFNDestroy(MFN*);
+SLEPC_EXTERN PetscErrorCode MFNReset(MFN);
+SLEPC_EXTERN PetscErrorCode MFNSetType(MFN,MFNType);
+SLEPC_EXTERN PetscErrorCode MFNGetType(MFN,MFNType*);
+SLEPC_EXTERN PetscErrorCode MFNSetOperator(MFN,Mat);
+SLEPC_EXTERN PetscErrorCode MFNGetOperator(MFN,Mat*);
+SLEPC_EXTERN PetscErrorCode MFNSetFromOptions(MFN);
+SLEPC_EXTERN PetscErrorCode MFNSetUp(MFN);
+SLEPC_EXTERN PetscErrorCode MFNSolve(MFN,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode MFNView(MFN,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode MFNViewFromOptions(MFN mfn,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)mfn,obj,name);}
-PETSC_EXTERN PetscErrorCode MFNReasonView(MFN,PetscViewer);
-PETSC_EXTERN PetscErrorCode MFNReasonViewFromOptions(MFN);
-
-PETSC_EXTERN PetscErrorCode MFNSetBV(MFN,BV);
-PETSC_EXTERN PetscErrorCode MFNGetBV(MFN,BV*);
-PETSC_EXTERN PetscErrorCode MFNSetFN(MFN,FN);
-PETSC_EXTERN PetscErrorCode MFNGetFN(MFN,FN*);
-PETSC_EXTERN PetscErrorCode MFNSetTolerances(MFN,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode MFNGetTolerances(MFN,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode MFNSetDimensions(MFN,PetscInt);
-PETSC_EXTERN PetscErrorCode MFNGetDimensions(MFN,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode MFNMonitor(MFN,PetscInt,PetscReal);
-PETSC_EXTERN PetscErrorCode MFNMonitorSet(MFN,PetscErrorCode (*)(MFN,PetscInt,PetscReal,void*),void*,PetscErrorCode (*)(void**));
-PETSC_EXTERN PetscErrorCode MFNMonitorSetFromOptions(MFN,const char*,const char*,const char*,PetscErrorCode (*)(MFN,PetscInt,PetscReal,PetscViewerAndFormat*));
-PETSC_EXTERN PetscErrorCode MFNMonitorCancel(MFN);
-PETSC_EXTERN PetscErrorCode MFNGetMonitorContext(MFN,void **);
-PETSC_EXTERN PetscErrorCode MFNGetIterationNumber(MFN,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode MFNSetErrorIfNotConverged(MFN,PetscBool);
-PETSC_EXTERN PetscErrorCode MFNGetErrorIfNotConverged(MFN,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode MFNMonitorDefault(MFN,PetscInt,PetscReal,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode MFNMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
-PETSC_EXTERN PetscErrorCode MFNMonitorLG(MFN,PetscInt,PetscReal,void*);
-
-PETSC_EXTERN PetscErrorCode MFNSetOptionsPrefix(MFN,const char*);
-PETSC_EXTERN PetscErrorCode MFNAppendOptionsPrefix(MFN,const char*);
-PETSC_EXTERN PetscErrorCode MFNGetOptionsPrefix(MFN,const char*[]);
+SLEPC_EXTERN PetscErrorCode MFNReasonView(MFN,PetscViewer);
+SLEPC_EXTERN PetscErrorCode MFNReasonViewFromOptions(MFN);
+
+SLEPC_EXTERN PetscErrorCode MFNSetBV(MFN,BV);
+SLEPC_EXTERN PetscErrorCode MFNGetBV(MFN,BV*);
+SLEPC_EXTERN PetscErrorCode MFNSetFN(MFN,FN);
+SLEPC_EXTERN PetscErrorCode MFNGetFN(MFN,FN*);
+SLEPC_EXTERN PetscErrorCode MFNSetTolerances(MFN,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode MFNGetTolerances(MFN,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode MFNSetDimensions(MFN,PetscInt);
+SLEPC_EXTERN PetscErrorCode MFNGetDimensions(MFN,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode MFNMonitor(MFN,PetscInt,PetscReal);
+SLEPC_EXTERN PetscErrorCode MFNMonitorSet(MFN,PetscErrorCode (*)(MFN,PetscInt,PetscReal,void*),void*,PetscErrorCode (*)(void**));
+SLEPC_EXTERN PetscErrorCode MFNMonitorSetFromOptions(MFN,const char*,const char*,const char*,PetscErrorCode (*)(MFN,PetscInt,PetscReal,PetscViewerAndFormat*));
+SLEPC_EXTERN PetscErrorCode MFNMonitorCancel(MFN);
+SLEPC_EXTERN PetscErrorCode MFNGetMonitorContext(MFN,void **);
+SLEPC_EXTERN PetscErrorCode MFNGetIterationNumber(MFN,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode MFNSetErrorIfNotConverged(MFN,PetscBool);
+SLEPC_EXTERN PetscErrorCode MFNGetErrorIfNotConverged(MFN,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode MFNMonitorDefault(MFN,PetscInt,PetscReal,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode MFNMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
+SLEPC_EXTERN PetscErrorCode MFNMonitorLG(MFN,PetscInt,PetscReal,void*);
+
+SLEPC_EXTERN PetscErrorCode MFNSetOptionsPrefix(MFN,const char*);
+SLEPC_EXTERN PetscErrorCode MFNAppendOptionsPrefix(MFN,const char*);
+SLEPC_EXTERN PetscErrorCode MFNGetOptionsPrefix(MFN,const char*[]);
 
 /*E
     MFNConvergedReason - reason a matrix function iteration was said to
@@ -98,14 +98,14 @@ typedef enum {/* converged */
               MFN_DIVERGED_ITS                 = -1,
               MFN_DIVERGED_BREAKDOWN           = -2,
               MFN_CONVERGED_ITERATING          =  0} MFNConvergedReason;
-PETSC_EXTERN const char *const*MFNConvergedReasons;
+SLEPC_EXTERN const char *const*MFNConvergedReasons;
 
-PETSC_EXTERN PetscErrorCode MFNGetConvergedReason(MFN,MFNConvergedReason *);
+SLEPC_EXTERN PetscErrorCode MFNGetConvergedReason(MFN,MFNConvergedReason *);
 
-PETSC_EXTERN PetscFunctionList MFNList;
-PETSC_EXTERN PetscErrorCode MFNRegister(const char[],PetscErrorCode(*)(MFN));
+SLEPC_EXTERN PetscFunctionList MFNList;
+SLEPC_EXTERN PetscErrorCode MFNRegister(const char[],PetscErrorCode(*)(MFN));
 
-PETSC_EXTERN PetscErrorCode MFNAllocateSolution(MFN,PetscInt);
+SLEPC_EXTERN PetscErrorCode MFNAllocateSolution(MFN,PetscInt);
 
 #endif
 
diff --git a/include/slepcnep.h b/include/slepcnep.h
index eec755441..aa6cd7691 100644
--- a/include/slepcnep.h
+++ b/include/slepcnep.h
@@ -17,7 +17,7 @@
 #include <slepcpep.h>
 #include <slepcfn.h>
 
-PETSC_EXTERN PetscErrorCode NEPInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode NEPInitializePackage(void);
 
 /*S
      NEP - Abstract SLEPc object that manages all solvers for
@@ -45,7 +45,7 @@ typedef const char* NEPType;
 #define NEPNLEIGS    "nleigs"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId NEP_CLASSID;
+SLEPC_EXTERN PetscClassId NEP_CLASSID;
 
 /*E
     NEPProblemType - Determines the type of the nonlinear eigenproblem
@@ -87,7 +87,7 @@ E*/
 typedef enum { NEP_ERROR_ABSOLUTE,
                NEP_ERROR_RELATIVE,
                NEP_ERROR_BACKWARD } NEPErrorType;
-PETSC_EXTERN const char *NEPErrorTypes[];
+SLEPC_EXTERN const char *NEPErrorTypes[];
 
 /*E
     NEPRefine - The refinement type
@@ -99,7 +99,7 @@ E*/
 typedef enum { NEP_REFINE_NONE,
                NEP_REFINE_SIMPLE,
                NEP_REFINE_MULTIPLE } NEPRefine;
-PETSC_EXTERN const char *NEPRefineTypes[];
+SLEPC_EXTERN const char *NEPRefineTypes[];
 
 /*E
     NEPRefineScheme - The scheme used for solving linear systems during iterative refinement
@@ -111,7 +111,7 @@ E*/
 typedef enum { NEP_REFINE_SCHEME_SCHUR=1,
                NEP_REFINE_SCHEME_MBE,
                NEP_REFINE_SCHEME_EXPLICIT } NEPRefineScheme;
-PETSC_EXTERN const char *NEPRefineSchemes[];
+SLEPC_EXTERN const char *NEPRefineSchemes[];
 
 /*E
     NEPConv - Determines the convergence test
@@ -152,139 +152,139 @@ typedef enum {/* converged */
                     /* unused                  = -3 */
               NEP_DIVERGED_LINEAR_SOLVE        = -4,
               NEP_CONVERGED_ITERATING          =  0} NEPConvergedReason;
-PETSC_EXTERN const char *const*NEPConvergedReasons;
-
-PETSC_EXTERN PetscErrorCode NEPCreate(MPI_Comm,NEP*);
-PETSC_EXTERN PetscErrorCode NEPDestroy(NEP*);
-PETSC_EXTERN PetscErrorCode NEPReset(NEP);
-PETSC_EXTERN PetscErrorCode NEPSetType(NEP,NEPType);
-PETSC_EXTERN PetscErrorCode NEPGetType(NEP,NEPType*);
-PETSC_EXTERN PetscErrorCode NEPSetProblemType(NEP,NEPProblemType);
-PETSC_EXTERN PetscErrorCode NEPGetProblemType(NEP,NEPProblemType*);
-PETSC_EXTERN PetscErrorCode NEPSetTarget(NEP,PetscScalar);
-PETSC_EXTERN PetscErrorCode NEPGetTarget(NEP,PetscScalar*);
-PETSC_EXTERN PetscErrorCode NEPSetFromOptions(NEP);
-PETSC_EXTERN PetscErrorCode NEPSetUp(NEP);
-PETSC_EXTERN PetscErrorCode NEPSolve(NEP);
-PETSC_EXTERN PetscErrorCode NEPView(NEP,PetscViewer);
+SLEPC_EXTERN const char *const*NEPConvergedReasons;
+
+SLEPC_EXTERN PetscErrorCode NEPCreate(MPI_Comm,NEP*);
+SLEPC_EXTERN PetscErrorCode NEPDestroy(NEP*);
+SLEPC_EXTERN PetscErrorCode NEPReset(NEP);
+SLEPC_EXTERN PetscErrorCode NEPSetType(NEP,NEPType);
+SLEPC_EXTERN PetscErrorCode NEPGetType(NEP,NEPType*);
+SLEPC_EXTERN PetscErrorCode NEPSetProblemType(NEP,NEPProblemType);
+SLEPC_EXTERN PetscErrorCode NEPGetProblemType(NEP,NEPProblemType*);
+SLEPC_EXTERN PetscErrorCode NEPSetTarget(NEP,PetscScalar);
+SLEPC_EXTERN PetscErrorCode NEPGetTarget(NEP,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode NEPSetFromOptions(NEP);
+SLEPC_EXTERN PetscErrorCode NEPSetUp(NEP);
+SLEPC_EXTERN PetscErrorCode NEPSolve(NEP);
+SLEPC_EXTERN PetscErrorCode NEPView(NEP,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode NEPViewFromOptions(NEP nep,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)nep,obj,name);}
-PETSC_EXTERN PetscErrorCode NEPErrorView(NEP,NEPErrorType,PetscViewer);
-PETSC_EXTERN PetscErrorCode NEPErrorViewFromOptions(NEP);
-PETSC_EXTERN PetscErrorCode NEPReasonView(NEP,PetscViewer);
-PETSC_EXTERN PetscErrorCode NEPReasonViewFromOptions(NEP);
-PETSC_EXTERN PetscErrorCode NEPValuesView(NEP,PetscViewer);
-PETSC_EXTERN PetscErrorCode NEPValuesViewFromOptions(NEP);
-PETSC_EXTERN PetscErrorCode NEPVectorsView(NEP,PetscViewer);
-PETSC_EXTERN PetscErrorCode NEPVectorsViewFromOptions(NEP);
-
-PETSC_EXTERN PetscErrorCode NEPSetFunction(NEP,Mat,Mat,PetscErrorCode (*)(NEP,PetscScalar,Mat,Mat,void*),void*);
-PETSC_EXTERN PetscErrorCode NEPGetFunction(NEP,Mat*,Mat*,PetscErrorCode (**)(NEP,PetscScalar,Mat,Mat,void*),void**);
-PETSC_EXTERN PetscErrorCode NEPSetJacobian(NEP,Mat,PetscErrorCode (*)(NEP,PetscScalar,Mat,void*),void*);
-PETSC_EXTERN PetscErrorCode NEPGetJacobian(NEP,Mat*,PetscErrorCode (**)(NEP,PetscScalar,Mat,void*),void**);
-PETSC_EXTERN PetscErrorCode NEPSetDerivatives(NEP,Mat,PetscErrorCode (*)(NEP,PetscScalar,PetscInt,Mat,void*),void*);
-PETSC_EXTERN PetscErrorCode NEPGetDerivatives(NEP,Mat*,PetscErrorCode (**)(NEP,PetscScalar,PetscInt,Mat,void*),void**);
-PETSC_EXTERN PetscErrorCode NEPSetSplitOperator(NEP,PetscInt,Mat*,FN*,MatStructure);
-PETSC_EXTERN PetscErrorCode NEPGetSplitOperatorTerm(NEP,PetscInt,Mat*,FN*);
-PETSC_EXTERN PetscErrorCode NEPGetSplitOperatorInfo(NEP,PetscInt*,MatStructure*);
-
-PETSC_EXTERN PetscErrorCode NEPSetBV(NEP,BV);
-PETSC_EXTERN PetscErrorCode NEPGetBV(NEP,BV*);
-PETSC_EXTERN PetscErrorCode NEPSetRG(NEP,RG);
-PETSC_EXTERN PetscErrorCode NEPGetRG(NEP,RG*);
-PETSC_EXTERN PetscErrorCode NEPSetDS(NEP,DS);
-PETSC_EXTERN PetscErrorCode NEPGetDS(NEP,DS*);
-PETSC_EXTERN PetscErrorCode NEPRefineGetKSP(NEP,KSP*);
-PETSC_EXTERN PetscErrorCode NEPSetTolerances(NEP,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPGetTolerances(NEP,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPSetConvergenceTestFunction(NEP,PetscErrorCode (*)(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode NEPSetConvergenceTest(NEP,NEPConv);
-PETSC_EXTERN PetscErrorCode NEPGetConvergenceTest(NEP,NEPConv*);
-PETSC_EXTERN PetscErrorCode NEPConvergedAbsolute(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode NEPConvergedRelative(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode NEPConvergedNorm(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode NEPSetStoppingTestFunction(NEP,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscInt,PetscInt,NEPConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode NEPSetStoppingTest(NEP,NEPStop);
-PETSC_EXTERN PetscErrorCode NEPGetStoppingTest(NEP,NEPStop*);
-PETSC_EXTERN PetscErrorCode NEPStoppingBasic(NEP,PetscInt,PetscInt,PetscInt,PetscInt,NEPConvergedReason*,void*);
-PETSC_EXTERN PetscErrorCode NEPSetDimensions(NEP,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPGetDimensions(NEP,PetscInt*,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPSetRefine(NEP,NEPRefine,PetscInt,PetscReal,PetscInt,NEPRefineScheme);
-PETSC_EXTERN PetscErrorCode NEPGetRefine(NEP,NEPRefine*,PetscInt*,PetscReal*,PetscInt*,NEPRefineScheme*);
-
-PETSC_EXTERN PetscErrorCode NEPGetConverged(NEP,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPGetEigenpair(NEP,PetscInt,PetscScalar*,PetscScalar*,Vec,Vec);
-
-PETSC_EXTERN PetscErrorCode NEPComputeError(NEP,PetscInt,NEPErrorType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode NEPErrorView(NEP,NEPErrorType,PetscViewer);
+SLEPC_EXTERN PetscErrorCode NEPErrorViewFromOptions(NEP);
+SLEPC_EXTERN PetscErrorCode NEPReasonView(NEP,PetscViewer);
+SLEPC_EXTERN PetscErrorCode NEPReasonViewFromOptions(NEP);
+SLEPC_EXTERN PetscErrorCode NEPValuesView(NEP,PetscViewer);
+SLEPC_EXTERN PetscErrorCode NEPValuesViewFromOptions(NEP);
+SLEPC_EXTERN PetscErrorCode NEPVectorsView(NEP,PetscViewer);
+SLEPC_EXTERN PetscErrorCode NEPVectorsViewFromOptions(NEP);
+
+SLEPC_EXTERN PetscErrorCode NEPSetFunction(NEP,Mat,Mat,PetscErrorCode (*)(NEP,PetscScalar,Mat,Mat,void*),void*);
+SLEPC_EXTERN PetscErrorCode NEPGetFunction(NEP,Mat*,Mat*,PetscErrorCode (**)(NEP,PetscScalar,Mat,Mat,void*),void**);
+SLEPC_EXTERN PetscErrorCode NEPSetJacobian(NEP,Mat,PetscErrorCode (*)(NEP,PetscScalar,Mat,void*),void*);
+SLEPC_EXTERN PetscErrorCode NEPGetJacobian(NEP,Mat*,PetscErrorCode (**)(NEP,PetscScalar,Mat,void*),void**);
+SLEPC_EXTERN PetscErrorCode NEPSetDerivatives(NEP,Mat,PetscErrorCode (*)(NEP,PetscScalar,PetscInt,Mat,void*),void*);
+SLEPC_EXTERN PetscErrorCode NEPGetDerivatives(NEP,Mat*,PetscErrorCode (**)(NEP,PetscScalar,PetscInt,Mat,void*),void**);
+SLEPC_EXTERN PetscErrorCode NEPSetSplitOperator(NEP,PetscInt,Mat*,FN*,MatStructure);
+SLEPC_EXTERN PetscErrorCode NEPGetSplitOperatorTerm(NEP,PetscInt,Mat*,FN*);
+SLEPC_EXTERN PetscErrorCode NEPGetSplitOperatorInfo(NEP,PetscInt*,MatStructure*);
+
+SLEPC_EXTERN PetscErrorCode NEPSetBV(NEP,BV);
+SLEPC_EXTERN PetscErrorCode NEPGetBV(NEP,BV*);
+SLEPC_EXTERN PetscErrorCode NEPSetRG(NEP,RG);
+SLEPC_EXTERN PetscErrorCode NEPGetRG(NEP,RG*);
+SLEPC_EXTERN PetscErrorCode NEPSetDS(NEP,DS);
+SLEPC_EXTERN PetscErrorCode NEPGetDS(NEP,DS*);
+SLEPC_EXTERN PetscErrorCode NEPRefineGetKSP(NEP,KSP*);
+SLEPC_EXTERN PetscErrorCode NEPSetTolerances(NEP,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPGetTolerances(NEP,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPSetConvergenceTestFunction(NEP,PetscErrorCode (*)(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode NEPSetConvergenceTest(NEP,NEPConv);
+SLEPC_EXTERN PetscErrorCode NEPGetConvergenceTest(NEP,NEPConv*);
+SLEPC_EXTERN PetscErrorCode NEPConvergedAbsolute(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode NEPConvergedRelative(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode NEPConvergedNorm(NEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode NEPSetStoppingTestFunction(NEP,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscInt,PetscInt,NEPConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode NEPSetStoppingTest(NEP,NEPStop);
+SLEPC_EXTERN PetscErrorCode NEPGetStoppingTest(NEP,NEPStop*);
+SLEPC_EXTERN PetscErrorCode NEPStoppingBasic(NEP,PetscInt,PetscInt,PetscInt,PetscInt,NEPConvergedReason*,void*);
+SLEPC_EXTERN PetscErrorCode NEPSetDimensions(NEP,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPGetDimensions(NEP,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPSetRefine(NEP,NEPRefine,PetscInt,PetscReal,PetscInt,NEPRefineScheme);
+SLEPC_EXTERN PetscErrorCode NEPGetRefine(NEP,NEPRefine*,PetscInt*,PetscReal*,PetscInt*,NEPRefineScheme*);
+
+SLEPC_EXTERN PetscErrorCode NEPGetConverged(NEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPGetEigenpair(NEP,PetscInt,PetscScalar*,PetscScalar*,Vec,Vec);
+
+SLEPC_EXTERN PetscErrorCode NEPComputeError(NEP,PetscInt,NEPErrorType,PetscReal*);
 PETSC_DEPRECATED("Use NEPComputeError()") PETSC_STATIC_INLINE PetscErrorCode NEPComputeRelativeError(NEP nep,PetscInt i,PetscReal *r) {return NEPComputeError(nep,i,NEP_ERROR_RELATIVE,r);}
 PETSC_DEPRECATED("Use NEPComputeError() with NEP_ERROR_ABSOLUTE") PETSC_STATIC_INLINE PetscErrorCode NEPComputeResidualNorm(NEP nep,PetscInt i,PetscReal *r) {return NEPComputeError(nep,i,NEP_ERROR_ABSOLUTE,r);}
-PETSC_EXTERN PetscErrorCode NEPGetErrorEstimate(NEP,PetscInt,PetscReal*);
+SLEPC_EXTERN PetscErrorCode NEPGetErrorEstimate(NEP,PetscInt,PetscReal*);
 
-PETSC_EXTERN PetscErrorCode NEPComputeFunction(NEP,PetscScalar,Mat,Mat);
-PETSC_EXTERN PetscErrorCode NEPComputeJacobian(NEP,PetscScalar,Mat);
-PETSC_EXTERN PetscErrorCode NEPApplyFunction(NEP,PetscScalar,Vec,Vec,Vec,Mat,Mat);
-PETSC_EXTERN PetscErrorCode NEPApplyJacobian(NEP,PetscScalar,Vec,Vec,Vec,Mat);
-PETSC_EXTERN PetscErrorCode NEPProjectOperator(NEP,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPComputeFunction(NEP,PetscScalar,Mat,Mat);
+SLEPC_EXTERN PetscErrorCode NEPComputeJacobian(NEP,PetscScalar,Mat);
+SLEPC_EXTERN PetscErrorCode NEPApplyFunction(NEP,PetscScalar,Vec,Vec,Vec,Mat,Mat);
+SLEPC_EXTERN PetscErrorCode NEPApplyJacobian(NEP,PetscScalar,Vec,Vec,Vec,Mat);
+SLEPC_EXTERN PetscErrorCode NEPProjectOperator(NEP,PetscInt,PetscInt);
 
-PETSC_EXTERN PetscErrorCode NEPMonitor(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPMonitorSet(NEP,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
-PETSC_EXTERN PetscErrorCode NEPMonitorSetFromOptions(NEP,const char*,const char*,const char*,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
-PETSC_EXTERN PetscErrorCode NEPConvMonitorSetFromOptions(NEP,const char*,const char*,const char*,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor));
-PETSC_EXTERN PetscErrorCode NEPMonitorCancel(NEP);
-PETSC_EXTERN PetscErrorCode NEPGetMonitorContext(NEP,void **);
-PETSC_EXTERN PetscErrorCode NEPGetIterationNumber(NEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPMonitor(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPMonitorSet(NEP,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
+SLEPC_EXTERN PetscErrorCode NEPMonitorSetFromOptions(NEP,const char*,const char*,const char*,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
+SLEPC_EXTERN PetscErrorCode NEPConvMonitorSetFromOptions(NEP,const char*,const char*,const char*,PetscErrorCode (*)(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor));
+SLEPC_EXTERN PetscErrorCode NEPMonitorCancel(NEP);
+SLEPC_EXTERN PetscErrorCode NEPGetMonitorContext(NEP,void **);
+SLEPC_EXTERN PetscErrorCode NEPGetIterationNumber(NEP,PetscInt*);
 
-PETSC_EXTERN PetscErrorCode NEPSetInitialSpace(NEP,PetscInt,Vec*);
-PETSC_EXTERN PetscErrorCode NEPSetWhichEigenpairs(NEP,NEPWhich);
-PETSC_EXTERN PetscErrorCode NEPGetWhichEigenpairs(NEP,NEPWhich*);
-PETSC_EXTERN PetscErrorCode NEPSetEigenvalueComparison(NEP,PetscErrorCode (*func)(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*),void*);
+SLEPC_EXTERN PetscErrorCode NEPSetInitialSpace(NEP,PetscInt,Vec*);
+SLEPC_EXTERN PetscErrorCode NEPSetWhichEigenpairs(NEP,NEPWhich);
+SLEPC_EXTERN PetscErrorCode NEPGetWhichEigenpairs(NEP,NEPWhich*);
+SLEPC_EXTERN PetscErrorCode NEPSetEigenvalueComparison(NEP,PetscErrorCode (*func)(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*),void*);
 
-PETSC_EXTERN PetscErrorCode NEPMonitorAll(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode NEPMonitorFirst(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode NEPMonitorConverged(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor);
-PETSC_EXTERN PetscErrorCode NEPMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
-PETSC_EXTERN PetscErrorCode NEPMonitorLG(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
-PETSC_EXTERN PetscErrorCode NEPMonitorLGAll(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
+SLEPC_EXTERN PetscErrorCode NEPMonitorAll(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode NEPMonitorFirst(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode NEPMonitorConverged(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor);
+SLEPC_EXTERN PetscErrorCode NEPMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
+SLEPC_EXTERN PetscErrorCode NEPMonitorLG(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
+SLEPC_EXTERN PetscErrorCode NEPMonitorLGAll(NEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
 
-PETSC_EXTERN PetscErrorCode NEPSetTrackAll(NEP,PetscBool);
-PETSC_EXTERN PetscErrorCode NEPGetTrackAll(NEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode NEPSetTrackAll(NEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode NEPGetTrackAll(NEP,PetscBool*);
 
-PETSC_EXTERN PetscErrorCode NEPSetOptionsPrefix(NEP,const char*);
-PETSC_EXTERN PetscErrorCode NEPAppendOptionsPrefix(NEP,const char*);
-PETSC_EXTERN PetscErrorCode NEPGetOptionsPrefix(NEP,const char*[]);
+SLEPC_EXTERN PetscErrorCode NEPSetOptionsPrefix(NEP,const char*);
+SLEPC_EXTERN PetscErrorCode NEPAppendOptionsPrefix(NEP,const char*);
+SLEPC_EXTERN PetscErrorCode NEPGetOptionsPrefix(NEP,const char*[]);
 
-PETSC_EXTERN PetscErrorCode NEPGetConvergedReason(NEP,NEPConvergedReason *);
+SLEPC_EXTERN PetscErrorCode NEPGetConvergedReason(NEP,NEPConvergedReason *);
 
-PETSC_EXTERN PetscFunctionList NEPList;
-PETSC_EXTERN PetscErrorCode NEPRegister(const char[],PetscErrorCode(*)(NEP));
+SLEPC_EXTERN PetscFunctionList NEPList;
+SLEPC_EXTERN PetscErrorCode NEPRegister(const char[],PetscErrorCode(*)(NEP));
 
-PETSC_EXTERN PetscErrorCode NEPSetWorkVecs(NEP,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPAllocateSolution(NEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPSetWorkVecs(NEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPAllocateSolution(NEP,PetscInt);
 
 /* --------- options specific to particular eigensolvers -------- */
 
-PETSC_EXTERN PetscErrorCode NEPRIISetMaximumIterations(NEP,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPRIIGetMaximumIterations(NEP,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPRIISetLagPreconditioner(NEP,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPRIIGetLagPreconditioner(NEP,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPRIISetConstCorrectionTol(NEP,PetscBool);
-PETSC_EXTERN PetscErrorCode NEPRIIGetConstCorrectionTol(NEP,PetscBool*);
-PETSC_EXTERN PetscErrorCode NEPRIISetKSP(NEP,KSP);
-PETSC_EXTERN PetscErrorCode NEPRIIGetKSP(NEP,KSP*);
+SLEPC_EXTERN PetscErrorCode NEPRIISetMaximumIterations(NEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPRIIGetMaximumIterations(NEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPRIISetLagPreconditioner(NEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPRIIGetLagPreconditioner(NEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPRIISetConstCorrectionTol(NEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode NEPRIIGetConstCorrectionTol(NEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode NEPRIISetKSP(NEP,KSP);
+SLEPC_EXTERN PetscErrorCode NEPRIIGetKSP(NEP,KSP*);
 
-PETSC_EXTERN PetscErrorCode NEPSLPSetEPS(NEP,EPS);
-PETSC_EXTERN PetscErrorCode NEPSLPGetEPS(NEP,EPS*);
+SLEPC_EXTERN PetscErrorCode NEPSLPSetEPS(NEP,EPS);
+SLEPC_EXTERN PetscErrorCode NEPSLPGetEPS(NEP,EPS*);
 
-PETSC_EXTERN PetscErrorCode NEPNArnoldiSetKSP(NEP,KSP);
-PETSC_EXTERN PetscErrorCode NEPNArnoldiGetKSP(NEP,KSP*);
+SLEPC_EXTERN PetscErrorCode NEPNArnoldiSetKSP(NEP,KSP);
+SLEPC_EXTERN PetscErrorCode NEPNArnoldiGetKSP(NEP,KSP*);
 
 #if defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN PetscErrorCode NEPCISSSetSizes(NEP,PetscInt,PetscInt,PetscInt,PetscInt,PetscInt,PetscBool);
-PETSC_EXTERN PetscErrorCode NEPCISSGetSizes(NEP,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscBool*);
-PETSC_EXTERN PetscErrorCode NEPCISSSetThreshold(NEP,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode NEPCISSGetThreshold(NEP,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode NEPCISSSetRefinement(NEP,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPCISSGetRefinement(NEP,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPCISSGetKSPs(NEP,PetscInt*,KSP**);
+SLEPC_EXTERN PetscErrorCode NEPCISSSetSizes(NEP,PetscInt,PetscInt,PetscInt,PetscInt,PetscInt,PetscBool);
+SLEPC_EXTERN PetscErrorCode NEPCISSGetSizes(NEP,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscInt*,PetscBool*);
+SLEPC_EXTERN PetscErrorCode NEPCISSSetThreshold(NEP,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode NEPCISSGetThreshold(NEP,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode NEPCISSSetRefinement(NEP,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPCISSGetRefinement(NEP,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPCISSGetKSPs(NEP,PetscInt*,KSP**);
 #else
 #define SlepcNEPCISSUnavailable(nep) do { \
     PetscFunctionBegin; \
@@ -300,22 +300,22 @@ PETSC_STATIC_INLINE PetscErrorCode NEPCISSGetKSPs(NEP nep,PETSC_UNUSED PetscInt
 #undef SlepcNEPCISSUnavailable
 #endif
 
-PETSC_EXTERN PetscErrorCode NEPInterpolSetPEP(NEP,PEP);
-PETSC_EXTERN PetscErrorCode NEPInterpolGetPEP(NEP,PEP*);
-PETSC_EXTERN PetscErrorCode NEPInterpolSetInterpolation(NEP,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPInterpolGetInterpolation(NEP,PetscReal*,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode NEPNLEIGSSetSingularitiesFunction(NEP,PetscErrorCode (*)(NEP,PetscInt*,PetscScalar*,void*),void*);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSGetSingularitiesFunction(NEP,PetscErrorCode (**)(NEP,PetscInt*,PetscScalar*,void*),void **);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSSetRestart(NEP,PetscReal);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSGetRestart(NEP,PetscReal*);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSSetLocking(NEP,PetscBool);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSGetLocking(NEP,PetscBool*);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSSetInterpolation(NEP,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSGetInterpolation(NEP,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSSetRKShifts(NEP,PetscInt,PetscScalar*);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSGetRKShifts(NEP,PetscInt*,PetscScalar**);
-PETSC_EXTERN PetscErrorCode NEPNLEIGSGetKSPs(NEP,PetscInt*,KSP**);
+SLEPC_EXTERN PetscErrorCode NEPInterpolSetPEP(NEP,PEP);
+SLEPC_EXTERN PetscErrorCode NEPInterpolGetPEP(NEP,PEP*);
+SLEPC_EXTERN PetscErrorCode NEPInterpolSetInterpolation(NEP,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPInterpolGetInterpolation(NEP,PetscReal*,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSSetSingularitiesFunction(NEP,PetscErrorCode (*)(NEP,PetscInt*,PetscScalar*,void*),void*);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSGetSingularitiesFunction(NEP,PetscErrorCode (**)(NEP,PetscInt*,PetscScalar*,void*),void **);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSSetRestart(NEP,PetscReal);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSGetRestart(NEP,PetscReal*);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSSetLocking(NEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSGetLocking(NEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSSetInterpolation(NEP,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSGetInterpolation(NEP,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSSetRKShifts(NEP,PetscInt,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSGetRKShifts(NEP,PetscInt*,PetscScalar**);
+SLEPC_EXTERN PetscErrorCode NEPNLEIGSGetKSPs(NEP,PetscInt*,KSP**);
 
 #endif
 
diff --git a/include/slepcpep.h b/include/slepcpep.h
index b8e2bc8d2..4725cff4c 100644
--- a/include/slepcpep.h
+++ b/include/slepcpep.h
@@ -15,7 +15,7 @@
 #define __SLEPCPEP_H
 #include <slepceps.h>
 
-PETSC_EXTERN PetscErrorCode PEPInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode PEPInitializePackage(void);
 
 /*S
      PEP - Abstract SLEPc object that manages all the polynomial eigenvalue
@@ -42,7 +42,7 @@ typedef const char* PEPType;
 #define PEPJD        "jd"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId PEP_CLASSID;
+SLEPC_EXTERN PetscClassId PEP_CLASSID;
 
 /*E
     PEPProblemType - Determines the type of the polynomial eigenproblem
@@ -90,7 +90,7 @@ typedef enum { PEP_BASIS_MONOMIAL,
                PEP_BASIS_LEGENDRE,
                PEP_BASIS_LAGUERRE,
                PEP_BASIS_HERMITE } PEPBasis;
-PETSC_EXTERN const char *PEPBasisTypes[];
+SLEPC_EXTERN const char *PEPBasisTypes[];
 
 /*E
     PEPScale - The scaling strategy
@@ -103,7 +103,7 @@ typedef enum { PEP_SCALE_NONE,
                PEP_SCALE_SCALAR,
                PEP_SCALE_DIAGONAL,
                PEP_SCALE_BOTH } PEPScale;
-PETSC_EXTERN const char *PEPScaleTypes[];
+SLEPC_EXTERN const char *PEPScaleTypes[];
 
 /*E
     PEPRefine - The refinement type
@@ -115,7 +115,7 @@ E*/
 typedef enum { PEP_REFINE_NONE,
                PEP_REFINE_SIMPLE,
                PEP_REFINE_MULTIPLE } PEPRefine;
-PETSC_EXTERN const char *PEPRefineTypes[];
+SLEPC_EXTERN const char *PEPRefineTypes[];
 
 /*E
     PEPRefineScheme - The scheme used for solving linear systems during iterative refinement
@@ -127,7 +127,7 @@ E*/
 typedef enum { PEP_REFINE_SCHEME_SCHUR=1,
                PEP_REFINE_SCHEME_MBE,
                PEP_REFINE_SCHEME_EXPLICIT } PEPRefineScheme;
-PETSC_EXTERN const char *PEPRefineSchemes[];
+SLEPC_EXTERN const char *PEPRefineSchemes[];
 
 /*E
     PEPExtract - The extraction type
@@ -140,7 +140,7 @@ typedef enum { PEP_EXTRACT_NONE=1,
                PEP_EXTRACT_NORM,
                PEP_EXTRACT_RESIDUAL,
                PEP_EXTRACT_STRUCTURED } PEPExtract;
-PETSC_EXTERN const char *PEPExtractTypes[];
+SLEPC_EXTERN const char *PEPExtractTypes[];
 
 /*E
     PEPErrorType - The error type used to assess accuracy of computed solutions
@@ -152,7 +152,7 @@ E*/
 typedef enum { PEP_ERROR_ABSOLUTE,
                PEP_ERROR_RELATIVE,
                PEP_ERROR_BACKWARD } PEPErrorType;
-PETSC_EXTERN const char *PEPErrorTypes[];
+SLEPC_EXTERN const char *PEPErrorTypes[];
 
 /*E
     PEPConv - Determines the convergence test
@@ -192,142 +192,142 @@ typedef enum {/* converged */
               PEP_DIVERGED_BREAKDOWN           = -2,
               PEP_DIVERGED_SYMMETRY_LOST       = -3,
               PEP_CONVERGED_ITERATING          =  0} PEPConvergedReason;
-PETSC_EXTERN const char *const*PEPConvergedReasons;
-
-PETSC_EXTERN PetscErrorCode PEPCreate(MPI_Comm,PEP*);
-PETSC_EXTERN PetscErrorCode PEPDestroy(PEP*);
-PETSC_EXTERN PetscErrorCode PEPReset(PEP);
-PETSC_EXTERN PetscErrorCode PEPSetType(PEP,PEPType);
-PETSC_EXTERN PetscErrorCode PEPGetType(PEP,PEPType*);
-PETSC_EXTERN PetscErrorCode PEPSetProblemType(PEP,PEPProblemType);
-PETSC_EXTERN PetscErrorCode PEPGetProblemType(PEP,PEPProblemType*);
-PETSC_EXTERN PetscErrorCode PEPSetOperators(PEP,PetscInt,Mat[]);
-PETSC_EXTERN PetscErrorCode PEPGetOperators(PEP,PetscInt,Mat*);
-PETSC_EXTERN PetscErrorCode PEPGetNumMatrices(PEP,PetscInt*);
-PETSC_EXTERN PetscErrorCode PEPSetTarget(PEP,PetscScalar);
-PETSC_EXTERN PetscErrorCode PEPGetTarget(PEP,PetscScalar*);
-PETSC_EXTERN PetscErrorCode PEPSetInterval(PEP,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode PEPGetInterval(PEP,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode PEPSetFromOptions(PEP);
-PETSC_EXTERN PetscErrorCode PEPSetUp(PEP);
-PETSC_EXTERN PetscErrorCode PEPSolve(PEP);
-PETSC_EXTERN PetscErrorCode PEPView(PEP,PetscViewer);
+SLEPC_EXTERN const char *const*PEPConvergedReasons;
+
+SLEPC_EXTERN PetscErrorCode PEPCreate(MPI_Comm,PEP*);
+SLEPC_EXTERN PetscErrorCode PEPDestroy(PEP*);
+SLEPC_EXTERN PetscErrorCode PEPReset(PEP);
+SLEPC_EXTERN PetscErrorCode PEPSetType(PEP,PEPType);
+SLEPC_EXTERN PetscErrorCode PEPGetType(PEP,PEPType*);
+SLEPC_EXTERN PetscErrorCode PEPSetProblemType(PEP,PEPProblemType);
+SLEPC_EXTERN PetscErrorCode PEPGetProblemType(PEP,PEPProblemType*);
+SLEPC_EXTERN PetscErrorCode PEPSetOperators(PEP,PetscInt,Mat[]);
+SLEPC_EXTERN PetscErrorCode PEPGetOperators(PEP,PetscInt,Mat*);
+SLEPC_EXTERN PetscErrorCode PEPGetNumMatrices(PEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode PEPSetTarget(PEP,PetscScalar);
+SLEPC_EXTERN PetscErrorCode PEPGetTarget(PEP,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode PEPSetInterval(PEP,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode PEPGetInterval(PEP,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPSetFromOptions(PEP);
+SLEPC_EXTERN PetscErrorCode PEPSetUp(PEP);
+SLEPC_EXTERN PetscErrorCode PEPSolve(PEP);
+SLEPC_EXTERN PetscErrorCode PEPView(PEP,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode PEPViewFromOptions(PEP pep,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)pep,obj,name);}
-PETSC_EXTERN PetscErrorCode PEPErrorView(PEP,PEPErrorType,PetscViewer);
+SLEPC_EXTERN PetscErrorCode PEPErrorView(PEP,PEPErrorType,PetscViewer);
 PETSC_DEPRECATED("Use PEPErrorView()") PETSC_STATIC_INLINE PetscErrorCode PEPPrintSolution(PEP pep,PetscViewer v) {return PEPErrorView(pep,PEP_ERROR_BACKWARD,v);}
-PETSC_EXTERN PetscErrorCode PEPErrorViewFromOptions(PEP);
-PETSC_EXTERN PetscErrorCode PEPReasonView(PEP,PetscViewer);
-PETSC_EXTERN PetscErrorCode PEPReasonViewFromOptions(PEP);
-PETSC_EXTERN PetscErrorCode PEPValuesView(PEP,PetscViewer);
-PETSC_EXTERN PetscErrorCode PEPValuesViewFromOptions(PEP);
-PETSC_EXTERN PetscErrorCode PEPVectorsView(PEP,PetscViewer);
-PETSC_EXTERN PetscErrorCode PEPVectorsViewFromOptions(PEP);
-PETSC_EXTERN PetscErrorCode PEPSetBV(PEP,BV);
-PETSC_EXTERN PetscErrorCode PEPGetBV(PEP,BV*);
-PETSC_EXTERN PetscErrorCode PEPSetRG(PEP,RG);
-PETSC_EXTERN PetscErrorCode PEPGetRG(PEP,RG*);
-PETSC_EXTERN PetscErrorCode PEPSetDS(PEP,DS);
-PETSC_EXTERN PetscErrorCode PEPGetDS(PEP,DS*);
-PETSC_EXTERN PetscErrorCode PEPSetST(PEP,ST);
-PETSC_EXTERN PetscErrorCode PEPGetST(PEP,ST*);
-PETSC_EXTERN PetscErrorCode PEPRefineGetKSP(PEP,KSP*);
-
-PETSC_EXTERN PetscErrorCode PEPSetTolerances(PEP,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode PEPGetTolerances(PEP,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode PEPSetConvergenceTestFunction(PEP,PetscErrorCode (*)(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode PEPSetConvergenceTest(PEP,PEPConv);
-PETSC_EXTERN PetscErrorCode PEPGetConvergenceTest(PEP,PEPConv*);
-PETSC_EXTERN PetscErrorCode PEPConvergedAbsolute(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode PEPConvergedRelative(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode PEPConvergedNorm(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode PEPSetStoppingTestFunction(PEP,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscInt,PetscInt,PEPConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode PEPSetStoppingTest(PEP,PEPStop);
-PETSC_EXTERN PetscErrorCode PEPGetStoppingTest(PEP,PEPStop*);
-PETSC_EXTERN PetscErrorCode PEPStoppingBasic(PEP,PetscInt,PetscInt,PetscInt,PetscInt,PEPConvergedReason*,void*);
-PETSC_EXTERN PetscErrorCode PEPGetConvergedReason(PEP,PEPConvergedReason *);
-
-PETSC_EXTERN PetscErrorCode PEPSetDimensions(PEP,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode PEPGetDimensions(PEP,PetscInt*,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode PEPSetScale(PEP,PEPScale,PetscReal,Vec,Vec,PetscInt,PetscReal);
-PETSC_EXTERN PetscErrorCode PEPGetScale(PEP,PEPScale*,PetscReal*,Vec*,Vec*,PetscInt*,PetscReal*);
-PETSC_EXTERN PetscErrorCode PEPSetRefine(PEP,PEPRefine,PetscInt,PetscReal,PetscInt,PEPRefineScheme);
-PETSC_EXTERN PetscErrorCode PEPGetRefine(PEP,PEPRefine*,PetscInt*,PetscReal*,PetscInt*,PEPRefineScheme*);
-PETSC_EXTERN PetscErrorCode PEPSetExtract(PEP,PEPExtract);
-PETSC_EXTERN PetscErrorCode PEPGetExtract(PEP,PEPExtract*);
-PETSC_EXTERN PetscErrorCode PEPSetBasis(PEP,PEPBasis);
-PETSC_EXTERN PetscErrorCode PEPGetBasis(PEP,PEPBasis*);
-
-PETSC_EXTERN PetscErrorCode PEPGetConverged(PEP,PetscInt*);
-PETSC_EXTERN PetscErrorCode PEPGetEigenpair(PEP,PetscInt,PetscScalar*,PetscScalar*,Vec,Vec);
-PETSC_EXTERN PetscErrorCode PEPComputeError(PEP,PetscInt,PEPErrorType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPErrorViewFromOptions(PEP);
+SLEPC_EXTERN PetscErrorCode PEPReasonView(PEP,PetscViewer);
+SLEPC_EXTERN PetscErrorCode PEPReasonViewFromOptions(PEP);
+SLEPC_EXTERN PetscErrorCode PEPValuesView(PEP,PetscViewer);
+SLEPC_EXTERN PetscErrorCode PEPValuesViewFromOptions(PEP);
+SLEPC_EXTERN PetscErrorCode PEPVectorsView(PEP,PetscViewer);
+SLEPC_EXTERN PetscErrorCode PEPVectorsViewFromOptions(PEP);
+SLEPC_EXTERN PetscErrorCode PEPSetBV(PEP,BV);
+SLEPC_EXTERN PetscErrorCode PEPGetBV(PEP,BV*);
+SLEPC_EXTERN PetscErrorCode PEPSetRG(PEP,RG);
+SLEPC_EXTERN PetscErrorCode PEPGetRG(PEP,RG*);
+SLEPC_EXTERN PetscErrorCode PEPSetDS(PEP,DS);
+SLEPC_EXTERN PetscErrorCode PEPGetDS(PEP,DS*);
+SLEPC_EXTERN PetscErrorCode PEPSetST(PEP,ST);
+SLEPC_EXTERN PetscErrorCode PEPGetST(PEP,ST*);
+SLEPC_EXTERN PetscErrorCode PEPRefineGetKSP(PEP,KSP*);
+
+SLEPC_EXTERN PetscErrorCode PEPSetTolerances(PEP,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPGetTolerances(PEP,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode PEPSetConvergenceTestFunction(PEP,PetscErrorCode (*)(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode PEPSetConvergenceTest(PEP,PEPConv);
+SLEPC_EXTERN PetscErrorCode PEPGetConvergenceTest(PEP,PEPConv*);
+SLEPC_EXTERN PetscErrorCode PEPConvergedAbsolute(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode PEPConvergedRelative(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode PEPConvergedNorm(PEP,PetscScalar,PetscScalar,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode PEPSetStoppingTestFunction(PEP,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscInt,PetscInt,PEPConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode PEPSetStoppingTest(PEP,PEPStop);
+SLEPC_EXTERN PetscErrorCode PEPGetStoppingTest(PEP,PEPStop*);
+SLEPC_EXTERN PetscErrorCode PEPStoppingBasic(PEP,PetscInt,PetscInt,PetscInt,PetscInt,PEPConvergedReason*,void*);
+SLEPC_EXTERN PetscErrorCode PEPGetConvergedReason(PEP,PEPConvergedReason *);
+
+SLEPC_EXTERN PetscErrorCode PEPSetDimensions(PEP,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPGetDimensions(PEP,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode PEPSetScale(PEP,PEPScale,PetscReal,Vec,Vec,PetscInt,PetscReal);
+SLEPC_EXTERN PetscErrorCode PEPGetScale(PEP,PEPScale*,PetscReal*,Vec*,Vec*,PetscInt*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPSetRefine(PEP,PEPRefine,PetscInt,PetscReal,PetscInt,PEPRefineScheme);
+SLEPC_EXTERN PetscErrorCode PEPGetRefine(PEP,PEPRefine*,PetscInt*,PetscReal*,PetscInt*,PEPRefineScheme*);
+SLEPC_EXTERN PetscErrorCode PEPSetExtract(PEP,PEPExtract);
+SLEPC_EXTERN PetscErrorCode PEPGetExtract(PEP,PEPExtract*);
+SLEPC_EXTERN PetscErrorCode PEPSetBasis(PEP,PEPBasis);
+SLEPC_EXTERN PetscErrorCode PEPGetBasis(PEP,PEPBasis*);
+
+SLEPC_EXTERN PetscErrorCode PEPGetConverged(PEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode PEPGetEigenpair(PEP,PetscInt,PetscScalar*,PetscScalar*,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode PEPComputeError(PEP,PetscInt,PEPErrorType,PetscReal*);
 PETSC_DEPRECATED("Use PEPComputeError()") PETSC_STATIC_INLINE PetscErrorCode PEPComputeRelativeError(PEP pep,PetscInt i,PetscReal *r) {return PEPComputeError(pep,i,PEP_ERROR_BACKWARD,r);}
 PETSC_DEPRECATED("Use PEPComputeError() with PEP_ERROR_ABSOLUTE") PETSC_STATIC_INLINE PetscErrorCode PEPComputeResidualNorm(PEP pep,PetscInt i,PetscReal *r) {return PEPComputeError(pep,i,PEP_ERROR_ABSOLUTE,r);}
-PETSC_EXTERN PetscErrorCode PEPGetErrorEstimate(PEP,PetscInt,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPGetErrorEstimate(PEP,PetscInt,PetscReal*);
 
-PETSC_EXTERN PetscErrorCode PEPMonitor(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt);
-PETSC_EXTERN PetscErrorCode PEPMonitorSet(PEP,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
-PETSC_EXTERN PetscErrorCode PEPMonitorSetFromOptions(PEP,const char*,const char*,const char*,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
-PETSC_EXTERN PetscErrorCode PEPConvMonitorSetFromOptions(PEP,const char*,const char*,const char*,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor));
-PETSC_EXTERN PetscErrorCode PEPMonitorCancel(PEP);
-PETSC_EXTERN PetscErrorCode PEPGetMonitorContext(PEP,void **);
-PETSC_EXTERN PetscErrorCode PEPGetIterationNumber(PEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode PEPMonitor(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPMonitorSet(PEP,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
+SLEPC_EXTERN PetscErrorCode PEPMonitorSetFromOptions(PEP,const char*,const char*,const char*,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPConvMonitorSetFromOptions(PEP,const char*,const char*,const char*,PetscErrorCode (*)(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor));
+SLEPC_EXTERN PetscErrorCode PEPMonitorCancel(PEP);
+SLEPC_EXTERN PetscErrorCode PEPGetMonitorContext(PEP,void **);
+SLEPC_EXTERN PetscErrorCode PEPGetIterationNumber(PEP,PetscInt*);
 
-PETSC_EXTERN PetscErrorCode PEPSetInitialSpace(PEP,PetscInt,Vec*);
-PETSC_EXTERN PetscErrorCode PEPSetWhichEigenpairs(PEP,PEPWhich);
-PETSC_EXTERN PetscErrorCode PEPGetWhichEigenpairs(PEP,PEPWhich*);
-PETSC_EXTERN PetscErrorCode PEPSetEigenvalueComparison(PEP,PetscErrorCode (*func)(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*),void*);
+SLEPC_EXTERN PetscErrorCode PEPSetInitialSpace(PEP,PetscInt,Vec*);
+SLEPC_EXTERN PetscErrorCode PEPSetWhichEigenpairs(PEP,PEPWhich);
+SLEPC_EXTERN PetscErrorCode PEPGetWhichEigenpairs(PEP,PEPWhich*);
+SLEPC_EXTERN PetscErrorCode PEPSetEigenvalueComparison(PEP,PetscErrorCode (*func)(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*),void*);
 
-PETSC_EXTERN PetscErrorCode PEPMonitorAll(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode PEPMonitorFirst(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode PEPMonitorConverged(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor);
-PETSC_EXTERN PetscErrorCode PEPMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
-PETSC_EXTERN PetscErrorCode PEPMonitorLG(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
-PETSC_EXTERN PetscErrorCode PEPMonitorLGAll(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
+SLEPC_EXTERN PetscErrorCode PEPMonitorAll(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode PEPMonitorFirst(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode PEPMonitorConverged(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,SlepcConvMonitor);
+SLEPC_EXTERN PetscErrorCode PEPMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
+SLEPC_EXTERN PetscErrorCode PEPMonitorLG(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
+SLEPC_EXTERN PetscErrorCode PEPMonitorLGAll(PEP,PetscInt,PetscInt,PetscScalar*,PetscScalar*,PetscReal*,PetscInt,void*);
 
-PETSC_EXTERN PetscErrorCode PEPSetTrackAll(PEP,PetscBool);
-PETSC_EXTERN PetscErrorCode PEPGetTrackAll(PEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode PEPSetTrackAll(PEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPGetTrackAll(PEP,PetscBool*);
 
-PETSC_EXTERN PetscErrorCode PEPSetOptionsPrefix(PEP,const char*);
-PETSC_EXTERN PetscErrorCode PEPAppendOptionsPrefix(PEP,const char*);
-PETSC_EXTERN PetscErrorCode PEPGetOptionsPrefix(PEP,const char*[]);
+SLEPC_EXTERN PetscErrorCode PEPSetOptionsPrefix(PEP,const char*);
+SLEPC_EXTERN PetscErrorCode PEPAppendOptionsPrefix(PEP,const char*);
+SLEPC_EXTERN PetscErrorCode PEPGetOptionsPrefix(PEP,const char*[]);
 
-PETSC_EXTERN PetscFunctionList PEPList;
-PETSC_EXTERN PetscErrorCode PEPRegister(const char[],PetscErrorCode(*)(PEP));
+SLEPC_EXTERN PetscFunctionList PEPList;
+SLEPC_EXTERN PetscErrorCode PEPRegister(const char[],PetscErrorCode(*)(PEP));
 
-PETSC_EXTERN PetscErrorCode PEPSetWorkVecs(PEP,PetscInt);
-PETSC_EXTERN PetscErrorCode PEPAllocateSolution(PEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPSetWorkVecs(PEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPAllocateSolution(PEP,PetscInt);
 
 /* --------- options specific to particular eigensolvers -------- */
 
-PETSC_EXTERN PetscErrorCode PEPLinearSetCompanionForm(PEP,PetscInt);
-PETSC_EXTERN PetscErrorCode PEPLinearGetCompanionForm(PEP,PetscInt*);
-PETSC_EXTERN PetscErrorCode PEPLinearSetExplicitMatrix(PEP,PetscBool);
-PETSC_EXTERN PetscErrorCode PEPLinearGetExplicitMatrix(PEP,PetscBool*);
-PETSC_EXTERN PetscErrorCode PEPLinearSetEPS(PEP,EPS);
-PETSC_EXTERN PetscErrorCode PEPLinearGetEPS(PEP,EPS*);
-
-PETSC_EXTERN PetscErrorCode PEPQArnoldiSetRestart(PEP,PetscReal);
-PETSC_EXTERN PetscErrorCode PEPQArnoldiGetRestart(PEP,PetscReal*);
-PETSC_EXTERN PetscErrorCode PEPQArnoldiSetLocking(PEP,PetscBool);
-PETSC_EXTERN PetscErrorCode PEPQArnoldiGetLocking(PEP,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode PEPTOARSetRestart(PEP,PetscReal);
-PETSC_EXTERN PetscErrorCode PEPTOARGetRestart(PEP,PetscReal*);
-PETSC_EXTERN PetscErrorCode PEPTOARSetLocking(PEP,PetscBool);
-PETSC_EXTERN PetscErrorCode PEPTOARGetLocking(PEP,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode PEPSTOARSetLocking(PEP,PetscBool);
-PETSC_EXTERN PetscErrorCode PEPSTOARGetLocking(PEP,PetscBool*);
-PETSC_EXTERN PetscErrorCode PEPSTOARSetDetectZeros(PEP,PetscBool);
-PETSC_EXTERN PetscErrorCode PEPSTOARGetDetectZeros(PEP,PetscBool*);
-PETSC_EXTERN PetscErrorCode PEPSTOARGetInertias(PEP,PetscInt*,PetscReal**,PetscInt**);
-PETSC_EXTERN PetscErrorCode PEPSTOARSetDimensions(PEP,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode PEPSTOARGetDimensions(PEP,PetscInt*,PetscInt*,PetscInt*);
-
-PETSC_EXTERN PetscErrorCode PEPJDSetRestart(PEP,PetscReal);
-PETSC_EXTERN PetscErrorCode PEPJDGetRestart(PEP,PetscReal*);
-PETSC_EXTERN PetscErrorCode PEPJDSetFix(PEP,PetscReal);
-PETSC_EXTERN PetscErrorCode PEPJDGetFix(PEP,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPLinearSetCompanionForm(PEP,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPLinearGetCompanionForm(PEP,PetscInt*);
+SLEPC_EXTERN PetscErrorCode PEPLinearSetExplicitMatrix(PEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPLinearGetExplicitMatrix(PEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode PEPLinearSetEPS(PEP,EPS);
+SLEPC_EXTERN PetscErrorCode PEPLinearGetEPS(PEP,EPS*);
+
+SLEPC_EXTERN PetscErrorCode PEPQArnoldiSetRestart(PEP,PetscReal);
+SLEPC_EXTERN PetscErrorCode PEPQArnoldiGetRestart(PEP,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPQArnoldiSetLocking(PEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPQArnoldiGetLocking(PEP,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode PEPTOARSetRestart(PEP,PetscReal);
+SLEPC_EXTERN PetscErrorCode PEPTOARGetRestart(PEP,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPTOARSetLocking(PEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPTOARGetLocking(PEP,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode PEPSTOARSetLocking(PEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPSTOARGetLocking(PEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode PEPSTOARSetDetectZeros(PEP,PetscBool);
+SLEPC_EXTERN PetscErrorCode PEPSTOARGetDetectZeros(PEP,PetscBool*);
+SLEPC_EXTERN PetscErrorCode PEPSTOARGetInertias(PEP,PetscInt*,PetscReal**,PetscInt**);
+SLEPC_EXTERN PetscErrorCode PEPSTOARSetDimensions(PEP,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode PEPSTOARGetDimensions(PEP,PetscInt*,PetscInt*,PetscInt*);
+
+SLEPC_EXTERN PetscErrorCode PEPJDSetRestart(PEP,PetscReal);
+SLEPC_EXTERN PetscErrorCode PEPJDGetRestart(PEP,PetscReal*);
+SLEPC_EXTERN PetscErrorCode PEPJDSetFix(PEP,PetscReal);
+SLEPC_EXTERN PetscErrorCode PEPJDGetFix(PEP,PetscReal*);
 
 #endif
 
diff --git a/include/slepcrg.h b/include/slepcrg.h
index 3249d9b0b..79f32b813 100644
--- a/include/slepcrg.h
+++ b/include/slepcrg.h
@@ -16,7 +16,7 @@
 #include <slepcsys.h>
 #include <slepcrgtypes.h>
 
-PETSC_EXTERN PetscErrorCode RGInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode RGInitializePackage(void);
 
 /*J
    RGType - String with the name of the region.
@@ -32,45 +32,45 @@ typedef const char* RGType;
 #define RGRING      "ring"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId RG_CLASSID;
-
-PETSC_EXTERN PetscErrorCode RGCreate(MPI_Comm,RG*);
-PETSC_EXTERN PetscErrorCode RGSetType(RG,RGType);
-PETSC_EXTERN PetscErrorCode RGGetType(RG,RGType*);
-PETSC_EXTERN PetscErrorCode RGSetOptionsPrefix(RG,const char *);
-PETSC_EXTERN PetscErrorCode RGAppendOptionsPrefix(RG,const char *);
-PETSC_EXTERN PetscErrorCode RGGetOptionsPrefix(RG,const char *[]);
-PETSC_EXTERN PetscErrorCode RGSetFromOptions(RG);
-PETSC_EXTERN PetscErrorCode RGView(RG,PetscViewer);
+SLEPC_EXTERN PetscClassId RG_CLASSID;
+
+SLEPC_EXTERN PetscErrorCode RGCreate(MPI_Comm,RG*);
+SLEPC_EXTERN PetscErrorCode RGSetType(RG,RGType);
+SLEPC_EXTERN PetscErrorCode RGGetType(RG,RGType*);
+SLEPC_EXTERN PetscErrorCode RGSetOptionsPrefix(RG,const char *);
+SLEPC_EXTERN PetscErrorCode RGAppendOptionsPrefix(RG,const char *);
+SLEPC_EXTERN PetscErrorCode RGGetOptionsPrefix(RG,const char *[]);
+SLEPC_EXTERN PetscErrorCode RGSetFromOptions(RG);
+SLEPC_EXTERN PetscErrorCode RGView(RG,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode RGViewFromOptions(RG rg,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)rg,obj,name);}
-PETSC_EXTERN PetscErrorCode RGDestroy(RG*);
-
-PETSC_EXTERN PetscErrorCode RGIsTrivial(RG,PetscBool*);
-PETSC_EXTERN PetscErrorCode RGSetComplement(RG,PetscBool);
-PETSC_EXTERN PetscErrorCode RGGetComplement(RG,PetscBool*);
-PETSC_EXTERN PetscErrorCode RGSetScale(RG,PetscReal);
-PETSC_EXTERN PetscErrorCode RGGetScale(RG,PetscReal*);
-PETSC_EXTERN PetscErrorCode RGPushScale(RG,PetscReal);
-PETSC_EXTERN PetscErrorCode RGPopScale(RG);
-PETSC_EXTERN PetscErrorCode RGCheckInside(RG,PetscInt,PetscScalar*,PetscScalar*,PetscInt*);
-PETSC_EXTERN PetscErrorCode RGComputeContour(RG,PetscInt,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode RGComputeBoundingBox(RG,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
-
-PETSC_EXTERN PetscFunctionList RGList;
-PETSC_EXTERN PetscErrorCode RGRegister(const char[],PetscErrorCode(*)(RG));
+SLEPC_EXTERN PetscErrorCode RGDestroy(RG*);
+
+SLEPC_EXTERN PetscErrorCode RGIsTrivial(RG,PetscBool*);
+SLEPC_EXTERN PetscErrorCode RGSetComplement(RG,PetscBool);
+SLEPC_EXTERN PetscErrorCode RGGetComplement(RG,PetscBool*);
+SLEPC_EXTERN PetscErrorCode RGSetScale(RG,PetscReal);
+SLEPC_EXTERN PetscErrorCode RGGetScale(RG,PetscReal*);
+SLEPC_EXTERN PetscErrorCode RGPushScale(RG,PetscReal);
+SLEPC_EXTERN PetscErrorCode RGPopScale(RG);
+SLEPC_EXTERN PetscErrorCode RGCheckInside(RG,PetscInt,PetscScalar*,PetscScalar*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode RGComputeContour(RG,PetscInt,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode RGComputeBoundingBox(RG,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
+
+SLEPC_EXTERN PetscFunctionList RGList;
+SLEPC_EXTERN PetscErrorCode RGRegister(const char[],PetscErrorCode(*)(RG));
 
 /* --------- options specific to particular regions -------- */
 
-PETSC_EXTERN PetscErrorCode RGEllipseSetParameters(RG,PetscScalar,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode RGEllipseGetParameters(RG,PetscScalar*,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode RGEllipseSetParameters(RG,PetscScalar,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode RGEllipseGetParameters(RG,PetscScalar*,PetscReal*,PetscReal*);
 
-PETSC_EXTERN PetscErrorCode RGIntervalSetEndpoints(RG,PetscReal,PetscReal,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode RGIntervalGetEndpoints(RG,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode RGIntervalSetEndpoints(RG,PetscReal,PetscReal,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode RGIntervalGetEndpoints(RG,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
 
-PETSC_EXTERN PetscErrorCode RGPolygonSetVertices(RG,PetscInt,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode RGPolygonGetVertices(RG,PetscInt*,PetscScalar**,PetscScalar**);
+SLEPC_EXTERN PetscErrorCode RGPolygonSetVertices(RG,PetscInt,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode RGPolygonGetVertices(RG,PetscInt*,PetscScalar**,PetscScalar**);
 
-PETSC_EXTERN PetscErrorCode RGRingSetParameters(RG,PetscScalar,PetscReal,PetscReal,PetscReal,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode RGRingGetParameters(RG,PetscScalar*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode RGRingSetParameters(RG,PetscScalar,PetscReal,PetscReal,PetscReal,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode RGRingGetParameters(RG,PetscScalar*,PetscReal*,PetscReal*,PetscReal*,PetscReal*,PetscReal*);
 
 #endif
diff --git a/include/slepcsc.h b/include/slepcsc.h
index fe7cbf1dc..2f69d0961 100644
--- a/include/slepcsc.h
+++ b/include/slepcsc.h
@@ -15,6 +15,7 @@
 #define __SLEPCSC_H
 
 #include <petscsys.h>
+#include <slepcsys.h>
 #include <slepcrgtypes.h>
 
 /*S
@@ -59,22 +60,22 @@ struct _n_SlepcSC {
 };
 typedef struct _n_SlepcSC* SlepcSC;
 
-PETSC_EXTERN PetscErrorCode SlepcSCCompare(SlepcSC,PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*);
-PETSC_EXTERN PetscErrorCode SlepcSortEigenvalues(SlepcSC,PetscInt n,PetscScalar *eigr,PetscScalar *eigi,PetscInt *perm);
+SLEPC_EXTERN PetscErrorCode SlepcSCCompare(SlepcSC,PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SlepcSortEigenvalues(SlepcSC,PetscInt n,PetscScalar *eigr,PetscScalar *eigi,PetscInt *perm);
 
-PETSC_EXTERN PetscErrorCode SlepcMap_ST(PetscObject,PetscInt,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode SlepcMap_ST(PetscObject,PetscInt,PetscScalar*,PetscScalar*);
 
-PETSC_EXTERN PetscErrorCode SlepcCompareLargestMagnitude(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareSmallestMagnitude(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareLargestReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareSmallestReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareLargestImaginary(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareSmallestImaginary(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareTargetMagnitude(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
-PETSC_EXTERN PetscErrorCode SlepcCompareTargetReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareLargestMagnitude(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareSmallestMagnitude(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareLargestReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareSmallestReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareLargestImaginary(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareSmallestImaginary(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareTargetMagnitude(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareTargetReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
 #if defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN PetscErrorCode SlepcCompareTargetImaginary(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareTargetImaginary(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
 #endif
-PETSC_EXTERN PetscErrorCode SlepcCompareSmallestPosReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
+SLEPC_EXTERN PetscErrorCode SlepcCompareSmallestPosReal(PetscScalar,PetscScalar,PetscScalar,PetscScalar,PetscInt*,void*);
 
 #endif
diff --git a/include/slepcst.h b/include/slepcst.h
index d8edd7d0b..c9272fd15 100644
--- a/include/slepcst.h
+++ b/include/slepcst.h
@@ -17,7 +17,7 @@
 #include <slepcbv.h>
 #include <petscksp.h>
 
-PETSC_EXTERN PetscErrorCode STInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode STInitializePackage(void);
 
 /*S
     ST - Abstract SLEPc object that manages spectral transformations.
@@ -45,21 +45,21 @@ typedef const char* STType;
 #define STFILTER    "filter"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId ST_CLASSID;
-
-PETSC_EXTERN PetscErrorCode STCreate(MPI_Comm,ST*);
-PETSC_EXTERN PetscErrorCode STDestroy(ST*);
-PETSC_EXTERN PetscErrorCode STReset(ST);
-PETSC_EXTERN PetscErrorCode STSetType(ST,STType);
-PETSC_EXTERN PetscErrorCode STGetType(ST,STType*);
-PETSC_EXTERN PetscErrorCode STSetMatrices(ST,PetscInt,Mat*);
-PETSC_EXTERN PetscErrorCode STGetMatrix(ST,PetscInt,Mat*);
-PETSC_EXTERN PetscErrorCode STGetMatrixTransformed(ST,PetscInt,Mat*);
-PETSC_EXTERN PetscErrorCode STGetNumMatrices(ST,PetscInt*);
-PETSC_EXTERN PetscErrorCode STGetOperator(ST,Mat*);
-PETSC_EXTERN PetscErrorCode STSetUp(ST);
-PETSC_EXTERN PetscErrorCode STSetFromOptions(ST);
-PETSC_EXTERN PetscErrorCode STView(ST,PetscViewer);
+SLEPC_EXTERN PetscClassId ST_CLASSID;
+
+SLEPC_EXTERN PetscErrorCode STCreate(MPI_Comm,ST*);
+SLEPC_EXTERN PetscErrorCode STDestroy(ST*);
+SLEPC_EXTERN PetscErrorCode STReset(ST);
+SLEPC_EXTERN PetscErrorCode STSetType(ST,STType);
+SLEPC_EXTERN PetscErrorCode STGetType(ST,STType*);
+SLEPC_EXTERN PetscErrorCode STSetMatrices(ST,PetscInt,Mat*);
+SLEPC_EXTERN PetscErrorCode STGetMatrix(ST,PetscInt,Mat*);
+SLEPC_EXTERN PetscErrorCode STGetMatrixTransformed(ST,PetscInt,Mat*);
+SLEPC_EXTERN PetscErrorCode STGetNumMatrices(ST,PetscInt*);
+SLEPC_EXTERN PetscErrorCode STGetOperator(ST,Mat*);
+SLEPC_EXTERN PetscErrorCode STSetUp(ST);
+SLEPC_EXTERN PetscErrorCode STSetFromOptions(ST);
+SLEPC_EXTERN PetscErrorCode STView(ST,PetscViewer);
 
 PETSC_DEPRECATED("Use STSetMatrices()") PETSC_STATIC_INLINE PetscErrorCode STSetOperators(ST st,PetscInt n,Mat *A) {return STSetMatrices(st,n,A);}
 PETSC_DEPRECATED("Use STGetMatrix()") PETSC_STATIC_INLINE PetscErrorCode STGetOperators(ST st,PetscInt k,Mat *A) {return STGetMatrix(st,k,A);}
@@ -72,42 +72,42 @@ PETSC_DEPRECATED("Use STGetOperator() followed by MatComputeExplicitOperator()")
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode STApply(ST,Vec,Vec);
-PETSC_EXTERN PetscErrorCode STMatMult(ST,PetscInt,Vec,Vec);
-PETSC_EXTERN PetscErrorCode STMatMultTranspose(ST,PetscInt,Vec,Vec);
-PETSC_EXTERN PetscErrorCode STMatSolve(ST,Vec,Vec);
-PETSC_EXTERN PetscErrorCode STMatSolveTranspose(ST,Vec,Vec);
-PETSC_EXTERN PetscErrorCode STGetBilinearForm(ST,Mat*);
-PETSC_EXTERN PetscErrorCode STApplyTranspose(ST,Vec,Vec);
-PETSC_EXTERN PetscErrorCode STMatSetUp(ST,PetscScalar,PetscScalar*);
-PETSC_EXTERN PetscErrorCode STPostSolve(ST);
-PETSC_EXTERN PetscErrorCode STResetMatrixState(ST);
-PETSC_EXTERN PetscErrorCode STSetWorkVecs(ST,PetscInt);
-
-PETSC_EXTERN PetscErrorCode STSetKSP(ST,KSP);
-PETSC_EXTERN PetscErrorCode STGetKSP(ST,KSP*);
-PETSC_EXTERN PetscErrorCode STSetShift(ST,PetscScalar);
-PETSC_EXTERN PetscErrorCode STGetShift(ST,PetscScalar*);
-PETSC_EXTERN PetscErrorCode STSetDefaultShift(ST,PetscScalar);
-PETSC_EXTERN PetscErrorCode STScaleShift(ST,PetscScalar);
-PETSC_EXTERN PetscErrorCode STSetBalanceMatrix(ST,Vec);
-PETSC_EXTERN PetscErrorCode STGetBalanceMatrix(ST,Vec*);
-PETSC_EXTERN PetscErrorCode STSetTransform(ST,PetscBool);
-PETSC_EXTERN PetscErrorCode STGetTransform(ST,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode STSetOptionsPrefix(ST,const char*);
-PETSC_EXTERN PetscErrorCode STAppendOptionsPrefix(ST,const char*);
-PETSC_EXTERN PetscErrorCode STGetOptionsPrefix(ST,const char*[]);
-
-PETSC_EXTERN PetscErrorCode STBackTransform(ST,PetscInt,PetscScalar*,PetscScalar*);
-PETSC_EXTERN PetscErrorCode STIsInjective(ST,PetscBool*);
-
-PETSC_EXTERN PetscErrorCode STCheckNullSpace(ST,BV);
-
-PETSC_EXTERN PetscErrorCode STMatCreateVecs(ST,Vec*,Vec*);
-PETSC_EXTERN PetscErrorCode STMatCreateVecsEmpty(ST,Vec*,Vec*);
-PETSC_EXTERN PetscErrorCode STMatGetSize(ST,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode STMatGetLocalSize(ST,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode STApply(ST,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode STMatMult(ST,PetscInt,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode STMatMultTranspose(ST,PetscInt,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode STMatSolve(ST,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode STMatSolveTranspose(ST,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode STGetBilinearForm(ST,Mat*);
+SLEPC_EXTERN PetscErrorCode STApplyTranspose(ST,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode STMatSetUp(ST,PetscScalar,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode STPostSolve(ST);
+SLEPC_EXTERN PetscErrorCode STResetMatrixState(ST);
+SLEPC_EXTERN PetscErrorCode STSetWorkVecs(ST,PetscInt);
+
+SLEPC_EXTERN PetscErrorCode STSetKSP(ST,KSP);
+SLEPC_EXTERN PetscErrorCode STGetKSP(ST,KSP*);
+SLEPC_EXTERN PetscErrorCode STSetShift(ST,PetscScalar);
+SLEPC_EXTERN PetscErrorCode STGetShift(ST,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode STSetDefaultShift(ST,PetscScalar);
+SLEPC_EXTERN PetscErrorCode STScaleShift(ST,PetscScalar);
+SLEPC_EXTERN PetscErrorCode STSetBalanceMatrix(ST,Vec);
+SLEPC_EXTERN PetscErrorCode STGetBalanceMatrix(ST,Vec*);
+SLEPC_EXTERN PetscErrorCode STSetTransform(ST,PetscBool);
+SLEPC_EXTERN PetscErrorCode STGetTransform(ST,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode STSetOptionsPrefix(ST,const char*);
+SLEPC_EXTERN PetscErrorCode STAppendOptionsPrefix(ST,const char*);
+SLEPC_EXTERN PetscErrorCode STGetOptionsPrefix(ST,const char*[]);
+
+SLEPC_EXTERN PetscErrorCode STBackTransform(ST,PetscInt,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode STIsInjective(ST,PetscBool*);
+
+SLEPC_EXTERN PetscErrorCode STCheckNullSpace(ST,BV);
+
+SLEPC_EXTERN PetscErrorCode STMatCreateVecs(ST,Vec*,Vec*);
+SLEPC_EXTERN PetscErrorCode STMatCreateVecsEmpty(ST,Vec*,Vec*);
+SLEPC_EXTERN PetscErrorCode STMatGetSize(ST,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode STMatGetLocalSize(ST,PetscInt*,PetscInt*);
 
 /*E
     STMatMode - Determines how to handle the coefficient matrix associated
@@ -120,39 +120,39 @@ E*/
 typedef enum { ST_MATMODE_COPY,
                ST_MATMODE_INPLACE,
                ST_MATMODE_SHELL } STMatMode;
-PETSC_EXTERN const char *STMatModes[];
+SLEPC_EXTERN const char *STMatModes[];
 
-PETSC_EXTERN PetscErrorCode STSetMatMode(ST,STMatMode);
-PETSC_EXTERN PetscErrorCode STGetMatMode(ST,STMatMode*);
-PETSC_EXTERN PetscErrorCode STSetMatStructure(ST,MatStructure);
-PETSC_EXTERN PetscErrorCode STGetMatStructure(ST,MatStructure*);
+SLEPC_EXTERN PetscErrorCode STSetMatMode(ST,STMatMode);
+SLEPC_EXTERN PetscErrorCode STGetMatMode(ST,STMatMode*);
+SLEPC_EXTERN PetscErrorCode STSetMatStructure(ST,MatStructure);
+SLEPC_EXTERN PetscErrorCode STGetMatStructure(ST,MatStructure*);
 
-PETSC_EXTERN PetscFunctionList STList;
-PETSC_EXTERN PetscErrorCode STRegister(const char[],PetscErrorCode(*)(ST));
+SLEPC_EXTERN PetscFunctionList STList;
+SLEPC_EXTERN PetscErrorCode STRegister(const char[],PetscErrorCode(*)(ST));
 
 /* --------- options specific to particular spectral transformations-------- */
 
-PETSC_EXTERN PetscErrorCode STShellGetContext(ST st,void **ctx);
-PETSC_EXTERN PetscErrorCode STShellSetContext(ST st,void *ctx);
-PETSC_EXTERN PetscErrorCode STShellSetApply(ST st,PetscErrorCode (*apply)(ST,Vec,Vec));
-PETSC_EXTERN PetscErrorCode STShellSetApplyTranspose(ST st,PetscErrorCode (*applytrans)(ST,Vec,Vec));
-PETSC_EXTERN PetscErrorCode STShellSetBackTransform(ST st,PetscErrorCode (*backtr)(ST,PetscInt,PetscScalar*,PetscScalar*));
-
-PETSC_EXTERN PetscErrorCode STCayleyGetAntishift(ST,PetscScalar*);
-PETSC_EXTERN PetscErrorCode STCayleySetAntishift(ST,PetscScalar);
-
-PETSC_EXTERN PetscErrorCode STPrecondGetMatForPC(ST,Mat*);
-PETSC_EXTERN PetscErrorCode STPrecondSetMatForPC(ST,Mat);
-PETSC_EXTERN PetscErrorCode STPrecondGetKSPHasMat(ST,PetscBool*);
-PETSC_EXTERN PetscErrorCode STPrecondSetKSPHasMat(ST,PetscBool);
-
-PETSC_EXTERN PetscErrorCode STFilterSetInterval(ST,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode STFilterGetInterval(ST,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode STFilterSetRange(ST,PetscReal,PetscReal);
-PETSC_EXTERN PetscErrorCode STFilterGetRange(ST,PetscReal*,PetscReal*);
-PETSC_EXTERN PetscErrorCode STFilterSetDegree(ST,PetscInt);
-PETSC_EXTERN PetscErrorCode STFilterGetDegree(ST,PetscInt*);
-PETSC_EXTERN PetscErrorCode STFilterGetThreshold(ST,PetscReal*);
+SLEPC_EXTERN PetscErrorCode STShellGetContext(ST st,void **ctx);
+SLEPC_EXTERN PetscErrorCode STShellSetContext(ST st,void *ctx);
+SLEPC_EXTERN PetscErrorCode STShellSetApply(ST st,PetscErrorCode (*apply)(ST,Vec,Vec));
+SLEPC_EXTERN PetscErrorCode STShellSetApplyTranspose(ST st,PetscErrorCode (*applytrans)(ST,Vec,Vec));
+SLEPC_EXTERN PetscErrorCode STShellSetBackTransform(ST st,PetscErrorCode (*backtr)(ST,PetscInt,PetscScalar*,PetscScalar*));
+
+SLEPC_EXTERN PetscErrorCode STCayleyGetAntishift(ST,PetscScalar*);
+SLEPC_EXTERN PetscErrorCode STCayleySetAntishift(ST,PetscScalar);
+
+SLEPC_EXTERN PetscErrorCode STPrecondGetMatForPC(ST,Mat*);
+SLEPC_EXTERN PetscErrorCode STPrecondSetMatForPC(ST,Mat);
+SLEPC_EXTERN PetscErrorCode STPrecondGetKSPHasMat(ST,PetscBool*);
+SLEPC_EXTERN PetscErrorCode STPrecondSetKSPHasMat(ST,PetscBool);
+
+SLEPC_EXTERN PetscErrorCode STFilterSetInterval(ST,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode STFilterGetInterval(ST,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode STFilterSetRange(ST,PetscReal,PetscReal);
+SLEPC_EXTERN PetscErrorCode STFilterGetRange(ST,PetscReal*,PetscReal*);
+SLEPC_EXTERN PetscErrorCode STFilterSetDegree(ST,PetscInt);
+SLEPC_EXTERN PetscErrorCode STFilterGetDegree(ST,PetscInt*);
+SLEPC_EXTERN PetscErrorCode STFilterGetThreshold(ST,PetscReal*);
 
 #endif
 
diff --git a/include/slepcsvd.h b/include/slepcsvd.h
index 727234858..f931222e7 100644
--- a/include/slepcsvd.h
+++ b/include/slepcsvd.h
@@ -17,7 +17,7 @@
 #include <slepcbv.h>
 #include <slepcds.h>
 
-PETSC_EXTERN PetscErrorCode SVDInitializePackage(void);
+SLEPC_EXTERN PetscErrorCode SVDInitializePackage(void);
 
 /*S
      SVD - Abstract SLEPc object that manages all the singular value
@@ -45,7 +45,7 @@ typedef const char* SVDType;
 #define SVDPRIMME      "primme"
 
 /* Logging support */
-PETSC_EXTERN PetscClassId SVD_CLASSID;
+SLEPC_EXTERN PetscClassId SVD_CLASSID;
 
 /*E
     SVDWhich - Determines whether largest or smallest singular triplets
@@ -67,7 +67,7 @@ typedef enum { SVD_LARGEST,
 E*/
 typedef enum { SVD_ERROR_ABSOLUTE,
                SVD_ERROR_RELATIVE } SVDErrorType;
-PETSC_EXTERN const char *SVDErrorTypes[];
+SLEPC_EXTERN const char *SVDErrorTypes[];
 
 /*E
     SVDConv - Determines the convergence test
@@ -105,102 +105,102 @@ typedef enum {/* converged */
               SVD_DIVERGED_ITS                 = -1,
               SVD_DIVERGED_BREAKDOWN           = -2,
               SVD_CONVERGED_ITERATING          =  0 } SVDConvergedReason;
-PETSC_EXTERN const char *const*SVDConvergedReasons;
-
-PETSC_EXTERN PetscErrorCode SVDCreate(MPI_Comm,SVD*);
-PETSC_EXTERN PetscErrorCode SVDSetBV(SVD,BV,BV);
-PETSC_EXTERN PetscErrorCode SVDGetBV(SVD,BV*,BV*);
-PETSC_EXTERN PetscErrorCode SVDSetDS(SVD,DS);
-PETSC_EXTERN PetscErrorCode SVDGetDS(SVD,DS*);
-PETSC_EXTERN PetscErrorCode SVDSetType(SVD,SVDType);
-PETSC_EXTERN PetscErrorCode SVDGetType(SVD,SVDType*);
-PETSC_EXTERN PetscErrorCode SVDSetOperator(SVD,Mat);
-PETSC_EXTERN PetscErrorCode SVDGetOperator(SVD,Mat*);
-PETSC_EXTERN PetscErrorCode SVDSetInitialSpaces(SVD,PetscInt,Vec*,PetscInt,Vec*);
+SLEPC_EXTERN const char *const*SVDConvergedReasons;
+
+SLEPC_EXTERN PetscErrorCode SVDCreate(MPI_Comm,SVD*);
+SLEPC_EXTERN PetscErrorCode SVDSetBV(SVD,BV,BV);
+SLEPC_EXTERN PetscErrorCode SVDGetBV(SVD,BV*,BV*);
+SLEPC_EXTERN PetscErrorCode SVDSetDS(SVD,DS);
+SLEPC_EXTERN PetscErrorCode SVDGetDS(SVD,DS*);
+SLEPC_EXTERN PetscErrorCode SVDSetType(SVD,SVDType);
+SLEPC_EXTERN PetscErrorCode SVDGetType(SVD,SVDType*);
+SLEPC_EXTERN PetscErrorCode SVDSetOperator(SVD,Mat);
+SLEPC_EXTERN PetscErrorCode SVDGetOperator(SVD,Mat*);
+SLEPC_EXTERN PetscErrorCode SVDSetInitialSpaces(SVD,PetscInt,Vec*,PetscInt,Vec*);
 PETSC_DEPRECATED("Use SVDSetInitialSpaces()") PETSC_STATIC_INLINE PetscErrorCode SVDSetInitialSpace(SVD svd,PetscInt nr,Vec *isr) {return SVDSetInitialSpaces(svd,nr,isr,0,NULL);}
 PETSC_DEPRECATED("Use SVDSetInitialSpaces()") PETSC_STATIC_INLINE PetscErrorCode SVDSetInitialSpaceLeft(SVD svd,PetscInt nl,Vec *isl) {return SVDSetInitialSpaces(svd,0,NULL,nl,isl);}
-PETSC_EXTERN PetscErrorCode SVDSetImplicitTranspose(SVD,PetscBool);
-PETSC_EXTERN PetscErrorCode SVDGetImplicitTranspose(SVD,PetscBool*);
-PETSC_EXTERN PetscErrorCode SVDSetDimensions(SVD,PetscInt,PetscInt,PetscInt);
-PETSC_EXTERN PetscErrorCode SVDGetDimensions(SVD,PetscInt*,PetscInt*,PetscInt*);
-PETSC_EXTERN PetscErrorCode SVDSetTolerances(SVD,PetscReal,PetscInt);
-PETSC_EXTERN PetscErrorCode SVDGetTolerances(SVD,PetscReal*,PetscInt*);
-PETSC_EXTERN PetscErrorCode SVDSetWhichSingularTriplets(SVD,SVDWhich);
-PETSC_EXTERN PetscErrorCode SVDGetWhichSingularTriplets(SVD,SVDWhich*);
-PETSC_EXTERN PetscErrorCode SVDSetFromOptions(SVD);
-PETSC_EXTERN PetscErrorCode SVDSetOptionsPrefix(SVD,const char*);
-PETSC_EXTERN PetscErrorCode SVDAppendOptionsPrefix(SVD,const char*);
-PETSC_EXTERN PetscErrorCode SVDGetOptionsPrefix(SVD,const char*[]);
-PETSC_EXTERN PetscErrorCode SVDSetUp(SVD);
-PETSC_EXTERN PetscErrorCode SVDSolve(SVD);
-PETSC_EXTERN PetscErrorCode SVDGetIterationNumber(SVD,PetscInt*);
-PETSC_EXTERN PetscErrorCode SVDSetConvergenceTestFunction(SVD,PetscErrorCode (*)(SVD,PetscReal,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode SVDSetConvergenceTest(SVD,SVDConv);
-PETSC_EXTERN PetscErrorCode SVDGetConvergenceTest(SVD,SVDConv*);
-PETSC_EXTERN PetscErrorCode SVDConvergedAbsolute(SVD,PetscReal,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode SVDConvergedRelative(SVD,PetscReal,PetscReal,PetscReal*,void*);
-PETSC_EXTERN PetscErrorCode SVDSetStoppingTestFunction(SVD,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscInt,PetscInt,SVDConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
-PETSC_EXTERN PetscErrorCode SVDSetStoppingTest(SVD,SVDStop);
-PETSC_EXTERN PetscErrorCode SVDGetStoppingTest(SVD,SVDStop*);
-PETSC_EXTERN PetscErrorCode SVDStoppingBasic(SVD,PetscInt,PetscInt,PetscInt,PetscInt,SVDConvergedReason*,void*);
-PETSC_EXTERN PetscErrorCode SVDGetConvergedReason(SVD,SVDConvergedReason*);
-PETSC_EXTERN PetscErrorCode SVDGetConverged(SVD,PetscInt*);
-PETSC_EXTERN PetscErrorCode SVDGetSingularTriplet(SVD,PetscInt,PetscReal*,Vec,Vec);
-PETSC_EXTERN PetscErrorCode SVDComputeError(SVD,PetscInt,SVDErrorType,PetscReal*);
+SLEPC_EXTERN PetscErrorCode SVDSetImplicitTranspose(SVD,PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDGetImplicitTranspose(SVD,PetscBool*);
+SLEPC_EXTERN PetscErrorCode SVDSetDimensions(SVD,PetscInt,PetscInt,PetscInt);
+SLEPC_EXTERN PetscErrorCode SVDGetDimensions(SVD,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SVDSetTolerances(SVD,PetscReal,PetscInt);
+SLEPC_EXTERN PetscErrorCode SVDGetTolerances(SVD,PetscReal*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SVDSetWhichSingularTriplets(SVD,SVDWhich);
+SLEPC_EXTERN PetscErrorCode SVDGetWhichSingularTriplets(SVD,SVDWhich*);
+SLEPC_EXTERN PetscErrorCode SVDSetFromOptions(SVD);
+SLEPC_EXTERN PetscErrorCode SVDSetOptionsPrefix(SVD,const char*);
+SLEPC_EXTERN PetscErrorCode SVDAppendOptionsPrefix(SVD,const char*);
+SLEPC_EXTERN PetscErrorCode SVDGetOptionsPrefix(SVD,const char*[]);
+SLEPC_EXTERN PetscErrorCode SVDSetUp(SVD);
+SLEPC_EXTERN PetscErrorCode SVDSolve(SVD);
+SLEPC_EXTERN PetscErrorCode SVDGetIterationNumber(SVD,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SVDSetConvergenceTestFunction(SVD,PetscErrorCode (*)(SVD,PetscReal,PetscReal,PetscReal*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode SVDSetConvergenceTest(SVD,SVDConv);
+SLEPC_EXTERN PetscErrorCode SVDGetConvergenceTest(SVD,SVDConv*);
+SLEPC_EXTERN PetscErrorCode SVDConvergedAbsolute(SVD,PetscReal,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode SVDConvergedRelative(SVD,PetscReal,PetscReal,PetscReal*,void*);
+SLEPC_EXTERN PetscErrorCode SVDSetStoppingTestFunction(SVD,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscInt,PetscInt,SVDConvergedReason*,void*),void*,PetscErrorCode (*)(void*));
+SLEPC_EXTERN PetscErrorCode SVDSetStoppingTest(SVD,SVDStop);
+SLEPC_EXTERN PetscErrorCode SVDGetStoppingTest(SVD,SVDStop*);
+SLEPC_EXTERN PetscErrorCode SVDStoppingBasic(SVD,PetscInt,PetscInt,PetscInt,PetscInt,SVDConvergedReason*,void*);
+SLEPC_EXTERN PetscErrorCode SVDGetConvergedReason(SVD,SVDConvergedReason*);
+SLEPC_EXTERN PetscErrorCode SVDGetConverged(SVD,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SVDGetSingularTriplet(SVD,PetscInt,PetscReal*,Vec,Vec);
+SLEPC_EXTERN PetscErrorCode SVDComputeError(SVD,PetscInt,SVDErrorType,PetscReal*);
 PETSC_DEPRECATED("Use SVDComputeError()") PETSC_STATIC_INLINE PetscErrorCode SVDComputeRelativeError(SVD svd,PetscInt i,PetscReal *r) {return SVDComputeError(svd,i,SVD_ERROR_RELATIVE,r);}
 PETSC_DEPRECATED("Use SVDComputeError() with SVD_ERROR_ABSOLUTE") PETSC_STATIC_INLINE PetscErrorCode SVDComputeResidualNorms(SVD svd,PetscInt i,PetscReal *r1,PETSC_UNUSED PetscReal *r2) {return SVDComputeError(svd,i,SVD_ERROR_ABSOLUTE,r1);}
-PETSC_EXTERN PetscErrorCode SVDView(SVD,PetscViewer);
+SLEPC_EXTERN PetscErrorCode SVDView(SVD,PetscViewer);
 PETSC_STATIC_INLINE PetscErrorCode SVDViewFromOptions(SVD svd,PetscObject obj,const char name[]) {return PetscObjectViewFromOptions((PetscObject)svd,obj,name);}
-PETSC_EXTERN PetscErrorCode SVDErrorView(SVD,SVDErrorType,PetscViewer);
+SLEPC_EXTERN PetscErrorCode SVDErrorView(SVD,SVDErrorType,PetscViewer);
 PETSC_DEPRECATED("Use SVDErrorView()") PETSC_STATIC_INLINE PetscErrorCode SVDPrintSolution(SVD svd,PetscViewer v) {return SVDErrorView(svd,SVD_ERROR_RELATIVE,v);}
-PETSC_EXTERN PetscErrorCode SVDErrorViewFromOptions(SVD);
-PETSC_EXTERN PetscErrorCode SVDReasonView(SVD,PetscViewer);
-PETSC_EXTERN PetscErrorCode SVDReasonViewFromOptions(SVD);
-PETSC_EXTERN PetscErrorCode SVDValuesView(SVD,PetscViewer);
-PETSC_EXTERN PetscErrorCode SVDValuesViewFromOptions(SVD);
-PETSC_EXTERN PetscErrorCode SVDVectorsView(SVD,PetscViewer);
-PETSC_EXTERN PetscErrorCode SVDVectorsViewFromOptions(SVD);
-PETSC_EXTERN PetscErrorCode SVDDestroy(SVD*);
-PETSC_EXTERN PetscErrorCode SVDReset(SVD);
-
-PETSC_EXTERN PetscErrorCode SVDMonitor(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt);
-PETSC_EXTERN PetscErrorCode SVDMonitorSet(SVD,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
-PETSC_EXTERN PetscErrorCode SVDMonitorSetFromOptions(SVD,const char*,const char*,const char*,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
-PETSC_EXTERN PetscErrorCode SVDConvMonitorSetFromOptions(SVD,const char*,const char*,const char*,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,SlepcConvMonitor));
-PETSC_EXTERN PetscErrorCode SVDMonitorCancel(SVD);
-PETSC_EXTERN PetscErrorCode SVDGetMonitorContext(SVD,void **);
-PETSC_EXTERN PetscErrorCode SVDMonitorAll(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode SVDMonitorFirst(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,PetscViewerAndFormat*);
-PETSC_EXTERN PetscErrorCode SVDMonitorConverged(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,SlepcConvMonitor);
-PETSC_EXTERN PetscErrorCode SVDMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
-PETSC_EXTERN PetscErrorCode SVDMonitorLG(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,void*);
-PETSC_EXTERN PetscErrorCode SVDMonitorLGAll(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,void*);
-
-PETSC_EXTERN PetscErrorCode SVDSetTrackAll(SVD,PetscBool);
-PETSC_EXTERN PetscErrorCode SVDGetTrackAll(SVD,PetscBool*);
-
-PETSC_EXTERN PetscFunctionList SVDList;
-PETSC_EXTERN PetscErrorCode SVDRegister(const char[],PetscErrorCode(*)(SVD));
-
-PETSC_EXTERN PetscErrorCode SVDAllocateSolution(SVD,PetscInt);
+SLEPC_EXTERN PetscErrorCode SVDErrorViewFromOptions(SVD);
+SLEPC_EXTERN PetscErrorCode SVDReasonView(SVD,PetscViewer);
+SLEPC_EXTERN PetscErrorCode SVDReasonViewFromOptions(SVD);
+SLEPC_EXTERN PetscErrorCode SVDValuesView(SVD,PetscViewer);
+SLEPC_EXTERN PetscErrorCode SVDValuesViewFromOptions(SVD);
+SLEPC_EXTERN PetscErrorCode SVDVectorsView(SVD,PetscViewer);
+SLEPC_EXTERN PetscErrorCode SVDVectorsViewFromOptions(SVD);
+SLEPC_EXTERN PetscErrorCode SVDDestroy(SVD*);
+SLEPC_EXTERN PetscErrorCode SVDReset(SVD);
+
+SLEPC_EXTERN PetscErrorCode SVDMonitor(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt);
+SLEPC_EXTERN PetscErrorCode SVDMonitorSet(SVD,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,void*),void*,PetscErrorCode (*)(void**));
+SLEPC_EXTERN PetscErrorCode SVDMonitorSetFromOptions(SVD,const char*,const char*,const char*,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,PetscViewerAndFormat*),PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDConvMonitorSetFromOptions(SVD,const char*,const char*,const char*,PetscErrorCode (*)(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,SlepcConvMonitor));
+SLEPC_EXTERN PetscErrorCode SVDMonitorCancel(SVD);
+SLEPC_EXTERN PetscErrorCode SVDGetMonitorContext(SVD,void **);
+SLEPC_EXTERN PetscErrorCode SVDMonitorAll(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode SVDMonitorFirst(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,PetscViewerAndFormat*);
+SLEPC_EXTERN PetscErrorCode SVDMonitorConverged(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,SlepcConvMonitor);
+SLEPC_EXTERN PetscErrorCode SVDMonitorLGCreate(MPI_Comm,const char[],const char[],int,int,int,int,PetscDrawLG*);
+SLEPC_EXTERN PetscErrorCode SVDMonitorLG(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,void*);
+SLEPC_EXTERN PetscErrorCode SVDMonitorLGAll(SVD,PetscInt,PetscInt,PetscReal*,PetscReal*,PetscInt,void*);
+
+SLEPC_EXTERN PetscErrorCode SVDSetTrackAll(SVD,PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDGetTrackAll(SVD,PetscBool*);
+
+SLEPC_EXTERN PetscFunctionList SVDList;
+SLEPC_EXTERN PetscErrorCode SVDRegister(const char[],PetscErrorCode(*)(SVD));
+
+SLEPC_EXTERN PetscErrorCode SVDAllocateSolution(SVD,PetscInt);
 
 /* --------- options specific to particular solvers -------- */
 
-PETSC_EXTERN PetscErrorCode SVDCrossSetExplicitMatrix(SVD,PetscBool);
-PETSC_EXTERN PetscErrorCode SVDCrossGetExplicitMatrix(SVD,PetscBool*);
-PETSC_EXTERN PetscErrorCode SVDCrossSetEPS(SVD,EPS);
-PETSC_EXTERN PetscErrorCode SVDCrossGetEPS(SVD,EPS*);
+SLEPC_EXTERN PetscErrorCode SVDCrossSetExplicitMatrix(SVD,PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDCrossGetExplicitMatrix(SVD,PetscBool*);
+SLEPC_EXTERN PetscErrorCode SVDCrossSetEPS(SVD,EPS);
+SLEPC_EXTERN PetscErrorCode SVDCrossGetEPS(SVD,EPS*);
 
-PETSC_EXTERN PetscErrorCode SVDCyclicSetExplicitMatrix(SVD,PetscBool);
-PETSC_EXTERN PetscErrorCode SVDCyclicGetExplicitMatrix(SVD,PetscBool*);
-PETSC_EXTERN PetscErrorCode SVDCyclicSetEPS(SVD,EPS);
-PETSC_EXTERN PetscErrorCode SVDCyclicGetEPS(SVD,EPS*);
+SLEPC_EXTERN PetscErrorCode SVDCyclicSetExplicitMatrix(SVD,PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDCyclicGetExplicitMatrix(SVD,PetscBool*);
+SLEPC_EXTERN PetscErrorCode SVDCyclicSetEPS(SVD,EPS);
+SLEPC_EXTERN PetscErrorCode SVDCyclicGetEPS(SVD,EPS*);
 
-PETSC_EXTERN PetscErrorCode SVDLanczosSetOneSide(SVD,PetscBool);
-PETSC_EXTERN PetscErrorCode SVDLanczosGetOneSide(SVD,PetscBool*);
+SLEPC_EXTERN PetscErrorCode SVDLanczosSetOneSide(SVD,PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDLanczosGetOneSide(SVD,PetscBool*);
 
-PETSC_EXTERN PetscErrorCode SVDTRLanczosSetOneSide(SVD,PetscBool);
-PETSC_EXTERN PetscErrorCode SVDTRLanczosGetOneSide(SVD,PetscBool*);
+SLEPC_EXTERN PetscErrorCode SVDTRLanczosSetOneSide(SVD,PetscBool);
+SLEPC_EXTERN PetscErrorCode SVDTRLanczosGetOneSide(SVD,PetscBool*);
 
 /*E
     SVDPRIMMEMethod - determines the SVD method selected in the PRIMME library
@@ -212,11 +212,11 @@ E*/
 typedef enum { SVD_PRIMME_HYBRID=1,
                SVD_PRIMME_NORMALEQUATIONS,
                SVD_PRIMME_AUGMENTED } SVDPRIMMEMethod;
-PETSC_EXTERN const char *SVDPRIMMEMethods[];
+SLEPC_EXTERN const char *SVDPRIMMEMethods[];
 
-PETSC_EXTERN PetscErrorCode SVDPRIMMESetBlockSize(SVD,PetscInt);
-PETSC_EXTERN PetscErrorCode SVDPRIMMEGetBlockSize(SVD,PetscInt*);
-PETSC_EXTERN PetscErrorCode SVDPRIMMESetMethod(SVD,SVDPRIMMEMethod);
-PETSC_EXTERN PetscErrorCode SVDPRIMMEGetMethod(SVD,SVDPRIMMEMethod*);
+SLEPC_EXTERN PetscErrorCode SVDPRIMMESetBlockSize(SVD,PetscInt);
+SLEPC_EXTERN PetscErrorCode SVDPRIMMEGetBlockSize(SVD,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SVDPRIMMESetMethod(SVD,SVDPRIMMEMethod);
+SLEPC_EXTERN PetscErrorCode SVDPRIMMEGetMethod(SVD,SVDPRIMMEMethod*);
 
 #endif
diff --git a/include/slepcsys.h b/include/slepcsys.h
index 96b4365c3..4261bc070 100644
--- a/include/slepcsys.h
+++ b/include/slepcsys.h
@@ -21,6 +21,8 @@
    It contains macro definitions set at configure time.
 */
 #include <slepcconf.h>
+#include <slepcexp.h>
+
 /*
     slepcversion.h contains version info
 */
@@ -50,22 +52,22 @@
     Creation and destruction of context for monitors of type XXXMonitorConverged
 */
 typedef struct _n_SlepcConvMonitor* SlepcConvMonitor;
-PETSC_EXTERN PetscErrorCode SlepcConvMonitorCreate(PetscViewer,PetscViewerFormat,SlepcConvMonitor*);
-PETSC_EXTERN PetscErrorCode SlepcConvMonitorDestroy(SlepcConvMonitor*);
+SLEPC_EXTERN PetscErrorCode SlepcConvMonitorCreate(PetscViewer,PetscViewerFormat,SlepcConvMonitor*);
+SLEPC_EXTERN PetscErrorCode SlepcConvMonitorDestroy(SlepcConvMonitor*);
 
 /*
     Initialization of SLEPc and other system routines
 */
-PETSC_EXTERN PetscErrorCode SlepcInitialize(int*,char***,const char[],const char[]);
-PETSC_EXTERN PetscErrorCode SlepcInitializeNoPointers(int,char**,const char[],const char[]);
-PETSC_EXTERN PetscErrorCode SlepcInitializeNoArguments(void);
-PETSC_EXTERN PetscErrorCode SlepcFinalize(void);
-PETSC_EXTERN PetscErrorCode SlepcInitializeFortran(void);
-PETSC_EXTERN PetscErrorCode SlepcInitialized(PetscBool*);
-PETSC_EXTERN PetscErrorCode SlepcGetVersion(char[],size_t);
-PETSC_EXTERN PetscErrorCode SlepcGetVersionNumber(PetscInt*,PetscInt*,PetscInt*,PetscInt*);
+SLEPC_EXTERN PetscErrorCode SlepcInitialize(int*,char***,const char[],const char[]);
+SLEPC_EXTERN PetscErrorCode SlepcInitializeNoPointers(int,char**,const char[],const char[]);
+SLEPC_EXTERN PetscErrorCode SlepcInitializeNoArguments(void);
+SLEPC_EXTERN PetscErrorCode SlepcFinalize(void);
+SLEPC_EXTERN PetscErrorCode SlepcInitializeFortran(void);
+SLEPC_EXTERN PetscErrorCode SlepcInitialized(PetscBool*);
+SLEPC_EXTERN PetscErrorCode SlepcGetVersion(char[],size_t);
+SLEPC_EXTERN PetscErrorCode SlepcGetVersionNumber(PetscInt*,PetscInt*,PetscInt*,PetscInt*);
 
-PETSC_EXTERN PetscErrorCode SlepcSNPrintfScalar(char*,size_t,PetscScalar,PetscBool);
+SLEPC_EXTERN PetscErrorCode SlepcSNPrintfScalar(char*,size_t,PetscScalar,PetscBool);
 
 PETSC_DEPRECATED("Use MatCreateRedundantMatrix() followed by MatConvert()") PETSC_STATIC_INLINE PetscErrorCode SlepcMatConvertSeqDense(Mat mat,Mat *newmat) {
   PetscErrorCode ierr; Mat Ar; 
@@ -78,7 +80,7 @@ PETSC_DEPRECATED("Use VecNormalizeComplex()") PETSC_STATIC_INLINE PetscErrorCode
 PETSC_DEPRECATED("Use VecCheckOrthogonality()") PETSC_STATIC_INLINE PetscErrorCode SlepcCheckOrthogonality(Vec *V,PetscInt nv,Vec *W,PetscInt nw,Mat B,PetscViewer viewer,PetscReal *lev) {return VecCheckOrthogonality(V,nv,W,nw,B,viewer,lev);}
 PETSC_DEPRECATED("Use MatCreateTile()") PETSC_STATIC_INLINE PetscErrorCode SlepcMatTile(PetscScalar a,Mat A,PetscScalar b,Mat B,PetscScalar c,Mat C,PetscScalar d,Mat D,Mat *G) {return MatCreateTile(a,A,b,B,c,C,d,D,G);}
 
-PETSC_EXTERN PetscBool SlepcInitializeCalled;
+SLEPC_EXTERN PetscBool SlepcInitializeCalled;
 
 #if defined(PETSC_USE_COMPLEX)
 #define SlepcLogFlopsComplex(a) PetscLogFlops((a))
diff --git a/include/slepcvec.h b/include/slepcvec.h
index ecadd577a..4eb4ed238 100644
--- a/include/slepcvec.h
+++ b/include/slepcvec.h
@@ -14,19 +14,20 @@
 #if !defined(__SLEPCVEC_H)
 #define __SLEPCVEC_H
 #include <petscmat.h>
+#include <slepcexp.h>
 
 /* VecComp: Vec composed of several smaller Vecs */
 #define VECCOMP  "comp"
 
-PETSC_EXTERN PetscErrorCode VecCreateComp(MPI_Comm,PetscInt*,PetscInt,VecType,Vec,Vec*);
-PETSC_EXTERN PetscErrorCode VecCreateCompWithVecs(Vec*,PetscInt,Vec,Vec*);
-PETSC_EXTERN PetscErrorCode VecCompGetSubVecs(Vec,PetscInt*,const Vec**);
-PETSC_EXTERN PetscErrorCode VecCompSetSubVecs(Vec,PetscInt,Vec*);
+SLEPC_EXTERN PetscErrorCode VecCreateComp(MPI_Comm,PetscInt*,PetscInt,VecType,Vec,Vec*);
+SLEPC_EXTERN PetscErrorCode VecCreateCompWithVecs(Vec*,PetscInt,Vec,Vec*);
+SLEPC_EXTERN PetscErrorCode VecCompGetSubVecs(Vec,PetscInt*,const Vec**);
+SLEPC_EXTERN PetscErrorCode VecCompSetSubVecs(Vec,PetscInt,Vec*);
 
 /* Some auxiliary functions */
-PETSC_EXTERN PetscErrorCode VecNormalizeComplex(Vec,Vec,PetscBool,PetscReal*);
-PETSC_EXTERN PetscErrorCode VecCheckOrthogonality(Vec*,PetscInt,Vec*,PetscInt,Mat,PetscViewer,PetscReal*);
-PETSC_EXTERN PetscErrorCode VecDuplicateEmpty(Vec,Vec*);
+SLEPC_EXTERN PetscErrorCode VecNormalizeComplex(Vec,Vec,PetscBool,PetscReal*);
+SLEPC_EXTERN PetscErrorCode VecCheckOrthogonality(Vec*,PetscInt,Vec*,PetscInt,Mat,PetscViewer,PetscReal*);
+SLEPC_EXTERN PetscErrorCode VecDuplicateEmpty(Vec,Vec*);
 
 #endif
 
diff --git a/lib/slepc/bin/maint/generatefortranstubs.py b/lib/slepc/bin/maint/generatefortranstubs.py
index 7e5ba1eb5..b6391849a 100644
--- a/lib/slepc/bin/maint/generatefortranstubs.py
+++ b/lib/slepc/bin/maint/generatefortranstubs.py
@@ -14,8 +14,8 @@ def FixFile(filename):
   ff.close()
 
   # gotta be a better way to do this
-  data = re.subn('\nvoid ','\nPETSC_EXTERN void PETSC_STDCALL ',data)[0]
-  data = re.subn('\nPetscErrorCode ','\nPETSC_EXTERN void PETSC_STDCALL ',data)[0]
+  data = re.subn('\nvoid ','\nSLEPC_EXTERN void PETSC_STDCALL ',data)[0]
+  data = re.subn('\nPetscErrorCode ','\nSLEPC_EXTERN void PETSC_STDCALL ',data)[0]
   data = re.subn('Petsc([ToRm]*)Pointer\(int\)','Petsc\\1Pointer(void*)',data)[0]	
   data = re.subn('PetscToPointer\(a\) \(a\)','PetscToPointer(a) (*(PetscFortranAddr *)(a))',data)[0]
   data = re.subn('PetscFromPointer\(a\) \(int\)\(a\)','PetscFromPointer(a) (PetscFortranAddr)(a)',data)[0]
diff --git a/src/eps/impls/cg/lobpcg/lobpcg.c b/src/eps/impls/cg/lobpcg/lobpcg.c
index 8c346b108..1c9af5338 100644
--- a/src/eps/impls/cg/lobpcg/lobpcg.c
+++ b/src/eps/impls/cg/lobpcg/lobpcg.c
@@ -696,7 +696,7 @@ PetscErrorCode EPSDestroy_LOBPCG(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_LOBPCG(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_LOBPCG(EPS eps)
 {
   EPS_LOBPCG     *lobpcg;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/cg/rqcg/rqcg.c b/src/eps/impls/cg/rqcg/rqcg.c
index 64b7eb0c4..4a521b1ce 100644
--- a/src/eps/impls/cg/rqcg/rqcg.c
+++ b/src/eps/impls/cg/rqcg/rqcg.c
@@ -404,7 +404,7 @@ PetscErrorCode EPSView_RQCG(EPS eps,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_RQCG(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_RQCG(EPS eps)
 {
   EPS_RQCG       *rqcg;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/ciss/ciss.c b/src/eps/impls/ciss/ciss.c
index c6a2039ab..7b2995c47 100644
--- a/src/eps/impls/ciss/ciss.c
+++ b/src/eps/impls/ciss/ciss.c
@@ -1942,7 +1942,7 @@ PetscErrorCode EPSSetDefaultST_CISS(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_CISS(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_CISS(EPS eps)
 {
   PetscErrorCode ierr;
   EPS_CISS       *ctx = (EPS_CISS*)eps->data;
diff --git a/src/eps/impls/davidson/gd/gd.c b/src/eps/impls/davidson/gd/gd.c
index 329f9077b..bb195d62b 100644
--- a/src/eps/impls/davidson/gd/gd.c
+++ b/src/eps/impls/davidson/gd/gd.c
@@ -507,7 +507,7 @@ PetscErrorCode EPSGDGetDoubleExpansion(EPS eps,PetscBool *doubleexp)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_GD(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_GD(EPS eps)
 {
   PetscErrorCode  ierr;
   EPS_DAVIDSON    *data;
diff --git a/src/eps/impls/davidson/jd/jd.c b/src/eps/impls/davidson/jd/jd.c
index 51e34b2af..1c4c0afc0 100644
--- a/src/eps/impls/davidson/jd/jd.c
+++ b/src/eps/impls/davidson/jd/jd.c
@@ -623,7 +623,7 @@ PetscErrorCode EPSJDGetBOrth(EPS eps,PetscBool *borth)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_JD(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_JD(EPS eps)
 {
   PetscErrorCode ierr;
   EPS_DAVIDSON   *data;
diff --git a/src/eps/impls/external/arpack/arpack.c b/src/eps/impls/external/arpack/arpack.c
index fb30ff94a..d7aceabbb 100644
--- a/src/eps/impls/external/arpack/arpack.c
+++ b/src/eps/impls/external/arpack/arpack.c
@@ -295,7 +295,7 @@ PetscErrorCode EPSDestroy_ARPACK(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_ARPACK(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_ARPACK(EPS eps)
 {
   EPS_ARPACK     *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/external/arpack/arpackp.h b/src/eps/impls/external/arpack/arpackp.h
index 5b6afe37d..63f6e7da7 100644
--- a/src/eps/impls/external/arpack/arpackp.h
+++ b/src/eps/impls/external/arpack/arpackp.h
@@ -171,15 +171,15 @@ typedef struct {
 
 #endif
 
-PETSC_EXTERN void   SLEPC_ARPACK(saupd,SAUPD)(COMM_ARG PetscBLASInt*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int);
-PETSC_EXTERN void   SLEPC_ARPACK(seupd,SEUPD)(COMM_ARG PetscBool*,char*,PetscBool*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int,int);
+SLEPC_EXTERN void   SLEPC_ARPACK(saupd,SAUPD)(COMM_ARG PetscBLASInt*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int);
+SLEPC_EXTERN void   SLEPC_ARPACK(seupd,SEUPD)(COMM_ARG PetscBool*,char*,PetscBool*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int,int);
 
 #if !defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN void   SLEPC_ARPACK(naupd,NAUPD)(COMM_ARG PetscBLASInt*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int);
-PETSC_EXTERN void   SLEPC_ARPACK(neupd,NEUPD)(COMM_ARG PetscBool*,char*,PetscBool*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int,int);
+SLEPC_EXTERN void   SLEPC_ARPACK(naupd,NAUPD)(COMM_ARG PetscBLASInt*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int);
+SLEPC_EXTERN void   SLEPC_ARPACK(neupd,NEUPD)(COMM_ARG PetscBool*,char*,PetscBool*,PetscReal*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscReal*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,int,int,int);
 #else
-PETSC_EXTERN void   SLEPC_ARPACK(naupd,NAUPD)(COMM_ARG PetscBLASInt*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,int,int);
-PETSC_EXTERN void   SLEPC_ARPACK(neupd,NEUPD)(COMM_ARG PetscBool*,char*,PetscBool*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,int,int,int);
+SLEPC_EXTERN void   SLEPC_ARPACK(naupd,NAUPD)(COMM_ARG PetscBLASInt*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,int,int);
+SLEPC_EXTERN void   SLEPC_ARPACK(neupd,NEUPD)(COMM_ARG PetscBool*,char*,PetscBool*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,char*,PetscBLASInt*,const char*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,int,int,int);
 #endif
 
 #endif
diff --git a/src/eps/impls/external/blopex/blopex.c b/src/eps/impls/external/blopex/blopex.c
index a43cea2d0..63680c927 100644
--- a/src/eps/impls/external/blopex/blopex.c
+++ b/src/eps/impls/external/blopex/blopex.c
@@ -405,7 +405,7 @@ PetscErrorCode EPSSetFromOptions_BLOPEX(PetscOptionItems *PetscOptionsObject,EPS
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_BLOPEX(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_BLOPEX(EPS eps)
 {
   EPS_BLOPEX     *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/external/blzpack/blzpack.c b/src/eps/impls/external/blzpack/blzpack.c
index d9e187e85..5995ca2ae 100644
--- a/src/eps/impls/external/blzpack/blzpack.c
+++ b/src/eps/impls/external/blzpack/blzpack.c
@@ -418,7 +418,7 @@ PetscErrorCode EPSBlzpackSetNSteps(EPS eps,PetscInt nsteps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_BLZPACK(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_BLZPACK(EPS eps)
 {
   PetscErrorCode ierr;
   EPS_BLZPACK    *blzpack;
diff --git a/src/eps/impls/external/blzpack/blzpackp.h b/src/eps/impls/external/blzpack/blzpackp.h
index 22175bec1..5090b94c9 100644
--- a/src/eps/impls/external/blzpack/blzpackp.h
+++ b/src/eps/impls/external/blzpack/blzpackp.h
@@ -54,10 +54,10 @@ typedef struct {
 #define BLZistorr_ SLEPC_BLZPACK(istorr,ISTORR)
 #define BLZrstorr_ SLEPC_BLZPACK(rstorr,RSTORR)
 
-PETSC_EXTERN void BLZpack_(PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*);
+SLEPC_EXTERN void BLZpack_(PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*);
 
-PETSC_EXTERN PetscBLASInt BLZistorr_(PetscBLASInt*,const char*,int);
-PETSC_EXTERN PetscReal BLZrstorr_(PetscReal*,char*,int);
+SLEPC_EXTERN PetscBLASInt BLZistorr_(PetscBLASInt*,const char*,int);
+SLEPC_EXTERN PetscReal BLZrstorr_(PetscReal*,char*,int);
 
 #endif
 
diff --git a/src/eps/impls/external/feast/feast.c b/src/eps/impls/external/feast/feast.c
index a8ca211c4..4dfd4794b 100644
--- a/src/eps/impls/external/feast/feast.c
+++ b/src/eps/impls/external/feast/feast.c
@@ -294,7 +294,7 @@ PetscErrorCode EPSFEASTGetNumPoints(EPS eps,PetscInt *npoints)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_FEAST(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_FEAST(EPS eps)
 {
   EPS_FEAST      *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/external/feast/feastp.h b/src/eps/impls/external/feast/feastp.h
index fee109f44..188c28bd5 100644
--- a/src/eps/impls/external/feast/feastp.h
+++ b/src/eps/impls/external/feast/feastp.h
@@ -84,8 +84,8 @@ typedef struct {
 #define FEASTinit_(a) SLEPC_FEAST(feastinit,FEASTINIT) ((a))
 #define FEASTrci_(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) SLEPC_FEASTM(rci,RCI) ((a),(b),(c),(d),(e),(f),(g),(h),(i),(j),(k),(l),(m),(n),(o),(p),(q),(r))
 
-PETSC_EXTERN void   SLEPC_FEAST(feastinit,FEASTINIT)(PetscBLASInt*);
-PETSC_EXTERN void   SLEPC_FEASTM(rci,RCI)(PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void   SLEPC_FEAST(feastinit,FEASTINIT)(PetscBLASInt*);
+SLEPC_EXTERN void   SLEPC_FEASTM(rci,RCI)(PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscReal*,PetscBLASInt*,PetscReal*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
 
 #endif
 
diff --git a/src/eps/impls/external/primme/primme.c b/src/eps/impls/external/primme/primme.c
index 1a214372a..6967d1aa6 100644
--- a/src/eps/impls/external/primme/primme.c
+++ b/src/eps/impls/external/primme/primme.c
@@ -434,7 +434,7 @@ PetscErrorCode EPSPRIMMEGetMethod(EPS eps,EPSPRIMMEMethod *method)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_PRIMME(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_PRIMME(EPS eps)
 {
   PetscErrorCode ierr;
   EPS_PRIMME     *primme;
diff --git a/src/eps/impls/external/trlan/trlan.c b/src/eps/impls/external/trlan/trlan.c
index 640fe36c2..01e7dbcf7 100644
--- a/src/eps/impls/external/trlan/trlan.c
+++ b/src/eps/impls/external/trlan/trlan.c
@@ -161,7 +161,7 @@ PetscErrorCode EPSDestroy_TRLAN(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_TRLAN(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_TRLAN(EPS eps)
 {
   EPS_TRLAN      *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/external/trlan/trlanp.h b/src/eps/impls/external/trlan/trlanp.h
index 538c948b4..1b0fb9609 100644
--- a/src/eps/impls/external/trlan/trlanp.h
+++ b/src/eps/impls/external/trlan/trlanp.h
@@ -34,7 +34,7 @@ typedef struct {
 #define TRLan_ trlan77
 #endif
 
-PETSC_EXTERN void TRLan_(PetscBLASInt(*op)(PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*),PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
+SLEPC_EXTERN void TRLan_(PetscBLASInt(*op)(PetscBLASInt*,PetscBLASInt*,PetscReal*,PetscBLASInt*,PetscReal*,PetscBLASInt*),PetscBLASInt*,PetscBLASInt*,PetscBLASInt*,PetscScalar*,PetscScalar*,PetscBLASInt*,PetscReal*,PetscBLASInt*);
 
 #endif
 
diff --git a/src/eps/impls/krylov/arnoldi/arnoldi.c b/src/eps/impls/krylov/arnoldi/arnoldi.c
index 2a19243d8..7a95cd843 100644
--- a/src/eps/impls/krylov/arnoldi/arnoldi.c
+++ b/src/eps/impls/krylov/arnoldi/arnoldi.c
@@ -258,7 +258,7 @@ PetscErrorCode EPSView_Arnoldi(EPS eps,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_Arnoldi(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_Arnoldi(EPS eps)
 {
   EPS_ARNOLDI    *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/krylov/krylovschur/ftn-custom/zkrylovschurf.c b/src/eps/impls/krylov/krylovschur/ftn-custom/zkrylovschurf.c
index 03bd77a83..d9dfbdbe8 100644
--- a/src/eps/impls/krylov/krylovschur/ftn-custom/zkrylovschurf.c
+++ b/src/eps/impls/krylov/krylovschur/ftn-custom/zkrylovschurf.c
@@ -29,13 +29,13 @@
 #define epskrylovschurupdatesubcommmats_  epskrylovschurupdatesubcommmats
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschursetsubintervals_(EPS *eps,PetscReal *subint,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschursetsubintervals_(EPS *eps,PetscReal *subint,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLREAL(subint);
   *ierr = EPSKrylovSchurSetSubintervals(*eps,subint);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetsubintervals_(EPS *eps,PetscReal *subint,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschurgetsubintervals_(EPS *eps,PetscReal *subint,PetscErrorCode *ierr)
 {
   PetscReal *osubint;
   PetscInt  npart;
@@ -47,7 +47,7 @@ PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetsubintervals_(EPS *eps,PetscRea
   *ierr = PetscFree(osubint);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetinertias_(EPS *eps,PetscInt *nshift,PetscReal *shifts,PetscInt *inertias,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschurgetinertias_(EPS *eps,PetscInt *nshift,PetscReal *shifts,PetscInt *inertias,PetscErrorCode *ierr)
 {
   PetscReal *oshifts;
   PetscInt  *oinertias;
@@ -63,26 +63,26 @@ PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetinertias_(EPS *eps,PetscInt *ns
   *ierr = PetscFree(oinertias);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetsubcomminfo_(EPS *eps,PetscInt *k,PetscInt *n,Vec *v,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschurgetsubcomminfo_(EPS *eps,PetscInt *k,PetscInt *n,Vec *v,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(v);
   *ierr = EPSKrylovSchurGetSubcommInfo(*eps,k,n,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetsubcommpairs_(EPS *eps,PetscInt *i,PetscScalar *eig,Vec *v,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschurgetsubcommpairs_(EPS *eps,PetscInt *i,PetscScalar *eig,Vec *v,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECTDEREFERENCE(v);
   *ierr = EPSKrylovSchurGetSubcommPairs(*eps,*i,eig,*v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschurgetsubcommmats_(EPS *eps,Mat *A,Mat *B,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschurgetsubcommmats_(EPS *eps,Mat *A,Mat *B,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(A);
   CHKFORTRANNULLOBJECT(B);
   *ierr = EPSKrylovSchurGetSubcommMats(*eps,A,B);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epskrylovschurupdatesubcommmats_(EPS *eps,PetscScalar *s,PetscScalar *a,Mat *Au,PetscScalar *t,PetscScalar *b,Mat *Bu,MatStructure *str,PetscBool *globalup,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epskrylovschurupdatesubcommmats_(EPS *eps,PetscScalar *s,PetscScalar *a,Mat *Au,PetscScalar *t,PetscScalar *b,Mat *Bu,MatStructure *str,PetscBool *globalup,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECTDEREFERENCE(Au);
   CHKFORTRANNULLOBJECTDEREFERENCE(Bu);
diff --git a/src/eps/impls/krylov/krylovschur/krylovschur.c b/src/eps/impls/krylov/krylovschur/krylovschur.c
index 52b0fd0f9..edae974d8 100644
--- a/src/eps/impls/krylov/krylovschur/krylovschur.c
+++ b/src/eps/impls/krylov/krylovschur/krylovschur.c
@@ -1374,7 +1374,7 @@ PetscErrorCode EPSSetDefaultST_KrylovSchur(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_KrylovSchur(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_KrylovSchur(EPS eps)
 {
   EPS_KRYLOVSCHUR *ctx;
   PetscErrorCode  ierr;
diff --git a/src/eps/impls/krylov/lanczos/lanczos.c b/src/eps/impls/krylov/lanczos/lanczos.c
index 1d4780ff8..6288b2b2c 100644
--- a/src/eps/impls/krylov/lanczos/lanczos.c
+++ b/src/eps/impls/krylov/lanczos/lanczos.c
@@ -857,7 +857,7 @@ PetscErrorCode EPSView_Lanczos(EPS eps,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_Lanczos(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_Lanczos(EPS eps)
 {
   EPS_LANCZOS    *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/lapack/lapack.c b/src/eps/impls/lapack/lapack.c
index b72bc2a9b..0e65613c1 100644
--- a/src/eps/impls/lapack/lapack.c
+++ b/src/eps/impls/lapack/lapack.c
@@ -166,7 +166,7 @@ PetscErrorCode EPSSolve_LAPACK(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_LAPACK(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_LAPACK(EPS eps)
 {
   PetscFunctionBegin;
   eps->useds = PETSC_TRUE;
diff --git a/src/eps/impls/power/power.c b/src/eps/impls/power/power.c
index b1c644029..73e99b61d 100644
--- a/src/eps/impls/power/power.c
+++ b/src/eps/impls/power/power.c
@@ -984,7 +984,7 @@ PetscErrorCode EPSSetDefaultST_Power(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_Power(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_Power(EPS eps)
 {
   EPS_POWER      *ctx;
   PetscErrorCode ierr;
diff --git a/src/eps/impls/subspace/subspace.c b/src/eps/impls/subspace/subspace.c
index 25d535381..d286bc148 100644
--- a/src/eps/impls/subspace/subspace.c
+++ b/src/eps/impls/subspace/subspace.c
@@ -291,7 +291,7 @@ PetscErrorCode EPSDestroy_Subspace(EPS eps)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode EPSCreate_Subspace(EPS eps)
+SLEPC_EXTERN PetscErrorCode EPSCreate_Subspace(EPS eps)
 {
   PetscFunctionBegin;
   eps->useds = PETSC_TRUE;
diff --git a/src/eps/interface/dlregiseps.c b/src/eps/interface/dlregiseps.c
index b633a4ded..8993d66f6 100644
--- a/src/eps/interface/dlregiseps.c
+++ b/src/eps/interface/dlregiseps.c
@@ -91,7 +91,7 @@ PetscErrorCode EPSInitializePackage()
   This one registers all the EPS methods that are in the basic SLEPc libslepceps
   library.
  */
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepceps()
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepceps()
 {
   PetscErrorCode ierr;
 
diff --git a/src/eps/interface/epsdefault.c b/src/eps/interface/epsdefault.c
index 21cd3f03f..d2b120ccb 100644
--- a/src/eps/interface/epsdefault.c
+++ b/src/eps/interface/epsdefault.c
@@ -204,7 +204,7 @@ PetscErrorCode EPSComputeVectors_Schur(EPS eps)
 -  nw  - number of work vectors to allocate
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin EPS
+   This is SLEPC_EXTERN because it may be required by user plugin EPS
    implementations.
 
    Level: developer
diff --git a/src/eps/interface/epsregis.c b/src/eps/interface/epsregis.c
index b81e24a02..7dd379938 100644
--- a/src/eps/interface/epsregis.c
+++ b/src/eps/interface/epsregis.c
@@ -10,35 +10,35 @@
 
 #include <slepc/private/epsimpl.h>  /*I "slepceps.h" I*/
 
-PETSC_EXTERN PetscErrorCode EPSCreate_Power(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_Subspace(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_Arnoldi(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_Lanczos(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_KrylovSchur(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_Power(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_Subspace(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_Arnoldi(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_Lanczos(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_KrylovSchur(EPS);
 #if defined(SLEPC_HAVE_ARPACK)
-PETSC_EXTERN PetscErrorCode EPSCreate_ARPACK(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_ARPACK(EPS);
 #endif
-PETSC_EXTERN PetscErrorCode EPSCreate_LAPACK(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_LAPACK(EPS);
 #if defined(SLEPC_HAVE_BLZPACK)
-PETSC_EXTERN PetscErrorCode EPSCreate_BLZPACK(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_BLZPACK(EPS);
 #endif
 #if defined(SLEPC_HAVE_TRLAN)
-PETSC_EXTERN PetscErrorCode EPSCreate_TRLAN(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_TRLAN(EPS);
 #endif
 #if defined(SLEPC_HAVE_BLOPEX)
-PETSC_EXTERN PetscErrorCode EPSCreate_BLOPEX(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_BLOPEX(EPS);
 #endif
 #if defined(SLEPC_HAVE_PRIMME)
-PETSC_EXTERN PetscErrorCode EPSCreate_PRIMME(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_PRIMME(EPS);
 #endif
 #if defined(SLEPC_HAVE_FEAST)
-PETSC_EXTERN PetscErrorCode EPSCreate_FEAST(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_FEAST(EPS);
 #endif
-PETSC_EXTERN PetscErrorCode EPSCreate_GD(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_JD(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_RQCG(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_LOBPCG(EPS);
-PETSC_EXTERN PetscErrorCode EPSCreate_CISS(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_GD(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_JD(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_RQCG(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_LOBPCG(EPS);
+SLEPC_EXTERN PetscErrorCode EPSCreate_CISS(EPS);
 
 /*@C
   EPSRegisterAll - Registers all the eigenvalue solvers in the EPS package.
diff --git a/src/eps/interface/epssetup.c b/src/eps/interface/epssetup.c
index 9665a82dd..21395637b 100644
--- a/src/eps/interface/epssetup.c
+++ b/src/eps/interface/epssetup.c
@@ -506,7 +506,7 @@ PetscErrorCode EPSSetDimensions_Default(EPS eps,PetscInt nev,PetscInt *ncv,Petsc
            working basis slightly larger than ncv
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin EPS
+   This is SLEPC_EXTERN because it may be required by user plugin EPS
    implementations.
 
    Level: developer
diff --git a/src/eps/interface/ftn-custom/zepsf.c b/src/eps/interface/ftn-custom/zepsf.c
index 3685d9049..8892645e7 100644
--- a/src/eps/interface/ftn-custom/zepsf.c
+++ b/src/eps/interface/ftn-custom/zepsf.c
@@ -122,27 +122,27 @@
    These are not usually called from Fortran but allow Fortran users
    to transparently set these monitors from .F code, hence no STDCALL
 */
-PETSC_EXTERN void epsmonitorall_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void epsmonitorall_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSMonitorAll(*eps,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void epsmonitorconverged_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void epsmonitorconverged_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSMonitorConverged(*eps,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void epsmonitorfirst_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void epsmonitorfirst_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSMonitorFirst(*eps,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void epsmonitorlg_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void epsmonitorlg_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSMonitorLG(*eps,*it,*nconv,eigr,eigi,errest,*nest,ctx);
 }
 
-PETSC_EXTERN void epsmonitorlgall_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void epsmonitorlgall_(EPS *eps,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSMonitorLGAll(*eps,*it,*nconv,eigr,eigi,errest,*nest,ctx);
 }
@@ -204,42 +204,42 @@ static PetscErrorCode ourarbitraryfunc(PetscScalar er,PetscScalar ei,Vec xr,Vec
   PetscObjectUseFortranCallback(eps,_cb.arbitrary,(PetscScalar*,PetscScalar*,Vec*,Vec*,PetscScalar*,PetscScalar*,void*,PetscErrorCode*),(&er,&ei,&xr,&xi,rr,ri,_ctx,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = EPSView(*eps,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsreasonview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsreasonview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = EPSReasonView(*eps,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epserrorview_(EPS *eps,EPSErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epserrorview_(EPS *eps,EPSErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = EPSErrorView(*eps,*etype,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsvaluesview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsvaluesview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = EPSValuesView(*eps,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsvectorsview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsvectorsview_(EPS *eps,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = EPSVectorsView(*eps,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssettype_(EPS *eps,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL epssettype_(EPS *eps,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -248,7 +248,7 @@ PETSC_EXTERN void PETSC_STDCALL epssettype_(EPS *eps,char *type PETSC_MIXED_LEN(
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgettype_(EPS *eps,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL epsgettype_(EPS *eps,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   EPSType tname;
 
@@ -257,7 +257,7 @@ PETSC_EXTERN void PETSC_STDCALL epsgettype_(EPS *eps,char *name PETSC_MIXED_LEN(
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetoptionsprefix_(EPS *eps,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL epssetoptionsprefix_(EPS *eps,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -266,7 +266,7 @@ PETSC_EXTERN void PETSC_STDCALL epssetoptionsprefix_(EPS *eps,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsappendoptionsprefix_(EPS *eps,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL epsappendoptionsprefix_(EPS *eps,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -275,7 +275,7 @@ PETSC_EXTERN void PETSC_STDCALL epsappendoptionsprefix_(EPS *eps,char *prefix PE
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetoptionsprefix_(EPS *eps,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL epsgetoptionsprefix_(EPS *eps,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -284,7 +284,7 @@ PETSC_EXTERN void PETSC_STDCALL epsgetoptionsprefix_(EPS *eps,char *prefix PETSC
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsmonitorset_(EPS *eps,void (PETSC_STDCALL *monitor)(EPS*,PetscInt*,PetscInt*,PetscScalar*,PetscScalar*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsmonitorset_(EPS *eps,void (PETSC_STDCALL *monitor)(EPS*,PetscInt*,PetscInt*,PetscScalar*,PetscScalar*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(mctx);
   CHKFORTRANNULLFUNCTION(monitordestroy);
@@ -305,22 +305,22 @@ PETSC_EXTERN void PETSC_STDCALL epsmonitorset_(EPS *eps,void (PETSC_STDCALL *mon
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsconvergedabsolute_(EPS *eps,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsconvergedabsolute_(EPS *eps,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSConvergedAbsolute(*eps,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsconvergedrelative_(EPS *eps,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsconvergedrelative_(EPS *eps,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSConvergedRelative(*eps,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsconvergednorm_(EPS *eps,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsconvergednorm_(EPS *eps,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSConvergedNorm(*eps,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetconvergencetestfunction_(EPS *eps,void (PETSC_STDCALL *func)(EPS*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epssetconvergencetestfunction_(EPS *eps,void (PETSC_STDCALL *func)(EPS*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -337,12 +337,12 @@ PETSC_EXTERN void PETSC_STDCALL epssetconvergencetestfunction_(EPS *eps,void (PE
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsstoppingbasic_(EPS *eps,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nev,EPSConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsstoppingbasic_(EPS *eps,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nev,EPSConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = EPSStoppingBasic(*eps,*its,*max_it,*nconv,*nev,reason,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetstoppingtestfunction_(EPS *eps,void (PETSC_STDCALL *func)(EPS*,PetscInt,PetscInt,PetscInt,PetscInt,EPSConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epssetstoppingtestfunction_(EPS *eps,void (PETSC_STDCALL *func)(EPS*,PetscInt,PetscInt,PetscInt,PetscInt,EPSConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -355,21 +355,21 @@ PETSC_EXTERN void PETSC_STDCALL epssetstoppingtestfunction_(EPS *eps,void (PETSC
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsseteigenvaluecomparison_(EPS *eps,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*),void* ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsseteigenvaluecomparison_(EPS *eps,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*),void* ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   *ierr = PetscObjectSetFortranCallback((PetscObject)*eps,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.comparison,(PetscVoidFunction)func,ctx); if (*ierr) return;
   *ierr = EPSSetEigenvalueComparison(*eps,oureigenvaluecomparison,*eps);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetarbitraryselection_(EPS *eps,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,Vec*,Vec*,PetscScalar*,PetscScalar*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epssetarbitraryselection_(EPS *eps,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,Vec*,Vec*,PetscScalar*,PetscScalar*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   *ierr = PetscObjectSetFortranCallback((PetscObject)*eps,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.arbitrary,(PetscVoidFunction)func,ctx); if (*ierr) return;
   *ierr = EPSSetArbitrarySelection(*eps,ourarbitraryfunc,*eps);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   CHKFORTRANNULLINTEGER(nev);
   CHKFORTRANNULLINTEGER(ncv);
@@ -377,49 +377,49 @@ PETSC_EXTERN void PETSC_STDCALL epsgetdimensions_(EPS *eps,PetscInt *nev,PetscIn
   *ierr = EPSGetDimensions(*eps,nev,ncv,mpd);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions000_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions000_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions100_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions100_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions010_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions010_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions001_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions001_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions110_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions110_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions011_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions011_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetdimensions101_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetdimensions101_(EPS *eps,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   epsgetdimensions_(eps,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetoperators_(EPS *eps,Mat *A,Mat *B,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epssetoperators_(EPS *eps,Mat *A,Mat *B,int *ierr)
 {
   CHKFORTRANNULLOBJECTDEREFERENCE(A);
   CHKFORTRANNULLOBJECTDEREFERENCE(B);
   *ierr = EPSSetOperators(*eps,*A,*B);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenpair_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenpair_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   CHKFORTRANNULLSCALAR(eigr);
   CHKFORTRANNULLSCALAR(eigi);
@@ -428,78 +428,78 @@ PETSC_EXTERN void PETSC_STDCALL epsgeteigenpair_(EPS *eps,PetscInt *i,PetscScala
   *ierr = EPSGetEigenpair(*eps,*i,eigr,eigi,*Vr,*Vi);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenpair00_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenpair00_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   epsgeteigenpair_(eps,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenpair10_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenpair10_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   epsgeteigenpair_(eps,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenpair01_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenpair01_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   epsgeteigenpair_(eps,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenpair11_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenpair11_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   epsgeteigenpair_(eps,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenvalue_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenvalue_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
 {
   CHKFORTRANNULLSCALAR(eigr);
   CHKFORTRANNULLSCALAR(eigi);
   *ierr = EPSGetEigenvalue(*eps,*i,eigr,eigi);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenvalue00_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenvalue00_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
 {
   epsgeteigenvalue_(eps,i,eigr,eigi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenvalue10_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenvalue10_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
 {
   epsgeteigenvalue_(eps,i,eigr,eigi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenvalue01_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenvalue01_(EPS *eps,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,int *ierr)
 {
   epsgeteigenvalue_(eps,i,eigr,eigi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgeteigenvector_(EPS *eps,PetscInt *i,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgeteigenvector_(EPS *eps,PetscInt *i,Vec *Vr,Vec *Vi,int *ierr)
 {
   CHKFORTRANNULLOBJECTDEREFERENCE(Vr);
   CHKFORTRANNULLOBJECTDEREFERENCE(Vi);
   *ierr = EPSGetEigenvector(*eps,*i,*Vr,*Vi);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgettolerances_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgettolerances_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   CHKFORTRANNULLREAL(tol);
   CHKFORTRANNULLINTEGER(maxits);
   *ierr = EPSGetTolerances(*eps,tol,maxits);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgettolerances00_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgettolerances00_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   epsgettolerances_(eps,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgettolerances10_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgettolerances10_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   epsgettolerances_(eps,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgettolerances01_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgettolerances01_(EPS *eps,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   epsgettolerances_(eps,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   CHKFORTRANNULLINTEGER(bal);
   CHKFORTRANNULLINTEGER(its);
@@ -507,47 +507,47 @@ PETSC_EXTERN void PETSC_STDCALL epsgetbalance_(EPS *eps,EPSBalance *bal,PetscInt
   *ierr = EPSGetBalance(*eps,bal,its,cutoff);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance000_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance000_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance100_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance100_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance010_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance010_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance001_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance001_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance110_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance110_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance011_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance011_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epsgetbalance101_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epsgetbalance101_(EPS *eps,EPSBalance *bal,PetscInt *its,PetscReal *cutoff,int *ierr)
 {
   epsgetbalance_(eps,bal,its,cutoff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetinitialspace0_(EPS *eps,PetscInt *n,Vec *is,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epssetinitialspace0_(EPS *eps,PetscInt *n,Vec *is,int *ierr)
 {
   *ierr = EPSSetInitialSpace(*eps,*n,is);
 }
 
-PETSC_EXTERN void PETSC_STDCALL epssetinitialspace1_(EPS *eps,PetscInt *n,Vec *is,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL epssetinitialspace1_(EPS *eps,PetscInt *n,Vec *is,int *ierr)
 {
   *ierr = EPSSetInitialSpace(*eps,*n,is);
 }
diff --git a/src/lme/impls/krylov/lmekrylov.c b/src/lme/impls/krylov/lmekrylov.c
index 75ce9987c..2b46f803f 100644
--- a/src/lme/impls/krylov/lmekrylov.c
+++ b/src/lme/impls/krylov/lmekrylov.c
@@ -233,7 +233,7 @@ PetscErrorCode LMESolve_Krylov_Lyapunov(LME lme)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode LMECreate_Krylov(LME lme)
+SLEPC_EXTERN PetscErrorCode LMECreate_Krylov(LME lme)
 {
   PetscFunctionBegin;
   lme->ops->solve[LME_LYAPUNOV]      = LMESolve_Krylov_Lyapunov;
diff --git a/src/lme/interface/dlregislme.c b/src/lme/interface/dlregislme.c
index 6310b67d0..8ecc44822 100644
--- a/src/lme/interface/dlregislme.c
+++ b/src/lme/interface/dlregislme.c
@@ -86,7 +86,7 @@ PetscErrorCode LMEInitializePackage(void)
   This one registers all the LME methods that are in the basic SLEPc libslepclme
   library.
  */
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepclme()
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepclme()
 {
   PetscErrorCode ierr;
 
diff --git a/src/lme/interface/ftn-custom/zlmef.c b/src/lme/interface/ftn-custom/zlmef.c
index 271b708b0..00568c543 100644
--- a/src/lme/interface/ftn-custom/zlmef.c
+++ b/src/lme/interface/ftn-custom/zlmef.c
@@ -45,12 +45,12 @@
    These are not usually called from Fortran but allow Fortran users
    to transparently set these monitors from .F code, hence no STDCALL
 */
-PETSC_EXTERN void lmemonitordefault_(LME *lme,PetscInt *it,PetscReal *errest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void lmemonitordefault_(LME *lme,PetscInt *it,PetscReal *errest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = LMEMonitorDefault(*lme,*it,*errest,*ctx);
 }
 
-PETSC_EXTERN void lmemonitorlg_(LME *lme,PetscInt *it,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void lmemonitorlg_(LME *lme,PetscInt *it,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = LMEMonitorLG(*lme,*it,*errest,ctx);
 }
@@ -72,21 +72,21 @@ static PetscErrorCode ourdestroy(void** ctx)
   PetscObjectUseFortranCallback(lme,_cb.monitordestroy,(void*,PetscErrorCode*),(_ctx,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmeview_(LME *lme,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmeview_(LME *lme,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = LMEView(*lme,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmereasonview_(LME *lme,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmereasonview_(LME *lme,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = LMEReasonView(*lme,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmesettype_(LME *lme,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL lmesettype_(LME *lme,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -95,7 +95,7 @@ PETSC_EXTERN void PETSC_STDCALL lmesettype_(LME *lme,char *type PETSC_MIXED_LEN(
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmegettype_(LME *lme,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL lmegettype_(LME *lme,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   LMEType tname;
 
@@ -104,7 +104,7 @@ PETSC_EXTERN void PETSC_STDCALL lmegettype_(LME *lme,char *name PETSC_MIXED_LEN(
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmesetoptionsprefix_(LME *lme,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL lmesetoptionsprefix_(LME *lme,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -113,7 +113,7 @@ PETSC_EXTERN void PETSC_STDCALL lmesetoptionsprefix_(LME *lme,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmeappendoptionsprefix_(LME *lme,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL lmeappendoptionsprefix_(LME *lme,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -122,7 +122,7 @@ PETSC_EXTERN void PETSC_STDCALL lmeappendoptionsprefix_(LME *lme,char *prefix PE
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmegetoptionsprefix_(LME *lme,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL lmegetoptionsprefix_(LME *lme,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -131,7 +131,7 @@ PETSC_EXTERN void PETSC_STDCALL lmegetoptionsprefix_(LME *lme,char *prefix PETSC
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmemonitorset_(LME *lme,void (PETSC_STDCALL *monitor)(LME*,PetscInt*,PetscReal*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmemonitorset_(LME *lme,void (PETSC_STDCALL *monitor)(LME*,PetscInt*,PetscReal*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(mctx);
   CHKFORTRANNULLFUNCTION(monitordestroy);
@@ -146,24 +146,24 @@ PETSC_EXTERN void PETSC_STDCALL lmemonitorset_(LME *lme,void (PETSC_STDCALL *mon
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmegettolerances_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmegettolerances_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   CHKFORTRANNULLREAL(tol);
   CHKFORTRANNULLINTEGER(maxits);
   *ierr = LMEGetTolerances(*lme,tol,maxits);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmegettolerances00_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmegettolerances00_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   lmegettolerances_(lme,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmegettolerances10_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmegettolerances10_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   lmegettolerances_(lme,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL lmegettolerances01_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL lmegettolerances01_(LME *lme,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   lmegettolerances_(lme,tol,maxits,ierr);
 }
diff --git a/src/lme/interface/lmeregis.c b/src/lme/interface/lmeregis.c
index b7526f136..9ae96da46 100644
--- a/src/lme/interface/lmeregis.c
+++ b/src/lme/interface/lmeregis.c
@@ -10,7 +10,7 @@
 
 #include <slepc/private/lmeimpl.h>  /*I "slepclme.h" I*/
 
-PETSC_EXTERN PetscErrorCode LMECreate_Krylov(LME);
+SLEPC_EXTERN PetscErrorCode LMECreate_Krylov(LME);
 
 /*@C
   LMERegisterAll - Registers all the matrix functions in the LME package.
diff --git a/src/lme/interface/lmesetup.c b/src/lme/interface/lmesetup.c
index 9004f1de6..3552c1d13 100644
--- a/src/lme/interface/lmesetup.c
+++ b/src/lme/interface/lmesetup.c
@@ -418,7 +418,7 @@ PetscErrorCode LMEGetSolution(LME lme,Mat *X)
            working basis slightly larger than ncv
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin LME
+   This is SLEPC_EXTERN because it may be required by user plugin LME
    implementations.
 
    Level: developer
diff --git a/src/mfn/impls/expokit/mfnexpokit.c b/src/mfn/impls/expokit/mfnexpokit.c
index 0a37a066d..71c976fd8 100644
--- a/src/mfn/impls/expokit/mfnexpokit.c
+++ b/src/mfn/impls/expokit/mfnexpokit.c
@@ -180,7 +180,7 @@ PetscErrorCode MFNSolve_Expokit(MFN mfn,Vec b,Vec x)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode MFNCreate_Expokit(MFN mfn)
+SLEPC_EXTERN PetscErrorCode MFNCreate_Expokit(MFN mfn)
 {
   PetscFunctionBegin;
   mfn->ops->solve          = MFNSolve_Expokit;
diff --git a/src/mfn/impls/krylov/mfnkrylov.c b/src/mfn/impls/krylov/mfnkrylov.c
index e9ee536a2..8979bcbda 100644
--- a/src/mfn/impls/krylov/mfnkrylov.c
+++ b/src/mfn/impls/krylov/mfnkrylov.c
@@ -166,7 +166,7 @@ PetscErrorCode MFNSolve_Krylov(MFN mfn,Vec b,Vec x)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode MFNCreate_Krylov(MFN mfn)
+SLEPC_EXTERN PetscErrorCode MFNCreate_Krylov(MFN mfn)
 {
   PetscFunctionBegin;
   mfn->ops->solve          = MFNSolve_Krylov;
diff --git a/src/mfn/interface/dlregismfn.c b/src/mfn/interface/dlregismfn.c
index 422303203..f57cacb59 100644
--- a/src/mfn/interface/dlregismfn.c
+++ b/src/mfn/interface/dlregismfn.c
@@ -84,7 +84,7 @@ PetscErrorCode MFNInitializePackage(void)
   This one registers all the MFN methods that are in the basic SLEPc libslepcmfn
   library.
  */
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcmfn()
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcmfn()
 {
   PetscErrorCode ierr;
 
diff --git a/src/mfn/interface/ftn-custom/zmfnf.c b/src/mfn/interface/ftn-custom/zmfnf.c
index 7e3f255d7..685df7681 100644
--- a/src/mfn/interface/ftn-custom/zmfnf.c
+++ b/src/mfn/interface/ftn-custom/zmfnf.c
@@ -45,12 +45,12 @@
    These are not usually called from Fortran but allow Fortran users
    to transparently set these monitors from .F code, hence no STDCALL
 */
-PETSC_EXTERN void mfnmonitordefault_(MFN *mfn,PetscInt *it,PetscReal *errest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void mfnmonitordefault_(MFN *mfn,PetscInt *it,PetscReal *errest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = MFNMonitorDefault(*mfn,*it,*errest,*ctx);
 }
 
-PETSC_EXTERN void mfnmonitorlg_(MFN *mfn,PetscInt *it,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void mfnmonitorlg_(MFN *mfn,PetscInt *it,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = MFNMonitorLG(*mfn,*it,*errest,ctx);
 }
@@ -72,21 +72,21 @@ static PetscErrorCode ourdestroy(void** ctx)
   PetscObjectUseFortranCallback(mfn,_cb.monitordestroy,(void*,PetscErrorCode*),(_ctx,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfnview_(MFN *mfn,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfnview_(MFN *mfn,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = MFNView(*mfn,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfnreasonview_(MFN *mfn,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfnreasonview_(MFN *mfn,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = MFNReasonView(*mfn,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfnsettype_(MFN *mfn,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL mfnsettype_(MFN *mfn,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -95,7 +95,7 @@ PETSC_EXTERN void PETSC_STDCALL mfnsettype_(MFN *mfn,char *type PETSC_MIXED_LEN(
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfngettype_(MFN *mfn,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL mfngettype_(MFN *mfn,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   MFNType tname;
 
@@ -104,7 +104,7 @@ PETSC_EXTERN void PETSC_STDCALL mfngettype_(MFN *mfn,char *name PETSC_MIXED_LEN(
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfnsetoptionsprefix_(MFN *mfn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL mfnsetoptionsprefix_(MFN *mfn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -113,7 +113,7 @@ PETSC_EXTERN void PETSC_STDCALL mfnsetoptionsprefix_(MFN *mfn,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfnappendoptionsprefix_(MFN *mfn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL mfnappendoptionsprefix_(MFN *mfn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -122,7 +122,7 @@ PETSC_EXTERN void PETSC_STDCALL mfnappendoptionsprefix_(MFN *mfn,char *prefix PE
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfngetoptionsprefix_(MFN *mfn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL mfngetoptionsprefix_(MFN *mfn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -131,7 +131,7 @@ PETSC_EXTERN void PETSC_STDCALL mfngetoptionsprefix_(MFN *mfn,char *prefix PETSC
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfnmonitorset_(MFN *mfn,void (PETSC_STDCALL *monitor)(MFN*,PetscInt*,PetscReal*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfnmonitorset_(MFN *mfn,void (PETSC_STDCALL *monitor)(MFN*,PetscInt*,PetscReal*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(mctx);
   CHKFORTRANNULLFUNCTION(monitordestroy);
@@ -146,24 +146,24 @@ PETSC_EXTERN void PETSC_STDCALL mfnmonitorset_(MFN *mfn,void (PETSC_STDCALL *mon
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfngettolerances_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfngettolerances_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   CHKFORTRANNULLREAL(tol);
   CHKFORTRANNULLINTEGER(maxits);
   *ierr = MFNGetTolerances(*mfn,tol,maxits);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfngettolerances00_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfngettolerances00_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   mfngettolerances_(mfn,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfngettolerances10_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfngettolerances10_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   mfngettolerances_(mfn,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL mfngettolerances01_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL mfngettolerances01_(MFN *mfn,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   mfngettolerances_(mfn,tol,maxits,ierr);
 }
diff --git a/src/mfn/interface/mfnregis.c b/src/mfn/interface/mfnregis.c
index 8ac481072..cb0c41305 100644
--- a/src/mfn/interface/mfnregis.c
+++ b/src/mfn/interface/mfnregis.c
@@ -10,8 +10,8 @@
 
 #include <slepc/private/mfnimpl.h>  /*I "slepcmfn.h" I*/
 
-PETSC_EXTERN PetscErrorCode MFNCreate_Krylov(MFN);
-PETSC_EXTERN PetscErrorCode MFNCreate_Expokit(MFN);
+SLEPC_EXTERN PetscErrorCode MFNCreate_Krylov(MFN);
+SLEPC_EXTERN PetscErrorCode MFNCreate_Expokit(MFN);
 
 /*@C
   MFNRegisterAll - Registers all the matrix functions in the MFN package.
diff --git a/src/mfn/interface/mfnsetup.c b/src/mfn/interface/mfnsetup.c
index 3bb0812c3..971eebca8 100644
--- a/src/mfn/interface/mfnsetup.c
+++ b/src/mfn/interface/mfnsetup.c
@@ -143,7 +143,7 @@ PetscErrorCode MFNGetOperator(MFN mfn,Mat *A)
            working basis slightly larger than ncv
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin MFN
+   This is SLEPC_EXTERN because it may be required by user plugin MFN
    implementations.
 
    Level: developer
diff --git a/src/nep/impls/ciss/nciss.c b/src/nep/impls/ciss/nciss.c
index ab8a06b90..f28c071f7 100644
--- a/src/nep/impls/ciss/nciss.c
+++ b/src/nep/impls/ciss/nciss.c
@@ -1123,7 +1123,7 @@ PetscErrorCode NEPView_CISS(NEP nep,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode NEPCreate_CISS(NEP nep)
+SLEPC_EXTERN PetscErrorCode NEPCreate_CISS(NEP nep)
 {
   PetscErrorCode ierr;
   NEP_CISS       *ctx = (NEP_CISS*)nep->data;
diff --git a/src/nep/impls/interpol/interpol.c b/src/nep/impls/interpol/interpol.c
index 862f04e00..16fca8316 100644
--- a/src/nep/impls/interpol/interpol.c
+++ b/src/nep/impls/interpol/interpol.c
@@ -475,7 +475,7 @@ PetscErrorCode NEPDestroy_Interpol(NEP nep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode NEPCreate_Interpol(NEP nep)
+SLEPC_EXTERN PetscErrorCode NEPCreate_Interpol(NEP nep)
 {
   PetscErrorCode ierr;
   NEP_INTERPOL   *ctx;
diff --git a/src/nep/impls/narnoldi/narnoldi.c b/src/nep/impls/narnoldi/narnoldi.c
index 3f31fe45c..354f43cee 100644
--- a/src/nep/impls/narnoldi/narnoldi.c
+++ b/src/nep/impls/narnoldi/narnoldi.c
@@ -299,7 +299,7 @@ PetscErrorCode NEPDestroy_NArnoldi(NEP nep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode NEPCreate_NArnoldi(NEP nep)
+SLEPC_EXTERN PetscErrorCode NEPCreate_NArnoldi(NEP nep)
 {
   PetscErrorCode ierr;
   NEP_NARNOLDI   *ctx;
diff --git a/src/nep/impls/nleigs/ftn-custom/znleigsf.c b/src/nep/impls/nleigs/ftn-custom/znleigsf.c
index 8f28af379..8ff49bd0c 100644
--- a/src/nep/impls/nleigs/ftn-custom/znleigsf.c
+++ b/src/nep/impls/nleigs/ftn-custom/znleigsf.c
@@ -26,7 +26,7 @@ static PetscErrorCode oursingularitiesfunc(NEP nep,PetscInt *maxnp,PetscScalar *
   PetscObjectUseFortranCallback(nep,_cb.singularities,(NEP*,PetscInt*,PetscScalar*,void*,PetscErrorCode*),(&nep,maxnp,xi,_ctx,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepnleigssetsingularitiesfunction_(NEP *nep,void (PETSC_STDCALL *func)(NEP*,PetscInt*,PetscScalar*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepnleigssetsingularitiesfunction_(NEP *nep,void (PETSC_STDCALL *func)(NEP*,PetscInt*,PetscScalar*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   *ierr = PetscObjectSetFortranCallback((PetscObject)*nep,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.singularities,(PetscVoidFunction)func,ctx); if (*ierr) return;
diff --git a/src/nep/impls/nleigs/nleigs.c b/src/nep/impls/nleigs/nleigs.c
index ddac356ac..35ce771a9 100644
--- a/src/nep/impls/nleigs/nleigs.c
+++ b/src/nep/impls/nleigs/nleigs.c
@@ -1876,7 +1876,7 @@ PetscErrorCode NEPDestroy_NLEIGS(NEP nep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode NEPCreate_NLEIGS(NEP nep)
+SLEPC_EXTERN PetscErrorCode NEPCreate_NLEIGS(NEP nep)
 {
   PetscErrorCode ierr;
   NEP_NLEIGS     *ctx;
diff --git a/src/nep/impls/rii/rii.c b/src/nep/impls/rii/rii.c
index 50b3084e0..6cfbd3aa2 100644
--- a/src/nep/impls/rii/rii.c
+++ b/src/nep/impls/rii/rii.c
@@ -549,7 +549,7 @@ PetscErrorCode NEPDestroy_RII(NEP nep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode NEPCreate_RII(NEP nep)
+SLEPC_EXTERN PetscErrorCode NEPCreate_RII(NEP nep)
 {
   PetscErrorCode ierr;
   NEP_RII        *ctx;
diff --git a/src/nep/impls/slp/slp.c b/src/nep/impls/slp/slp.c
index 0ed0c9f0d..718a8af05 100644
--- a/src/nep/impls/slp/slp.c
+++ b/src/nep/impls/slp/slp.c
@@ -257,7 +257,7 @@ PetscErrorCode NEPDestroy_SLP(NEP nep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode NEPCreate_SLP(NEP nep)
+SLEPC_EXTERN PetscErrorCode NEPCreate_SLP(NEP nep)
 {
   PetscErrorCode ierr;
   NEP_SLP        *ctx;
diff --git a/src/nep/interface/dlregisnep.c b/src/nep/interface/dlregisnep.c
index 1db504ad0..fb8e4c8b7 100644
--- a/src/nep/interface/dlregisnep.c
+++ b/src/nep/interface/dlregisnep.c
@@ -91,7 +91,7 @@ PetscErrorCode NEPInitializePackage(void)
   This one registers all the NEP methods that are in the basic SLEPc libslepcnep
   library.
  */
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcnep()
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcnep()
 {
   PetscErrorCode ierr;
 
diff --git a/src/nep/interface/ftn-custom/znepf.c b/src/nep/interface/ftn-custom/znepf.c
index 0ed8ec5d8..99a1c425a 100644
--- a/src/nep/interface/ftn-custom/znepf.c
+++ b/src/nep/interface/ftn-custom/znepf.c
@@ -119,27 +119,27 @@
    These are not usually called from Fortran but allow Fortran users
    to transparently set these monitors from .F code, hence no STDCALL
 */
-PETSC_EXTERN void nepmonitorall_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void nepmonitorall_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPMonitorAll(*nep,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void nepmonitorconverged_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void nepmonitorconverged_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPMonitorConverged(*nep,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void nepmonitorfirst_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void nepmonitorfirst_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPMonitorFirst(*nep,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void nepmonitorlg_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void nepmonitorlg_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPMonitorLG(*nep,*it,*nconv,eigr,eigi,errest,*nest,ctx);
 }
 
-PETSC_EXTERN void nepmonitorlgall_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void nepmonitorlgall_(NEP *nep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPMonitorLGAll(*nep,*it,*nconv,eigr,eigi,errest,*nest,ctx);
 }
@@ -218,42 +218,42 @@ static PetscErrorCode ournepjacobian(NEP nep,PetscScalar lambda,Mat J,void *ctx)
   PetscObjectUseFortranCallback(nep,_cb.jacobian,(NEP*,PetscScalar*,Mat*,void*,PetscErrorCode* PETSC_F90_2PTR_PROTO_NOVAR),(&nep,&lambda,&J,_ctx,&ierr PETSC_F90_2PTR_PARAM(ptr)));
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = NEPView(*nep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepreasonview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepreasonview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = NEPReasonView(*nep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL neperrorview_(NEP *nep,NEPErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL neperrorview_(NEP *nep,NEPErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = NEPErrorView(*nep,*etype,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepvaluesview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepvaluesview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = NEPValuesView(*nep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepvectorsview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepvectorsview_(NEP *nep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = NEPVectorsView(*nep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsettype_(NEP *nep,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL nepsettype_(NEP *nep,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -262,7 +262,7 @@ PETSC_EXTERN void PETSC_STDCALL nepsettype_(NEP *nep,char *type PETSC_MIXED_LEN(
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgettype_(NEP *nep,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL nepgettype_(NEP *nep,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   NEPType tname;
 
@@ -271,7 +271,7 @@ PETSC_EXTERN void PETSC_STDCALL nepgettype_(NEP *nep,char *name PETSC_MIXED_LEN(
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetoptionsprefix_(NEP *nep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL nepsetoptionsprefix_(NEP *nep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -280,7 +280,7 @@ PETSC_EXTERN void PETSC_STDCALL nepsetoptionsprefix_(NEP *nep,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepappendoptionsprefix_(NEP *nep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL nepappendoptionsprefix_(NEP *nep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -289,7 +289,7 @@ PETSC_EXTERN void PETSC_STDCALL nepappendoptionsprefix_(NEP *nep,char *prefix PE
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetoptionsprefix_(NEP *nep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL nepgetoptionsprefix_(NEP *nep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -298,7 +298,7 @@ PETSC_EXTERN void PETSC_STDCALL nepgetoptionsprefix_(NEP *nep,char *prefix PETSC
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepmonitorset_(NEP *nep,void (PETSC_STDCALL *monitor)(NEP*,PetscInt*,PetscInt*,PetscScalar*,PetscScalar*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepmonitorset_(NEP *nep,void (PETSC_STDCALL *monitor)(NEP*,PetscInt*,PetscInt*,PetscScalar*,PetscScalar*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(mctx);
   CHKFORTRANNULLFUNCTION(monitordestroy);
@@ -319,17 +319,17 @@ PETSC_EXTERN void PETSC_STDCALL nepmonitorset_(NEP *nep,void (PETSC_STDCALL *mon
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepconvergedabsolute_(NEP *nep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepconvergedabsolute_(NEP *nep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPConvergedAbsolute(*nep,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepconvergedrelative_(NEP *nep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepconvergedrelative_(NEP *nep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPConvergedRelative(*nep,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetconvergencetestfunction_(NEP *nep,void (PETSC_STDCALL *func)(NEP*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepsetconvergencetestfunction_(NEP *nep,void (PETSC_STDCALL *func)(NEP*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -344,12 +344,12 @@ PETSC_EXTERN void PETSC_STDCALL nepsetconvergencetestfunction_(NEP *nep,void (PE
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepstoppingbasic_(NEP *nep,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nev,NEPConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepstoppingbasic_(NEP *nep,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nev,NEPConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = NEPStoppingBasic(*nep,*its,*max_it,*nconv,*nev,reason,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetstoppingtestfunction_(NEP *nep,void (PETSC_STDCALL *func)(NEP*,PetscInt,PetscInt,PetscInt,PetscInt,NEPConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepsetstoppingtestfunction_(NEP *nep,void (PETSC_STDCALL *func)(NEP*,PetscInt,PetscInt,PetscInt,PetscInt,NEPConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -362,14 +362,14 @@ PETSC_EXTERN void PETSC_STDCALL nepsetstoppingtestfunction_(NEP *nep,void (PETSC
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepseteigenvaluecomparison_(NEP *nep,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*),void* ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepseteigenvaluecomparison_(NEP *nep,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*),void* ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   *ierr = PetscObjectSetFortranCallback((PetscObject)*nep,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.comparison,(PetscVoidFunction)func,ctx); if (*ierr) return;
   *ierr = NEPSetEigenvalueComparison(*nep,oureigenvaluecomparison,*nep);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetfunction_(NEP *nep,Mat *A,Mat *B,void (PETSC_STDCALL *func)(NEP*,PetscScalar*,Mat*,Mat*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr PETSC_F90_2PTR_PROTO(ptr))
+SLEPC_EXTERN void PETSC_STDCALL nepsetfunction_(NEP *nep,Mat *A,Mat *B,void (PETSC_STDCALL *func)(NEP*,PetscScalar*,Mat*,Mat*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr PETSC_F90_2PTR_PROTO(ptr))
 {
   *ierr = PetscObjectSetFortranCallback((PetscObject)*nep,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.function,(PetscVoidFunction)func,ctx);if (*ierr) return;
 #if defined(PETSC_HAVE_F90_2PTR_ARG)
@@ -379,7 +379,7 @@ PETSC_EXTERN void PETSC_STDCALL nepsetfunction_(NEP *nep,Mat *A,Mat *B,void (PET
 }
 
 /* func is currently ignored from Fortran */
-PETSC_EXTERN void PETSC_STDCALL nepgetfunction_(NEP *nep,Mat *A,Mat *B,void *func,void **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetfunction_(NEP *nep,Mat *A,Mat *B,void *func,void **ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLINTEGER(ctx);
   CHKFORTRANNULLOBJECT(A);
@@ -388,7 +388,7 @@ PETSC_EXTERN void PETSC_STDCALL nepgetfunction_(NEP *nep,Mat *A,Mat *B,void *fun
   *ierr = PetscObjectGetFortranCallback((PetscObject)*nep,PETSC_FORTRAN_CALLBACK_CLASS,_cb.function,NULL,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetjacobian_(NEP *nep,Mat *J,void (PETSC_STDCALL *func)(NEP*,PetscScalar*,Mat*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr PETSC_F90_2PTR_PROTO(ptr))
+SLEPC_EXTERN void PETSC_STDCALL nepsetjacobian_(NEP *nep,Mat *J,void (PETSC_STDCALL *func)(NEP*,PetscScalar*,Mat*,void*,PetscErrorCode*),void *ctx,PetscErrorCode *ierr PETSC_F90_2PTR_PROTO(ptr))
 {
   *ierr = PetscObjectSetFortranCallback((PetscObject)*nep,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.jacobian,(PetscVoidFunction)func,ctx);if (*ierr) return;
 #if defined(PETSC_HAVE_F90_2PTR_ARG)
@@ -398,7 +398,7 @@ PETSC_EXTERN void PETSC_STDCALL nepsetjacobian_(NEP *nep,Mat *J,void (PETSC_STDC
 }
 
 /* func is currently ignored from Fortran */
-PETSC_EXTERN void PETSC_STDCALL nepgetjacobian_(NEP *nep,Mat *J,void *func,void **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetjacobian_(NEP *nep,Mat *J,void *func,void **ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLINTEGER(ctx);
   CHKFORTRANNULLOBJECT(J);
@@ -406,7 +406,7 @@ PETSC_EXTERN void PETSC_STDCALL nepgetjacobian_(NEP *nep,Mat *J,void *func,void
   *ierr = PetscObjectGetFortranCallback((PetscObject)*nep,PETSC_FORTRAN_CALLBACK_CLASS,_cb.jacobian,NULL,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   CHKFORTRANNULLINTEGER(nev);
   CHKFORTRANNULLINTEGER(ncv);
@@ -414,37 +414,37 @@ PETSC_EXTERN void PETSC_STDCALL nepgetdimensions_(NEP *nep,PetscInt *nev,PetscIn
   *ierr = NEPGetDimensions(*nep,nev,ncv,mpd);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions000_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions000_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   nepgetdimensions_(nep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions100_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions100_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   nepgetdimensions_(nep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions010_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions010_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   nepgetdimensions_(nep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions001_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions001_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   nepgetdimensions_(nep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions110_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions110_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   nepgetdimensions_(nep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetdimensions011_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetdimensions011_(NEP *nep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   nepgetdimensions_(nep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgeteigenpair_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgeteigenpair_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   CHKFORTRANNULLSCALAR(eigr);
   CHKFORTRANNULLSCALAR(eigi);
@@ -453,49 +453,49 @@ PETSC_EXTERN void PETSC_STDCALL nepgeteigenpair_(NEP *nep,PetscInt *i,PetscScala
   *ierr = NEPGetEigenpair(*nep,*i,eigr,eigi,*Vr,*Vi);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgeteigenpair00_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgeteigenpair00_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   nepgeteigenpair_(nep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgeteigenpair10_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgeteigenpair10_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   nepgeteigenpair_(nep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgeteigenpair01_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgeteigenpair01_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   nepgeteigenpair_(nep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgeteigenpair11_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgeteigenpair11_(NEP *nep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   nepgeteigenpair_(nep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgettolerances_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgettolerances_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   CHKFORTRANNULLREAL(tol);
   CHKFORTRANNULLINTEGER(maxits);
   *ierr = NEPGetTolerances(*nep,tol,maxits);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgettolerances00_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgettolerances00_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   nepgettolerances_(nep,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgettolerances10_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgettolerances10_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   nepgettolerances_(nep,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgettolerances01_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgettolerances01_(NEP *nep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   nepgettolerances_(nep,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   CHKFORTRANNULLINTEGER(npart);
   CHKFORTRANNULLREAL(tol);
@@ -503,52 +503,52 @@ PETSC_EXTERN void PETSC_STDCALL nepgetrefine_(NEP *nep,NEPRefine *refine,PetscIn
   *ierr = NEPGetRefine(*nep,refine,npart,tol,its,scheme);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine000_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine000_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine100_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine100_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine010_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine010_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine001_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine001_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine110_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine110_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine011_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine011_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine101_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine101_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepgetrefine111_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepgetrefine111_(NEP *nep,NEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,NEPRefineScheme *scheme,int *ierr)
 {
   nepgetrefine_(nep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetinitialspace0_(NEP *nep,PetscInt *n,Vec *is,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepsetinitialspace0_(NEP *nep,PetscInt *n,Vec *is,int *ierr)
 {
   *ierr = NEPSetInitialSpace(*nep,*n,is);
 }
 
-PETSC_EXTERN void PETSC_STDCALL nepsetinitialspace1_(NEP *nep,PetscInt *n,Vec *is,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL nepsetinitialspace1_(NEP *nep,PetscInt *n,Vec *is,int *ierr)
 {
   *ierr = NEPSetInitialSpace(*nep,*n,is);
 }
diff --git a/src/nep/interface/nepdefault.c b/src/nep/interface/nepdefault.c
index 087cae682..27bbcf15e 100644
--- a/src/nep/interface/nepdefault.c
+++ b/src/nep/interface/nepdefault.c
@@ -23,7 +23,7 @@
 -  nw  - number of work vectors to allocate
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin NEP
+   This is SLEPC_EXTERN because it may be required by user plugin NEP
    implementations.
 
    Level: developer
diff --git a/src/nep/interface/nepregis.c b/src/nep/interface/nepregis.c
index 744361a63..759b898c2 100644
--- a/src/nep/interface/nepregis.c
+++ b/src/nep/interface/nepregis.c
@@ -10,14 +10,14 @@
 
 #include <slepc/private/nepimpl.h>      /*I "slepcnep.h" I*/
 
-PETSC_EXTERN PetscErrorCode NEPCreate_RII(NEP);
-PETSC_EXTERN PetscErrorCode NEPCreate_SLP(NEP);
-PETSC_EXTERN PetscErrorCode NEPCreate_NArnoldi(NEP);
-PETSC_EXTERN PetscErrorCode NEPCreate_Interpol(NEP);
+SLEPC_EXTERN PetscErrorCode NEPCreate_RII(NEP);
+SLEPC_EXTERN PetscErrorCode NEPCreate_SLP(NEP);
+SLEPC_EXTERN PetscErrorCode NEPCreate_NArnoldi(NEP);
+SLEPC_EXTERN PetscErrorCode NEPCreate_Interpol(NEP);
 #if defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN PetscErrorCode NEPCreate_CISS(NEP);
+SLEPC_EXTERN PetscErrorCode NEPCreate_CISS(NEP);
 #endif
-PETSC_EXTERN PetscErrorCode NEPCreate_NLEIGS(NEP);
+SLEPC_EXTERN PetscErrorCode NEPCreate_NLEIGS(NEP);
 
 /*@C
    NEPRegisterAll - Registers all the solvers in the NEP package.
diff --git a/src/nep/interface/nepsetup.c b/src/nep/interface/nepsetup.c
index c45722e67..61d2a3c23 100644
--- a/src/nep/interface/nepsetup.c
+++ b/src/nep/interface/nepsetup.c
@@ -283,7 +283,7 @@ PetscErrorCode NEPSetDimensions_Default(NEP nep,PetscInt nev,PetscInt *ncv,Petsc
            working basis slightly larger than ncv
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin NEP
+   This is SLEPC_EXTERN because it may be required by user plugin NEP
    implementations.
 
    Level: developer
diff --git a/src/pep/impls/jd/pjd.c b/src/pep/impls/jd/pjd.c
index ad330cafd..026a4bf66 100644
--- a/src/pep/impls/jd/pjd.c
+++ b/src/pep/impls/jd/pjd.c
@@ -1348,7 +1348,7 @@ PetscErrorCode PEPDestroy_JD(PEP pep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode PEPCreate_JD(PEP pep)
+SLEPC_EXTERN PetscErrorCode PEPCreate_JD(PEP pep)
 {
   PEP_JD         *pjd;
   PetscErrorCode ierr;
diff --git a/src/pep/impls/krylov/qarnoldi/qarnoldi.c b/src/pep/impls/krylov/qarnoldi/qarnoldi.c
index 7d0fb8900..406f061cf 100644
--- a/src/pep/impls/krylov/qarnoldi/qarnoldi.c
+++ b/src/pep/impls/krylov/qarnoldi/qarnoldi.c
@@ -535,7 +535,7 @@ PetscErrorCode PEPDestroy_QArnoldi(PEP pep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode PEPCreate_QArnoldi(PEP pep)
+SLEPC_EXTERN PetscErrorCode PEPCreate_QArnoldi(PEP pep)
 {
   PEP_QARNOLDI   *ctx;
   PetscErrorCode ierr;
diff --git a/src/pep/impls/krylov/stoar/ftn-custom/zstoarf.c b/src/pep/impls/krylov/stoar/ftn-custom/zstoarf.c
index 1ac34896f..6cf022d6c 100644
--- a/src/pep/impls/krylov/stoar/ftn-custom/zstoarf.c
+++ b/src/pep/impls/krylov/stoar/ftn-custom/zstoarf.c
@@ -17,7 +17,7 @@
 #define pepstoargetinertias_        pepstoargetinertias
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL pepstoargetinertias_(PEP *pep,PetscInt *nshift,PetscReal *shifts,PetscInt *inertias,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepstoargetinertias_(PEP *pep,PetscInt *nshift,PetscReal *shifts,PetscInt *inertias,PetscErrorCode *ierr)
 {
   PetscReal *oshifts;
   PetscInt  *oinertias;
diff --git a/src/pep/impls/krylov/stoar/stoar.c b/src/pep/impls/krylov/stoar/stoar.c
index aa9760b6c..fb53553fa 100644
--- a/src/pep/impls/krylov/stoar/stoar.c
+++ b/src/pep/impls/krylov/stoar/stoar.c
@@ -837,7 +837,7 @@ PetscErrorCode PEPDestroy_STOAR(PEP pep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode PEPCreate_STOAR(PEP pep)
+SLEPC_EXTERN PetscErrorCode PEPCreate_STOAR(PEP pep)
 {
   PetscErrorCode ierr;
   PEP_TOAR      *ctx;
diff --git a/src/pep/impls/krylov/toar/ptoar.c b/src/pep/impls/krylov/toar/ptoar.c
index 535f73286..33e4a6e34 100644
--- a/src/pep/impls/krylov/toar/ptoar.c
+++ b/src/pep/impls/krylov/toar/ptoar.c
@@ -858,7 +858,7 @@ PetscErrorCode PEPDestroy_TOAR(PEP pep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode PEPCreate_TOAR(PEP pep)
+SLEPC_EXTERN PetscErrorCode PEPCreate_TOAR(PEP pep)
 {
   PEP_TOAR       *ctx;
   PetscErrorCode ierr;
diff --git a/src/pep/impls/linear/linear.c b/src/pep/impls/linear/linear.c
index 88113b61a..57afdcd3e 100644
--- a/src/pep/impls/linear/linear.c
+++ b/src/pep/impls/linear/linear.c
@@ -1049,7 +1049,7 @@ PetscErrorCode PEPDestroy_Linear(PEP pep)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode PEPCreate_Linear(PEP pep)
+SLEPC_EXTERN PetscErrorCode PEPCreate_Linear(PEP pep)
 {
   PetscErrorCode ierr;
   PEP_LINEAR     *ctx;
diff --git a/src/pep/interface/dlregispep.c b/src/pep/interface/dlregispep.c
index cdfbbecc6..6c72e7f67 100644
--- a/src/pep/interface/dlregispep.c
+++ b/src/pep/interface/dlregispep.c
@@ -91,7 +91,7 @@ PetscErrorCode PEPInitializePackage(void)
   This one registers all the PEP methods that are in the basic SLEPc libslepcpep
   library.
  */
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcpep()
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcpep()
 {
   PetscErrorCode ierr;
 
diff --git a/src/pep/interface/ftn-custom/zpepf.c b/src/pep/interface/ftn-custom/zpepf.c
index e9c1510d5..0cf9ce85f 100644
--- a/src/pep/interface/ftn-custom/zpepf.c
+++ b/src/pep/interface/ftn-custom/zpepf.c
@@ -128,27 +128,27 @@
    These are not usually called from Fortran but allow Fortran users
    to transparently set these monitors from .F code, hence no STDCALL
 */
-PETSC_EXTERN void pepmonitorall_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void pepmonitorall_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPMonitorAll(*pep,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void pepmonitorconverged_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void pepmonitorconverged_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPMonitorConverged(*pep,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void pepmonitorfirst_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void pepmonitorfirst_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPMonitorFirst(*pep,*it,*nconv,eigr,eigi,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void pepmonitorlg_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void pepmonitorlg_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPMonitorLG(*pep,*it,*nconv,eigr,eigi,errest,*nest,ctx);
 }
 
-PETSC_EXTERN void pepmonitorlgall_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void pepmonitorlgall_(PEP *pep,PetscInt *it,PetscInt *nconv,PetscScalar *eigr,PetscScalar *eigi,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPMonitorLGAll(*pep,*it,*nconv,eigr,eigi,errest,*nest,ctx);
 }
@@ -203,42 +203,42 @@ static PetscErrorCode oureigenvaluecomparison(PetscScalar ar,PetscScalar ai,Pets
   PetscObjectUseFortranCallback(eps,_cb.comparison,(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*,PetscErrorCode*),(&ar,&ai,&br,&bi,r,_ctx,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = PEPView(*pep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepreasonview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepreasonview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = PEPReasonView(*pep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL peperrorview_(PEP *pep,PEPErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL peperrorview_(PEP *pep,PEPErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = PEPErrorView(*pep,*etype,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepvaluesview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepvaluesview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = PEPValuesView(*pep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepvectorsview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepvectorsview_(PEP *pep,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = PEPVectorsView(*pep,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsettype_(PEP *pep,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL pepsettype_(PEP *pep,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -247,7 +247,7 @@ PETSC_EXTERN void PETSC_STDCALL pepsettype_(PEP *pep,char *type PETSC_MIXED_LEN(
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgettype_(PEP *pep,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL pepgettype_(PEP *pep,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   PEPType tname;
 
@@ -256,7 +256,7 @@ PETSC_EXTERN void PETSC_STDCALL pepgettype_(PEP *pep,char *name PETSC_MIXED_LEN(
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsetoptionsprefix_(PEP *pep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL pepsetoptionsprefix_(PEP *pep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -265,7 +265,7 @@ PETSC_EXTERN void PETSC_STDCALL pepsetoptionsprefix_(PEP *pep,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepappendoptionsprefix_(PEP *pep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL pepappendoptionsprefix_(PEP *pep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -274,7 +274,7 @@ PETSC_EXTERN void PETSC_STDCALL pepappendoptionsprefix_(PEP *pep,char *prefix PE
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetoptionsprefix_(PEP *pep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL pepgetoptionsprefix_(PEP *pep,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -283,7 +283,7 @@ PETSC_EXTERN void PETSC_STDCALL pepgetoptionsprefix_(PEP *pep,char *prefix PETSC
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepmonitorset_(PEP *pep,void (PETSC_STDCALL *monitor)(PEP*,PetscInt*,PetscInt*,PetscScalar*,PetscScalar*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepmonitorset_(PEP *pep,void (PETSC_STDCALL *monitor)(PEP*,PetscInt*,PetscInt*,PetscScalar*,PetscScalar*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(mctx);
   CHKFORTRANNULLFUNCTION(monitordestroy);
@@ -304,17 +304,17 @@ PETSC_EXTERN void PETSC_STDCALL pepmonitorset_(PEP *pep,void (PETSC_STDCALL *mon
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepconvergedabsolute_(PEP *pep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepconvergedabsolute_(PEP *pep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPConvergedAbsolute(*pep,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepconvergedrelative_(PEP *pep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepconvergedrelative_(PEP *pep,PetscScalar *eigr,PetscScalar *eigi,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPConvergedRelative(*pep,*eigr,*eigi,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsetconvergencetestfunction_(PEP *pep,void (PETSC_STDCALL *func)(PEP*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepsetconvergencetestfunction_(PEP *pep,void (PETSC_STDCALL *func)(PEP*,PetscScalar*,PetscScalar*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -329,12 +329,12 @@ PETSC_EXTERN void PETSC_STDCALL pepsetconvergencetestfunction_(PEP *pep,void (PE
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepstoppingbasic_(PEP *pep,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nev,PEPConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepstoppingbasic_(PEP *pep,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nev,PEPConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = PEPStoppingBasic(*pep,*its,*max_it,*nconv,*nev,reason,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsetstoppingtestfunction_(PEP *pep,void (PETSC_STDCALL *func)(PEP*,PetscInt,PetscInt,PetscInt,PetscInt,PEPConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepsetstoppingtestfunction_(PEP *pep,void (PETSC_STDCALL *func)(PEP*,PetscInt,PetscInt,PetscInt,PetscInt,PEPConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -347,14 +347,14 @@ PETSC_EXTERN void PETSC_STDCALL pepsetstoppingtestfunction_(PEP *pep,void (PETSC
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepseteigenvaluecomparison_(PEP *pep,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*),void* ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepseteigenvaluecomparison_(PEP *pep,void (PETSC_STDCALL *func)(PetscScalar*,PetscScalar*,PetscScalar*,PetscScalar*,PetscInt*,void*),void* ctx,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   *ierr = PetscObjectSetFortranCallback((PetscObject)*pep,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.comparison,(PetscVoidFunction)func,ctx); if (*ierr) return;
   *ierr = PEPSetEigenvalueComparison(*pep,oureigenvaluecomparison,*pep);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   CHKFORTRANNULLINTEGER(nev);
   CHKFORTRANNULLINTEGER(ncv);
@@ -362,37 +362,37 @@ PETSC_EXTERN void PETSC_STDCALL pepgetdimensions_(PEP *pep,PetscInt *nev,PetscIn
   *ierr = PEPGetDimensions(*pep,nev,ncv,mpd);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions000_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions000_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   pepgetdimensions_(pep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions100_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions100_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   pepgetdimensions_(pep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions010_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions010_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   pepgetdimensions_(pep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions001_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions001_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   pepgetdimensions_(pep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions110_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions110_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   pepgetdimensions_(pep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetdimensions011_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetdimensions011_(PEP *pep,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   pepgetdimensions_(pep,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgeteigenpair_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgeteigenpair_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   CHKFORTRANNULLSCALAR(eigr);
   CHKFORTRANNULLSCALAR(eigi);
@@ -401,56 +401,56 @@ PETSC_EXTERN void PETSC_STDCALL pepgeteigenpair_(PEP *pep,PetscInt *i,PetscScala
   *ierr = PEPGetEigenpair(*pep,*i,eigr,eigi,*Vr,*Vi);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgeteigenpair00_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgeteigenpair00_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   pepgeteigenpair_(pep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgeteigenpair10_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgeteigenpair10_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   pepgeteigenpair_(pep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgeteigenpair01_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgeteigenpair01_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   pepgeteigenpair_(pep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgeteigenpair11_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgeteigenpair11_(PEP *pep,PetscInt *i,PetscScalar *eigr,PetscScalar *eigi,Vec *Vr,Vec *Vi,int *ierr)
 {
   pepgeteigenpair_(pep,i,eigr,eigi,Vr,Vi,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgettolerances_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgettolerances_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   CHKFORTRANNULLREAL(tol);
   CHKFORTRANNULLINTEGER(maxits);
   *ierr = PEPGetTolerances(*pep,tol,maxits);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgettolerances00_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgettolerances00_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   pepgettolerances_(pep,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgettolerances10_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgettolerances10_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   pepgettolerances_(pep,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgettolerances01_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgettolerances01_(PEP *pep,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   pepgettolerances_(pep,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsetscale_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepsetscale_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   CHKFORTRANNULLOBJECTDEREFERENCE(Dl);
   CHKFORTRANNULLOBJECTDEREFERENCE(Dr);
   *ierr = PEPSetScale(*pep,*scale,*alpha,*Dl,*Dr,*its,*lambda);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   CHKFORTRANNULLREAL(alpha);
   CHKFORTRANNULLINTEGER(its);
@@ -458,47 +458,47 @@ PETSC_EXTERN void PETSC_STDCALL pepgetscale_(PEP *pep,PEPScale *scale,PetscReal
   *ierr = PEPGetScale(*pep,scale,alpha,Dl,Dr,its,lambda);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale000_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale000_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale100_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale100_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale010_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale010_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale001_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale001_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale110_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale110_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale011_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale011_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale101_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale101_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetscale111_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetscale111_(PEP *pep,PEPScale *scale,PetscReal *alpha,Vec *Dl,Vec *Dr,PetscInt *its,PetscReal *lambda,int *ierr)
 {
   pepgetscale_(pep,scale,alpha,Dl,Dr,its,lambda,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   CHKFORTRANNULLINTEGER(npart);
   CHKFORTRANNULLREAL(tol);
@@ -506,52 +506,52 @@ PETSC_EXTERN void PETSC_STDCALL pepgetrefine_(PEP *pep,PEPRefine *refine,PetscIn
   *ierr = PEPGetRefine(*pep,refine,npart,tol,its,scheme);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine000_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine000_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine100_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine100_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine010_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine010_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine001_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine001_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine110_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine110_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine011_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine011_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine101_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine101_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepgetrefine111_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepgetrefine111_(PEP *pep,PEPRefine *refine,PetscInt *npart,PetscReal *tol,PetscInt *its,PEPRefineScheme *scheme,int *ierr)
 {
   pepgetrefine_(pep,refine,npart,tol,its,scheme,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsetinitialspace0_(PEP *pep,PetscInt *n,Vec *is,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepsetinitialspace0_(PEP *pep,PetscInt *n,Vec *is,int *ierr)
 {
   *ierr = PEPSetInitialSpace(*pep,*n,is);
 }
 
-PETSC_EXTERN void PETSC_STDCALL pepsetinitialspace1_(PEP *pep,PetscInt *n,Vec *is,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL pepsetinitialspace1_(PEP *pep,PetscInt *n,Vec *is,int *ierr)
 {
   *ierr = PEPSetInitialSpace(*pep,*n,is);
 }
diff --git a/src/pep/interface/pepdefault.c b/src/pep/interface/pepdefault.c
index 6b2b983f0..5abd92b74 100644
--- a/src/pep/interface/pepdefault.c
+++ b/src/pep/interface/pepdefault.c
@@ -23,7 +23,7 @@
 -  nw  - number of work vectors to allocate
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin PEP
+   This is SLEPC_EXTERN because it may be required by user plugin PEP
    implementations.
 
    Level: developer
diff --git a/src/pep/interface/pepregis.c b/src/pep/interface/pepregis.c
index 0d545c5eb..ee684799d 100644
--- a/src/pep/interface/pepregis.c
+++ b/src/pep/interface/pepregis.c
@@ -10,12 +10,12 @@
 
 #include <slepc/private/pepimpl.h>      /*I "slepcpep.h" I*/
 
-PETSC_EXTERN PetscErrorCode PEPCreate_Linear(PEP);
-PETSC_EXTERN PetscErrorCode PEPCreate_QArnoldi(PEP);
-PETSC_EXTERN PetscErrorCode PEPCreate_TOAR(PEP);
-PETSC_EXTERN PetscErrorCode PEPCreate_STOAR(PEP);
+SLEPC_EXTERN PetscErrorCode PEPCreate_Linear(PEP);
+SLEPC_EXTERN PetscErrorCode PEPCreate_QArnoldi(PEP);
+SLEPC_EXTERN PetscErrorCode PEPCreate_TOAR(PEP);
+SLEPC_EXTERN PetscErrorCode PEPCreate_STOAR(PEP);
 #if defined(PETSC_USE_COMPLEX)
-PETSC_EXTERN PetscErrorCode PEPCreate_JD(PEP);
+SLEPC_EXTERN PetscErrorCode PEPCreate_JD(PEP);
 #endif
 
 /*@C
diff --git a/src/pep/interface/pepsetup.c b/src/pep/interface/pepsetup.c
index 91e2a35d6..262c3db36 100644
--- a/src/pep/interface/pepsetup.c
+++ b/src/pep/interface/pepsetup.c
@@ -445,7 +445,7 @@ PetscErrorCode PEPSetDimensions_Default(PEP pep,PetscInt nev,PetscInt *ncv,Petsc
            working basis slightly larger than ncv
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by user plugin PEP
+   This is SLEPC_EXTERN because it may be required by user plugin PEP
    implementations.
 
    Level: developer
diff --git a/src/svd/impls/cross/cross.c b/src/svd/impls/cross/cross.c
index becdfc299..88309f28b 100644
--- a/src/svd/impls/cross/cross.c
+++ b/src/svd/impls/cross/cross.c
@@ -451,7 +451,7 @@ PetscErrorCode SVDDestroy_Cross(SVD svd)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode SVDCreate_Cross(SVD svd)
+SLEPC_EXTERN PetscErrorCode SVDCreate_Cross(SVD svd)
 {
   PetscErrorCode ierr;
   SVD_CROSS      *cross;
diff --git a/src/svd/impls/cyclic/cyclic.c b/src/svd/impls/cyclic/cyclic.c
index 59225767f..58eca5d60 100644
--- a/src/svd/impls/cyclic/cyclic.c
+++ b/src/svd/impls/cyclic/cyclic.c
@@ -499,7 +499,7 @@ PetscErrorCode SVDDestroy_Cyclic(SVD svd)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode SVDCreate_Cyclic(SVD svd)
+SLEPC_EXTERN PetscErrorCode SVDCreate_Cyclic(SVD svd)
 {
   PetscErrorCode ierr;
   SVD_CYCLIC     *cyclic;
diff --git a/src/svd/impls/external/primme/svdprimme.c b/src/svd/impls/external/primme/svdprimme.c
index c510f4d4d..2529f55b1 100644
--- a/src/svd/impls/external/primme/svdprimme.c
+++ b/src/svd/impls/external/primme/svdprimme.c
@@ -400,7 +400,7 @@ PetscErrorCode SVDPRIMMEGetMethod(SVD svd,SVDPRIMMEMethod *method)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode SVDCreate_PRIMME(SVD svd)
+SLEPC_EXTERN PetscErrorCode SVDCreate_PRIMME(SVD svd)
 {
   PetscErrorCode ierr;
   SVD_PRIMME     *primme;
diff --git a/src/svd/impls/lanczos/gklanczos.c b/src/svd/impls/lanczos/gklanczos.c
index 6d1b6661e..ad4037e9f 100644
--- a/src/svd/impls/lanczos/gklanczos.c
+++ b/src/svd/impls/lanczos/gklanczos.c
@@ -393,7 +393,7 @@ PetscErrorCode SVDView_Lanczos(SVD svd,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode SVDCreate_Lanczos(SVD svd)
+SLEPC_EXTERN PetscErrorCode SVDCreate_Lanczos(SVD svd)
 {
   PetscErrorCode ierr;
   SVD_LANCZOS    *ctx;
diff --git a/src/svd/impls/lapack/svdlapack.c b/src/svd/impls/lapack/svdlapack.c
index a1d96548f..adade11f2 100644
--- a/src/svd/impls/lapack/svdlapack.c
+++ b/src/svd/impls/lapack/svdlapack.c
@@ -97,7 +97,7 @@ PetscErrorCode SVDSolve_LAPACK(SVD svd)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode SVDCreate_LAPACK(SVD svd)
+SLEPC_EXTERN PetscErrorCode SVDCreate_LAPACK(SVD svd)
 {
   PetscFunctionBegin;
   svd->ops->setup   = SVDSetUp_LAPACK;
diff --git a/src/svd/impls/trlanczos/trlanczos.c b/src/svd/impls/trlanczos/trlanczos.c
index b9b2a2c43..3b666a683 100644
--- a/src/svd/impls/trlanczos/trlanczos.c
+++ b/src/svd/impls/trlanczos/trlanczos.c
@@ -495,7 +495,7 @@ PetscErrorCode SVDView_TRLanczos(SVD svd,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode SVDCreate_TRLanczos(SVD svd)
+SLEPC_EXTERN PetscErrorCode SVDCreate_TRLanczos(SVD svd)
 {
   PetscErrorCode ierr;
   SVD_TRLANCZOS  *ctx;
diff --git a/src/svd/interface/dlregissvd.c b/src/svd/interface/dlregissvd.c
index 97e8af138..1b6b55f93 100644
--- a/src/svd/interface/dlregissvd.c
+++ b/src/svd/interface/dlregissvd.c
@@ -86,7 +86,7 @@ PetscErrorCode SVDInitializePackage(void)
   This one registers all the SVD methods that are in the basic SLEPc libslepcsvd
   library.
  */
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcsvd()
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcsvd()
 {
   PetscErrorCode ierr;
 
diff --git a/src/svd/interface/ftn-custom/zsvdf.c b/src/svd/interface/ftn-custom/zsvdf.c
index 69947f070..c0b2fbf8a 100644
--- a/src/svd/interface/ftn-custom/zsvdf.c
+++ b/src/svd/interface/ftn-custom/zsvdf.c
@@ -92,27 +92,27 @@
    These are not usually called from Fortran but allow Fortran users
    to transparently set these monitors from .F code, hence no STDCALL
 */
-PETSC_EXTERN void svdmonitorall_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void svdmonitorall_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDMonitorAll(*svd,*it,*nconv,sigma,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void svdmonitorconverged_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void svdmonitorconverged_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDMonitorConverged(*svd,*it,*nconv,sigma,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void svdmonitorfirst_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void svdmonitorfirst_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,PetscViewerAndFormat **ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDMonitorFirst(*svd,*it,*nconv,sigma,errest,*nest,*ctx);
 }
 
-PETSC_EXTERN void svdmonitorlg_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void svdmonitorlg_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDMonitorLG(*svd,*it,*nconv,sigma,errest,*nest,ctx);
 }
 
-PETSC_EXTERN void svdmonitorlgall_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void svdmonitorlgall_(SVD *svd,PetscInt *it,PetscInt *nconv,PetscReal *sigma,PetscReal *errest,PetscInt *nest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDMonitorLGAll(*svd,*it,*nconv,sigma,errest,*nest,ctx);
 }
@@ -160,42 +160,42 @@ static PetscErrorCode ourstopdestroy(void *ctx)
   PetscObjectUseFortranCallback(svd,_cb.stopdestroy,(void*,PetscErrorCode*),(_ctx,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = SVDView(*svd,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdreasonview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdreasonview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = SVDReasonView(*svd,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svderrorview_(SVD *svd,SVDErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svderrorview_(SVD *svd,SVDErrorType *etype,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = SVDErrorView(*svd,*etype,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdvaluesview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdvaluesview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = SVDValuesView(*svd,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdvectorsview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdvectorsview_(SVD *svd,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = SVDVectorsView(*svd,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsettype_(SVD *svd,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL svdsettype_(SVD *svd,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -204,7 +204,7 @@ PETSC_EXTERN void PETSC_STDCALL svdsettype_(SVD *svd,char *type PETSC_MIXED_LEN(
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgettype_(SVD *svd,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL svdgettype_(SVD *svd,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   SVDType tname;
 
@@ -213,7 +213,7 @@ PETSC_EXTERN void PETSC_STDCALL svdgettype_(SVD *svd,char *name PETSC_MIXED_LEN(
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdmonitorset_(SVD *svd,void (PETSC_STDCALL *monitor)(SVD*,PetscInt*,PetscInt*,PetscReal*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdmonitorset_(SVD *svd,void (PETSC_STDCALL *monitor)(SVD*,PetscInt*,PetscInt*,PetscReal*,PetscReal*,PetscInt*,void*,PetscErrorCode*),void *mctx,void (PETSC_STDCALL *monitordestroy)(void *,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(mctx);
   CHKFORTRANNULLFUNCTION(monitordestroy);
@@ -234,7 +234,7 @@ PETSC_EXTERN void PETSC_STDCALL svdmonitorset_(SVD *svd,void (PETSC_STDCALL *mon
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetoptionsprefix_(SVD *svd,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL svdsetoptionsprefix_(SVD *svd,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -243,7 +243,7 @@ PETSC_EXTERN void PETSC_STDCALL svdsetoptionsprefix_(SVD *svd,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdappendoptionsprefix_(SVD *svd,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL svdappendoptionsprefix_(SVD *svd,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -252,7 +252,7 @@ PETSC_EXTERN void PETSC_STDCALL svdappendoptionsprefix_(SVD *svd,char *prefix PE
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetoptionsprefix_(SVD *svd,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL svdgetoptionsprefix_(SVD *svd,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -261,17 +261,17 @@ PETSC_EXTERN void PETSC_STDCALL svdgetoptionsprefix_(SVD *svd,char *prefix PETSC
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdconvergedabsolute_(SVD *svd,PetscReal *sigma,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdconvergedabsolute_(SVD *svd,PetscReal *sigma,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDConvergedAbsolute(*svd,*sigma,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdconvergedrelative_(SVD *svd,PetscReal *sigma,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdconvergedrelative_(SVD *svd,PetscReal *sigma,PetscReal *res,PetscReal *errest,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDConvergedRelative(*svd,*sigma,*res,errest,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetconvergencetestfunction_(SVD *svd,void (PETSC_STDCALL *func)(SVD*,PetscReal*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetconvergencetestfunction_(SVD *svd,void (PETSC_STDCALL *func)(SVD*,PetscReal*,PetscReal*,PetscReal*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -286,12 +286,12 @@ PETSC_EXTERN void PETSC_STDCALL svdsetconvergencetestfunction_(SVD *svd,void (PE
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdstoppingbasic_(SVD *svd,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nsv,SVDConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdstoppingbasic_(SVD *svd,PetscInt *its,PetscInt *max_it,PetscInt *nconv,PetscInt *nsv,SVDConvergedReason *reason,void *ctx,PetscErrorCode *ierr)
 {
   *ierr = SVDStoppingBasic(*svd,*its,*max_it,*nconv,*nsv,reason,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetstoppingtestfunction_(SVD *svd,void (PETSC_STDCALL *func)(SVD*,PetscInt,PetscInt,PetscInt,PetscInt,SVDConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetstoppingtestfunction_(SVD *svd,void (PETSC_STDCALL *func)(SVD*,PetscInt,PetscInt,PetscInt,PetscInt,SVDConvergedReason*,void*,PetscErrorCode*),void* ctx,void (PETSC_STDCALL *destroy)(void*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   CHKFORTRANNULLOBJECT(ctx);
   CHKFORTRANNULLFUNCTION(destroy);
@@ -304,7 +304,7 @@ PETSC_EXTERN void PETSC_STDCALL svdsetstoppingtestfunction_(SVD *svd,void (PETSC
   }
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   CHKFORTRANNULLINTEGER(nev);
   CHKFORTRANNULLINTEGER(ncv);
@@ -312,42 +312,42 @@ PETSC_EXTERN void PETSC_STDCALL svdgetdimensions_(SVD *svd,PetscInt *nev,PetscIn
   *ierr = SVDGetDimensions(*svd,nev,ncv,mpd);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions000_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions000_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions100_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions100_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions010_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions010_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions001_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions001_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions110_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions110_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions011_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions011_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetdimensions101_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetdimensions101_(SVD *svd,PetscInt *nev,PetscInt *ncv,PetscInt *mpd,int *ierr)
 {
   svdgetdimensions_(svd,nev,ncv,mpd,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetsingulartriplet_(SVD *svd,PetscInt *i,PetscReal *sigma,Vec *u,Vec *v,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetsingulartriplet_(SVD *svd,PetscInt *i,PetscReal *sigma,Vec *u,Vec *v,int *ierr)
 {
   CHKFORTRANNULLREAL(sigma);
   CHKFORTRANNULLOBJECTDEREFERENCE(u);
@@ -355,61 +355,61 @@ PETSC_EXTERN void PETSC_STDCALL svdgetsingulartriplet_(SVD *svd,PetscInt *i,Pets
   *ierr = SVDGetSingularTriplet(*svd,*i,sigma,*u,*v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetsingulartriplet0_(SVD *svd,PetscInt *i,PetscReal *sigma,Vec *u,Vec *v, int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetsingulartriplet0_(SVD *svd,PetscInt *i,PetscReal *sigma,Vec *u,Vec *v, int *ierr)
 {
   svdgetsingulartriplet_(svd,i,sigma,u,v,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgetsingulartriplet1_(SVD *svd,PetscInt *i,PetscReal *sigma,Vec *u,Vec *v, int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgetsingulartriplet1_(SVD *svd,PetscInt *i,PetscReal *sigma,Vec *u,Vec *v, int *ierr)
 {
   svdgetsingulartriplet_(svd,i,sigma,u,v,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgettolerances_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgettolerances_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   CHKFORTRANNULLREAL(tol);
   CHKFORTRANNULLINTEGER(maxits);
   *ierr = SVDGetTolerances(*svd,tol,maxits);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgettolerances00_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgettolerances00_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   svdgettolerances_(svd,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgettolerances10_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgettolerances10_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   svdgettolerances_(svd,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdgettolerances01_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdgettolerances01_(SVD *svd,PetscReal *tol,PetscInt *maxits,int *ierr)
 {
   svdgettolerances_(svd,tol,maxits,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetinitialspaces_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetinitialspaces_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
 {
   CHKFORTRANNULLOBJECT(isr);
   CHKFORTRANNULLOBJECT(isl);
   *ierr = SVDSetInitialSpaces(*svd,*nr,isr,*nl,isl);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetinitialspaces00_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetinitialspaces00_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
 {
   svdsetinitialspaces_(svd,nr,isr,nl,isl,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetinitialspaces01_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetinitialspaces01_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
 {
   svdsetinitialspaces_(svd,nr,isr,nl,isl,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetinitialspaces10_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetinitialspaces10_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
 {
   svdsetinitialspaces_(svd,nr,isr,nl,isl,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL svdsetinitialspaces11_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL svdsetinitialspaces11_(SVD *svd,PetscInt *nr,Vec *isr,PetscInt *nl,Vec *isl,int *ierr)
 {
   svdsetinitialspaces_(svd,nr,isr,nl,isl,ierr);
 }
diff --git a/src/svd/interface/svdregis.c b/src/svd/interface/svdregis.c
index b40557119..6b4e51b80 100644
--- a/src/svd/interface/svdregis.c
+++ b/src/svd/interface/svdregis.c
@@ -10,13 +10,13 @@
 
 #include <slepc/private/svdimpl.h>       /*I "slepcsvd.h" I*/
 
-PETSC_EXTERN PetscErrorCode SVDCreate_Cross(SVD);
-PETSC_EXTERN PetscErrorCode SVDCreate_Cyclic(SVD);
-PETSC_EXTERN PetscErrorCode SVDCreate_LAPACK(SVD);
-PETSC_EXTERN PetscErrorCode SVDCreate_Lanczos(SVD);
-PETSC_EXTERN PetscErrorCode SVDCreate_TRLanczos(SVD);
+SLEPC_EXTERN PetscErrorCode SVDCreate_Cross(SVD);
+SLEPC_EXTERN PetscErrorCode SVDCreate_Cyclic(SVD);
+SLEPC_EXTERN PetscErrorCode SVDCreate_LAPACK(SVD);
+SLEPC_EXTERN PetscErrorCode SVDCreate_Lanczos(SVD);
+SLEPC_EXTERN PetscErrorCode SVDCreate_TRLanczos(SVD);
 #if defined(SLEPC_HAVE_PRIMME)
-PETSC_EXTERN PetscErrorCode SVDCreate_PRIMME(SVD);
+SLEPC_EXTERN PetscErrorCode SVDCreate_PRIMME(SVD);
 #endif
 
 /*@C
diff --git a/src/svd/interface/svdsetup.c b/src/svd/interface/svdsetup.c
index 8b091c3a2..ee3aa498c 100644
--- a/src/svd/interface/svdsetup.c
+++ b/src/svd/interface/svdsetup.c
@@ -280,7 +280,7 @@ PetscErrorCode SVDSetDimensions_Default(SVD svd)
            working basis slightly larger than ncv
 
    Developers Notes:
-   This is PETSC_EXTERN because it may be required by user plugin SVD
+   This is SLEPC_EXTERN because it may be required by user plugin SVD
    implementations.
 
    This is called at setup after setting the value of ncv and the flag leftbasis.
diff --git a/src/sys/classes/bv/impls/contiguous/contig.c b/src/sys/classes/bv/impls/contiguous/contig.c
index 5df7a2298..561f86bc9 100644
--- a/src/sys/classes/bv/impls/contiguous/contig.c
+++ b/src/sys/classes/bv/impls/contiguous/contig.c
@@ -315,7 +315,7 @@ PetscErrorCode BVDestroy_Contiguous(BV bv)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode BVCreate_Contiguous(BV bv)
+SLEPC_EXTERN PetscErrorCode BVCreate_Contiguous(BV bv)
 {
   PetscErrorCode ierr;
   BV_CONTIGUOUS  *ctx;
diff --git a/src/sys/classes/bv/impls/mat/bvmat.c b/src/sys/classes/bv/impls/mat/bvmat.c
index ec8170778..0fa4a44df 100644
--- a/src/sys/classes/bv/impls/mat/bvmat.c
+++ b/src/sys/classes/bv/impls/mat/bvmat.c
@@ -417,7 +417,7 @@ PetscErrorCode BVDestroy_Mat(BV bv)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode BVCreate_Mat(BV bv)
+SLEPC_EXTERN PetscErrorCode BVCreate_Mat(BV bv)
 {
   PetscErrorCode ierr;
   BV_MAT         *ctx;
diff --git a/src/sys/classes/bv/impls/svec/svec.c b/src/sys/classes/bv/impls/svec/svec.c
index 6c7464348..bf734766a 100644
--- a/src/sys/classes/bv/impls/svec/svec.c
+++ b/src/sys/classes/bv/impls/svec/svec.c
@@ -419,7 +419,7 @@ PetscErrorCode BVDestroy_Svec(BV bv)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode BVCreate_Svec(BV bv)
+SLEPC_EXTERN PetscErrorCode BVCreate_Svec(BV bv)
 {
   PetscErrorCode    ierr;
   BV_SVEC           *ctx;
diff --git a/src/sys/classes/bv/impls/tensor/bvtensor.c b/src/sys/classes/bv/impls/tensor/bvtensor.c
index ac860d795..6b4b2b52e 100644
--- a/src/sys/classes/bv/impls/tensor/bvtensor.c
+++ b/src/sys/classes/bv/impls/tensor/bvtensor.c
@@ -824,7 +824,7 @@ PetscErrorCode BVDestroy_Tensor(BV bv)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode BVCreate_Tensor(BV bv)
+SLEPC_EXTERN PetscErrorCode BVCreate_Tensor(BV bv)
 {
   PetscErrorCode ierr;
   BV_TENSOR      *ctx;
diff --git a/src/sys/classes/bv/impls/vecs/vecs.c b/src/sys/classes/bv/impls/vecs/vecs.c
index 7bf458bd7..8a2c8f9a6 100644
--- a/src/sys/classes/bv/impls/vecs/vecs.c
+++ b/src/sys/classes/bv/impls/vecs/vecs.c
@@ -524,7 +524,7 @@ PetscErrorCode BVDuplicate_Vecs(BV V,BV W)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode BVCreate_Vecs(BV bv)
+SLEPC_EXTERN PetscErrorCode BVCreate_Vecs(BV bv)
 {
   PetscErrorCode ierr;
   BV_VECS        *ctx;
diff --git a/src/sys/classes/bv/interface/bvlapack.c b/src/sys/classes/bv/interface/bvlapack.c
index 4d8fbf9d7..818f74bbe 100644
--- a/src/sys/classes/bv/interface/bvlapack.c
+++ b/src/sys/classes/bv/interface/bvlapack.c
@@ -445,7 +445,7 @@ PetscErrorCode BVOrthogonalize_LAPACK_TSQR(BV bv,PetscInt m_,PetscInt n_,PetscSc
     Reduction operation to compute [~,Rout]=qr([Rin1;Rin2]) in the TSQR algorithm;
     all matrices are upper triangular stored in packed format
 */
-PETSC_EXTERN void SlepcGivensPacked(void *in,void *inout,PetscMPIInt *len,MPI_Datatype *datatype)
+SLEPC_EXTERN void SlepcGivensPacked(void *in,void *inout,PetscMPIInt *len,MPI_Datatype *datatype)
 {
   PetscErrorCode ierr;
   PetscBLASInt   n,i,j,k,one=1;
diff --git a/src/sys/classes/bv/interface/bvregis.c b/src/sys/classes/bv/interface/bvregis.c
index 8d3251e0d..c4b8b5bfd 100644
--- a/src/sys/classes/bv/interface/bvregis.c
+++ b/src/sys/classes/bv/interface/bvregis.c
@@ -10,11 +10,11 @@
 
 #include <slepc/private/bvimpl.h>          /*I   "slepcbv.h"   I*/
 
-PETSC_EXTERN PetscErrorCode BVCreate_Vecs(BV);
-PETSC_EXTERN PetscErrorCode BVCreate_Contiguous(BV);
-PETSC_EXTERN PetscErrorCode BVCreate_Svec(BV);
-PETSC_EXTERN PetscErrorCode BVCreate_Mat(BV);
-PETSC_EXTERN PetscErrorCode BVCreate_Tensor(BV);
+SLEPC_EXTERN PetscErrorCode BVCreate_Vecs(BV);
+SLEPC_EXTERN PetscErrorCode BVCreate_Contiguous(BV);
+SLEPC_EXTERN PetscErrorCode BVCreate_Svec(BV);
+SLEPC_EXTERN PetscErrorCode BVCreate_Mat(BV);
+SLEPC_EXTERN PetscErrorCode BVCreate_Tensor(BV);
 
 /*@C
    BVRegisterAll - Registers all of the storage variants in the BV package.
diff --git a/src/sys/classes/bv/interface/ftn-custom/zbvf.c b/src/sys/classes/bv/interface/ftn-custom/zbvf.c
index 9ca88f539..7dc176c20 100644
--- a/src/sys/classes/bv/interface/ftn-custom/zbvf.c
+++ b/src/sys/classes/bv/interface/ftn-custom/zbvf.c
@@ -27,7 +27,7 @@
 #define bvview_                   bvview
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL bvsettype_(BV *bv,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL bvsettype_(BV *bv,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -36,7 +36,7 @@ PETSC_EXTERN void PETSC_STDCALL bvsettype_(BV *bv,char *type PETSC_MIXED_LEN(len
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL bvgettype_(BV *bv,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL bvgettype_(BV *bv,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   BVType tname;
 
@@ -45,7 +45,7 @@ PETSC_EXTERN void PETSC_STDCALL bvgettype_(BV *bv,char *name PETSC_MIXED_LEN(len
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL bvsetoptionsprefix_(BV *bv,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL bvsetoptionsprefix_(BV *bv,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -54,7 +54,7 @@ PETSC_EXTERN void PETSC_STDCALL bvsetoptionsprefix_(BV *bv,char *prefix PETSC_MI
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL bvappendoptionsprefix_(BV *bv,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL bvappendoptionsprefix_(BV *bv,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -63,7 +63,7 @@ PETSC_EXTERN void PETSC_STDCALL bvappendoptionsprefix_(BV *bv,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL bvgetoptionsprefix_(BV *bv,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL bvgetoptionsprefix_(BV *bv,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -72,7 +72,7 @@ PETSC_EXTERN void PETSC_STDCALL bvgetoptionsprefix_(BV *bv,char *prefix PETSC_MI
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL bvview_(BV *bv,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL bvview_(BV *bv,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
diff --git a/src/sys/classes/ds/impls/ghep/dsghep.c b/src/sys/classes/ds/impls/ghep/dsghep.c
index 84cfc132b..9d3cd7bd7 100644
--- a/src/sys/classes/ds/impls/ghep/dsghep.c
+++ b/src/sys/classes/ds/impls/ghep/dsghep.c
@@ -212,7 +212,7 @@ PetscErrorCode DSHermitian_GHEP(DS ds,DSMatType m,PetscBool *flg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_GHEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_GHEP(DS ds)
 {
   PetscFunctionBegin;
   ds->ops->allocate      = DSAllocate_GHEP;
diff --git a/src/sys/classes/ds/impls/ghiep/dsghiep.c b/src/sys/classes/ds/impls/ghiep/dsghiep.c
index f966afa5d..2cc1f1ec6 100644
--- a/src/sys/classes/ds/impls/ghiep/dsghiep.c
+++ b/src/sys/classes/ds/impls/ghiep/dsghiep.c
@@ -933,7 +933,7 @@ PetscErrorCode DSHermitian_GHIEP(DS ds,DSMatType m,PetscBool *flg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_GHIEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_GHIEP(DS ds)
 {
   PetscFunctionBegin;
   ds->ops->allocate      = DSAllocate_GHIEP;
diff --git a/src/sys/classes/ds/impls/gnhep/dsgnhep.c b/src/sys/classes/ds/impls/gnhep/dsgnhep.c
index ee8cf9d93..7b2d47483 100644
--- a/src/sys/classes/ds/impls/gnhep/dsgnhep.c
+++ b/src/sys/classes/ds/impls/gnhep/dsgnhep.c
@@ -595,7 +595,7 @@ PetscErrorCode DSSynchronize_GNHEP(DS ds,PetscScalar eigr[],PetscScalar eigi[])
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_GNHEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_GNHEP(DS ds)
 {
   PetscFunctionBegin;
   ds->ops->allocate      = DSAllocate_GNHEP;
diff --git a/src/sys/classes/ds/impls/hep/dshep.c b/src/sys/classes/ds/impls/hep/dshep.c
index aca136a89..aed8762c8 100644
--- a/src/sys/classes/ds/impls/hep/dshep.c
+++ b/src/sys/classes/ds/impls/hep/dshep.c
@@ -855,7 +855,7 @@ PetscErrorCode DSHermitian_HEP(DS ds,DSMatType m,PetscBool *flg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_HEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_HEP(DS ds)
 {
   PetscFunctionBegin;
   ds->ops->allocate      = DSAllocate_HEP;
diff --git a/src/sys/classes/ds/impls/nep/dsnep.c b/src/sys/classes/ds/impls/nep/dsnep.c
index 72ae244c3..15e892f08 100644
--- a/src/sys/classes/ds/impls/nep/dsnep.c
+++ b/src/sys/classes/ds/impls/nep/dsnep.c
@@ -461,7 +461,7 @@ PetscErrorCode DSDestroy_NEP(DS ds)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_NEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_NEP(DS ds)
 {
   DS_NEP         *ctx;
   PetscErrorCode ierr;
diff --git a/src/sys/classes/ds/impls/nhep/dsnhep.c b/src/sys/classes/ds/impls/nhep/dsnhep.c
index 1e60757f0..72bb0b5b7 100644
--- a/src/sys/classes/ds/impls/nhep/dsnhep.c
+++ b/src/sys/classes/ds/impls/nhep/dsnhep.c
@@ -777,7 +777,7 @@ PetscErrorCode DSTranslateHarmonic_NHEP(DS ds,PetscScalar tau,PetscReal beta,Pet
 #endif
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_NHEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_NHEP(DS ds)
 {
   PetscFunctionBegin;
   ds->ops->allocate      = DSAllocate_NHEP;
diff --git a/src/sys/classes/ds/impls/pep/dspep.c b/src/sys/classes/ds/impls/pep/dspep.c
index fcf3c9f04..ead4be7c1 100644
--- a/src/sys/classes/ds/impls/pep/dspep.c
+++ b/src/sys/classes/ds/impls/pep/dspep.c
@@ -509,7 +509,7 @@ PetscErrorCode DSMatGetSize_PEP(DS ds,DSMatType t,PetscInt *rows,PetscInt *cols)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_PEP(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_PEP(DS ds)
 {
   DS_PEP         *ctx;
   PetscErrorCode ierr;
diff --git a/src/sys/classes/ds/impls/pep/ftn-custom/zdspepf.c b/src/sys/classes/ds/impls/pep/ftn-custom/zdspepf.c
index d45161837..57d1e7ddf 100644
--- a/src/sys/classes/ds/impls/pep/ftn-custom/zdspepf.c
+++ b/src/sys/classes/ds/impls/pep/ftn-custom/zdspepf.c
@@ -19,13 +19,13 @@
 #define dspepgetcoefficients_    dspepgetcoefficients
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL dspepsetcoefficients_(DS *ds,PetscReal *pbc,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL dspepsetcoefficients_(DS *ds,PetscReal *pbc,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLREAL(pbc);
   *ierr = DSPEPSetCoefficients(*ds,pbc);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dspepgetcoefficients_(DS *ds,PetscReal *pbc,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL dspepgetcoefficients_(DS *ds,PetscReal *pbc,PetscErrorCode *ierr)
 {
   PetscReal *opbc;
   PetscInt  d;
diff --git a/src/sys/classes/ds/impls/svd/dssvd.c b/src/sys/classes/ds/impls/svd/dssvd.c
index 9e1e8d96e..fc82b3530 100644
--- a/src/sys/classes/ds/impls/svd/dssvd.c
+++ b/src/sys/classes/ds/impls/svd/dssvd.c
@@ -356,7 +356,7 @@ PetscErrorCode DSMatGetSize_SVD(DS ds,DSMatType t,PetscInt *rows,PetscInt *cols)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_SVD(DS ds)
+SLEPC_EXTERN PetscErrorCode DSCreate_SVD(DS ds)
 {
   PetscFunctionBegin;
   ds->ops->allocate      = DSAllocate_SVD;
diff --git a/src/sys/classes/ds/interface/dsbasic.c b/src/sys/classes/ds/interface/dsbasic.c
index 1fc1b041f..058f545ac 100644
--- a/src/sys/classes/ds/interface/dsbasic.c
+++ b/src/sys/classes/ds/interface/dsbasic.c
@@ -927,14 +927,14 @@ PetscErrorCode DSRegister(const char *name,PetscErrorCode (*function)(DS))
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode DSCreate_HEP(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_NHEP(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_GHEP(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_GHIEP(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_GNHEP(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_SVD(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_PEP(DS);
-PETSC_EXTERN PetscErrorCode DSCreate_NEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_HEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_NHEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_GHEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_GHIEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_GNHEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_SVD(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_PEP(DS);
+SLEPC_EXTERN PetscErrorCode DSCreate_NEP(DS);
 
 /*@C
    DSRegisterAll - Registers all of the direct solvers in the DS package.
diff --git a/src/sys/classes/ds/interface/ftn-custom/zdsf.c b/src/sys/classes/ds/interface/ftn-custom/zdsf.c
index 8329e167c..2fb59febf 100644
--- a/src/sys/classes/ds/interface/ftn-custom/zdsf.c
+++ b/src/sys/classes/ds/interface/ftn-custom/zdsf.c
@@ -33,7 +33,7 @@
 #define dssort_                   dssort
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL dssettype_(DS *ds,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL dssettype_(DS *ds,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -42,7 +42,7 @@ PETSC_EXTERN void PETSC_STDCALL dssettype_(DS *ds,char *type PETSC_MIXED_LEN(len
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dsgettype_(DS *ds,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL dsgettype_(DS *ds,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   DSType tname;
 
@@ -51,7 +51,7 @@ PETSC_EXTERN void PETSC_STDCALL dsgettype_(DS *ds,char *name PETSC_MIXED_LEN(len
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dssetoptionsprefix_(DS *ds,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL dssetoptionsprefix_(DS *ds,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -60,7 +60,7 @@ PETSC_EXTERN void PETSC_STDCALL dssetoptionsprefix_(DS *ds,char *prefix PETSC_MI
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dsappendoptionsprefix_(DS *ds,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL dsappendoptionsprefix_(DS *ds,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -69,7 +69,7 @@ PETSC_EXTERN void PETSC_STDCALL dsappendoptionsprefix_(DS *ds,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dsgetoptionsprefix_(DS *ds,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL dsgetoptionsprefix_(DS *ds,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -78,28 +78,28 @@ PETSC_EXTERN void PETSC_STDCALL dsgetoptionsprefix_(DS *ds,char *prefix PETSC_MI
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dsview_(DS *ds,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL dsview_(DS *ds,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = DSView(*ds,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dsviewmat_(DS *ds,PetscViewer *viewer,DSMatType *m,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL dsviewmat_(DS *ds,PetscViewer *viewer,DSMatType *m,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = DSViewMat(*ds,v,*m);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dsvectors_(DS *ds,DSMatType *mat,PetscInt *j,PetscReal *rnorm,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL dsvectors_(DS *ds,DSMatType *mat,PetscInt *j,PetscReal *rnorm,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLINTEGER(j);
   CHKFORTRANNULLREAL(rnorm);
   *ierr = DSVectors(*ds,*mat,j,rnorm);
 }
 
-PETSC_EXTERN void PETSC_STDCALL dssort_(DS *ds,PetscScalar *eigr,PetscScalar *eigi,PetscScalar *rr,PetscScalar *ri,PetscInt *k,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL dssort_(DS *ds,PetscScalar *eigr,PetscScalar *eigi,PetscScalar *rr,PetscScalar *ri,PetscInt *k,PetscErrorCode *ierr)
 {
   CHKFORTRANNULLSCALAR(eigr);
   CHKFORTRANNULLSCALAR(eigi);
diff --git a/src/sys/classes/fn/impls/combine/fncombine.c b/src/sys/classes/fn/impls/combine/fncombine.c
index 9419f0a95..b254c8fb9 100644
--- a/src/sys/classes/fn/impls/combine/fncombine.c
+++ b/src/sys/classes/fn/impls/combine/fncombine.c
@@ -373,7 +373,7 @@ PetscErrorCode FNDestroy_Combine(FN fn)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Combine(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Combine(FN fn)
 {
   PetscErrorCode ierr;
   FN_COMBINE     *ctx;
diff --git a/src/sys/classes/fn/impls/exp/fnexp.c b/src/sys/classes/fn/impls/exp/fnexp.c
index b3001f180..11b402150 100644
--- a/src/sys/classes/fn/impls/exp/fnexp.c
+++ b/src/sys/classes/fn/impls/exp/fnexp.c
@@ -1183,7 +1183,7 @@ PetscErrorCode FNView_Exp(FN fn,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Exp(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Exp(FN fn)
 {
   PetscFunctionBegin;
   fn->ops->evaluatefunction       = FNEvaluateFunction_Exp;
diff --git a/src/sys/classes/fn/impls/invsqrt/fninvsqrt.c b/src/sys/classes/fn/impls/invsqrt/fninvsqrt.c
index 4b5a0c7cc..1f6b41457 100644
--- a/src/sys/classes/fn/impls/invsqrt/fninvsqrt.c
+++ b/src/sys/classes/fn/impls/invsqrt/fninvsqrt.c
@@ -182,7 +182,7 @@ PetscErrorCode FNView_Invsqrt(FN fn,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Invsqrt(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Invsqrt(FN fn)
 {
   PetscFunctionBegin;
   fn->ops->evaluatefunction          = FNEvaluateFunction_Invsqrt;
diff --git a/src/sys/classes/fn/impls/log/fnlog.c b/src/sys/classes/fn/impls/log/fnlog.c
index 952def452..474b5a01f 100644
--- a/src/sys/classes/fn/impls/log/fnlog.c
+++ b/src/sys/classes/fn/impls/log/fnlog.c
@@ -66,7 +66,7 @@ PetscErrorCode FNView_Log(FN fn,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Log(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Log(FN fn)
 {
   PetscFunctionBegin;
   fn->ops->evaluatefunction    = FNEvaluateFunction_Log;
diff --git a/src/sys/classes/fn/impls/phi/fnphi.c b/src/sys/classes/fn/impls/phi/fnphi.c
index f726ed584..393ff0579 100644
--- a/src/sys/classes/fn/impls/phi/fnphi.c
+++ b/src/sys/classes/fn/impls/phi/fnphi.c
@@ -218,7 +218,7 @@ PetscErrorCode FNDestroy_Phi(FN fn)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Phi(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Phi(FN fn)
 {
   PetscErrorCode ierr;
   FN_PHI         *ctx;
diff --git a/src/sys/classes/fn/impls/rational/fnrational.c b/src/sys/classes/fn/impls/rational/fnrational.c
index d8ffb9f73..e83bd68cb 100644
--- a/src/sys/classes/fn/impls/rational/fnrational.c
+++ b/src/sys/classes/fn/impls/rational/fnrational.c
@@ -507,7 +507,7 @@ PetscErrorCode FNDestroy_Rational(FN fn)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Rational(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Rational(FN fn)
 {
   PetscErrorCode ierr;
   FN_RATIONAL    *ctx;
diff --git a/src/sys/classes/fn/impls/rational/ftn-custom/zrational.c b/src/sys/classes/fn/impls/rational/ftn-custom/zrational.c
index dd3e9ab64..cb180273e 100644
--- a/src/sys/classes/fn/impls/rational/ftn-custom/zrational.c
+++ b/src/sys/classes/fn/impls/rational/ftn-custom/zrational.c
@@ -39,39 +39,39 @@
 #define fnrationalgetdenominator11_ fnrationalgetdenominator11
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalsetnumerator_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalsetnumerator_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
 {
   CHKFORTRANNULLSCALAR(pcoeff);
   *ierr = FNRationalSetNumerator(*fn,*np,pcoeff);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalsetnumerator0_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalsetnumerator0_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
 {
   fnrationalsetnumerator_(fn,np,pcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalsetnumerator1_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalsetnumerator1_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
 {
   fnrationalsetnumerator_(fn,np,pcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalsetdenominator_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalsetdenominator_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   CHKFORTRANNULLSCALAR(qcoeff);
   *ierr = FNRationalSetDenominator(*fn,*nq,qcoeff);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalsetdenominator0_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalsetdenominator0_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalsetdenominator_(fn,nq,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalsetdenominator1_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalsetdenominator1_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalsetdenominator_(fn,nq,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetnumerator_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetnumerator_(FN *fn,PetscInt *np,PetscScalar *pcoeff,int *ierr)
 {
   PetscScalar *ocoeff;
   PetscInt    n;
@@ -83,27 +83,27 @@ PETSC_EXTERN void PETSC_STDCALL fnrationalgetnumerator_(FN *fn,PetscInt *np,Pets
   *ierr = PetscFree(ocoeff);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetnumerator00_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetnumerator00_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetnumerator_(fn,np,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetnumerator10_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetnumerator10_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetnumerator_(fn,np,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetnumerator01_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetnumerator01_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetnumerator_(fn,np,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetnumerator11_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetnumerator11_(FN *fn,PetscInt *np,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetnumerator_(fn,np,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetdenominator_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetdenominator_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   PetscScalar *ocoeff;
   PetscInt    n;
@@ -115,22 +115,22 @@ PETSC_EXTERN void PETSC_STDCALL fnrationalgetdenominator_(FN *fn,PetscInt *nq,Pe
   *ierr = PetscFree(ocoeff);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetdenominator00_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetdenominator00_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetdenominator_(fn,nq,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetdenominator10_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetdenominator10_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetdenominator_(fn,nq,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetdenominator01_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetdenominator01_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetdenominator_(fn,nq,qcoeff,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnrationalgetdenominator11_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnrationalgetdenominator11_(FN *fn,PetscInt *nq,PetscScalar *qcoeff,int *ierr)
 {
   fnrationalgetdenominator_(fn,nq,qcoeff,ierr);
 }
diff --git a/src/sys/classes/fn/impls/sqrt/fnsqrt.c b/src/sys/classes/fn/impls/sqrt/fnsqrt.c
index 51a9aaeea..36bb4bc0b 100644
--- a/src/sys/classes/fn/impls/sqrt/fnsqrt.c
+++ b/src/sys/classes/fn/impls/sqrt/fnsqrt.c
@@ -256,7 +256,7 @@ PetscErrorCode FNView_Sqrt(FN fn,PetscViewer viewer)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode FNCreate_Sqrt(FN fn)
+SLEPC_EXTERN PetscErrorCode FNCreate_Sqrt(FN fn)
 {
   PetscFunctionBegin;
   fn->ops->evaluatefunction          = FNEvaluateFunction_Sqrt;
diff --git a/src/sys/classes/fn/interface/fnregis.c b/src/sys/classes/fn/interface/fnregis.c
index ce3cd1008..7330035b9 100644
--- a/src/sys/classes/fn/interface/fnregis.c
+++ b/src/sys/classes/fn/interface/fnregis.c
@@ -10,13 +10,13 @@
 
 #include <slepc/private/fnimpl.h>      /*I "slepcfn.h" I*/
 
-PETSC_EXTERN PetscErrorCode FNCreate_Combine(FN);
-PETSC_EXTERN PetscErrorCode FNCreate_Rational(FN);
-PETSC_EXTERN PetscErrorCode FNCreate_Exp(FN);
-PETSC_EXTERN PetscErrorCode FNCreate_Log(FN);
-PETSC_EXTERN PetscErrorCode FNCreate_Phi(FN);
-PETSC_EXTERN PetscErrorCode FNCreate_Sqrt(FN);
-PETSC_EXTERN PetscErrorCode FNCreate_Invsqrt(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Combine(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Rational(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Exp(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Log(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Phi(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Sqrt(FN);
+SLEPC_EXTERN PetscErrorCode FNCreate_Invsqrt(FN);
 
 /*@C
    FNRegisterAll - Registers all of the math functions in the FN package.
diff --git a/src/sys/classes/fn/interface/ftn-custom/zfnf.c b/src/sys/classes/fn/interface/ftn-custom/zfnf.c
index 881eff566..ec526bffd 100644
--- a/src/sys/classes/fn/interface/ftn-custom/zfnf.c
+++ b/src/sys/classes/fn/interface/ftn-custom/zfnf.c
@@ -28,14 +28,14 @@
 #define fngettype_                 fngettype
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL fnview_(FN *fn,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL fnview_(FN *fn,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
   *ierr = FNView(*fn,v);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnsetoptionsprefix_(FN *fn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL fnsetoptionsprefix_(FN *fn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -44,7 +44,7 @@ PETSC_EXTERN void PETSC_STDCALL fnsetoptionsprefix_(FN *fn,char *prefix PETSC_MI
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnappendoptionsprefix_(FN *fn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL fnappendoptionsprefix_(FN *fn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -53,7 +53,7 @@ PETSC_EXTERN void PETSC_STDCALL fnappendoptionsprefix_(FN *fn,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fngetoptionsprefix_(FN *fn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL fngetoptionsprefix_(FN *fn,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -62,7 +62,7 @@ PETSC_EXTERN void PETSC_STDCALL fngetoptionsprefix_(FN *fn,char *prefix PETSC_MI
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fnsettype_(FN *fn,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL fnsettype_(FN *fn,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -71,7 +71,7 @@ PETSC_EXTERN void PETSC_STDCALL fnsettype_(FN *fn,char *type PETSC_MIXED_LEN(len
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL fngettype_(FN *fn,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL fngettype_(FN *fn,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   FNType tname;
 
diff --git a/src/sys/classes/rg/impls/ellipse/rgellipse.c b/src/sys/classes/rg/impls/ellipse/rgellipse.c
index 52ad8117c..abde92468 100644
--- a/src/sys/classes/rg/impls/ellipse/rgellipse.c
+++ b/src/sys/classes/rg/impls/ellipse/rgellipse.c
@@ -249,7 +249,7 @@ PetscErrorCode RGDestroy_Ellipse(RG rg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode RGCreate_Ellipse(RG rg)
+SLEPC_EXTERN PetscErrorCode RGCreate_Ellipse(RG rg)
 {
   RG_ELLIPSE     *ellipse;
   PetscErrorCode ierr;
diff --git a/src/sys/classes/rg/impls/interval/rginterval.c b/src/sys/classes/rg/impls/interval/rginterval.c
index da9f589bb..db7814663 100644
--- a/src/sys/classes/rg/impls/interval/rginterval.c
+++ b/src/sys/classes/rg/impls/interval/rginterval.c
@@ -280,7 +280,7 @@ PetscErrorCode RGDestroy_Interval(RG rg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode RGCreate_Interval(RG rg)
+SLEPC_EXTERN PetscErrorCode RGCreate_Interval(RG rg)
 {
   RG_INTERVAL    *interval;
   PetscErrorCode ierr;
diff --git a/src/sys/classes/rg/impls/polygon/rgpolygon.c b/src/sys/classes/rg/impls/polygon/rgpolygon.c
index e914bb03e..2742759aa 100644
--- a/src/sys/classes/rg/impls/polygon/rgpolygon.c
+++ b/src/sys/classes/rg/impls/polygon/rgpolygon.c
@@ -430,7 +430,7 @@ PetscErrorCode RGDestroy_Polygon(RG rg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode RGCreate_Polygon(RG rg)
+SLEPC_EXTERN PetscErrorCode RGCreate_Polygon(RG rg)
 {
   RG_POLYGON     *polygon;
   PetscErrorCode ierr;
diff --git a/src/sys/classes/rg/impls/ring/rgring.c b/src/sys/classes/rg/impls/ring/rgring.c
index 5f8187174..b0dc9540e 100644
--- a/src/sys/classes/rg/impls/ring/rgring.c
+++ b/src/sys/classes/rg/impls/ring/rgring.c
@@ -373,7 +373,7 @@ PetscErrorCode RGDestroy_Ring(RG rg)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode RGCreate_Ring(RG rg)
+SLEPC_EXTERN PetscErrorCode RGCreate_Ring(RG rg)
 {
   RG_RING        *ring;
   PetscErrorCode ierr;
diff --git a/src/sys/classes/rg/interface/ftn-custom/zrgf.c b/src/sys/classes/rg/interface/ftn-custom/zrgf.c
index 317ab20d9..4ebbf1f0e 100644
--- a/src/sys/classes/rg/interface/ftn-custom/zrgf.c
+++ b/src/sys/classes/rg/interface/ftn-custom/zrgf.c
@@ -27,7 +27,7 @@
 #define rgview_                   rgview
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL rgsettype_(RG *rg,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL rgsettype_(RG *rg,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -36,7 +36,7 @@ PETSC_EXTERN void PETSC_STDCALL rgsettype_(RG *rg,char *type PETSC_MIXED_LEN(len
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL rggettype_(RG *rg,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL rggettype_(RG *rg,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   RGType tname;
 
@@ -45,7 +45,7 @@ PETSC_EXTERN void PETSC_STDCALL rggettype_(RG *rg,char *name PETSC_MIXED_LEN(len
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL rgsetoptionsprefix_(RG *rg,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL rgsetoptionsprefix_(RG *rg,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -54,7 +54,7 @@ PETSC_EXTERN void PETSC_STDCALL rgsetoptionsprefix_(RG *rg,char *prefix PETSC_MI
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL rgappendoptionsprefix_(RG *rg,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL rgappendoptionsprefix_(RG *rg,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -63,7 +63,7 @@ PETSC_EXTERN void PETSC_STDCALL rgappendoptionsprefix_(RG *rg,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL rggetoptionsprefix_(RG *rg,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL rggetoptionsprefix_(RG *rg,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -72,7 +72,7 @@ PETSC_EXTERN void PETSC_STDCALL rggetoptionsprefix_(RG *rg,char *prefix PETSC_MI
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL rgview_(RG *rg,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL rgview_(RG *rg,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
diff --git a/src/sys/classes/rg/interface/rgregis.c b/src/sys/classes/rg/interface/rgregis.c
index 88abfd961..942e51095 100644
--- a/src/sys/classes/rg/interface/rgregis.c
+++ b/src/sys/classes/rg/interface/rgregis.c
@@ -10,10 +10,10 @@
 
 #include <slepc/private/rgimpl.h>      /*I "slepcrg.h" I*/
 
-PETSC_EXTERN PetscErrorCode RGCreate_Interval(RG);
-PETSC_EXTERN PetscErrorCode RGCreate_Ellipse(RG);
-PETSC_EXTERN PetscErrorCode RGCreate_Ring(RG);
-PETSC_EXTERN PetscErrorCode RGCreate_Polygon(RG);
+SLEPC_EXTERN PetscErrorCode RGCreate_Interval(RG);
+SLEPC_EXTERN PetscErrorCode RGCreate_Ellipse(RG);
+SLEPC_EXTERN PetscErrorCode RGCreate_Ring(RG);
+SLEPC_EXTERN PetscErrorCode RGCreate_Polygon(RG);
 
 /*@C
    RGRegisterAll - Registers all of the regions in the RG package.
diff --git a/src/sys/classes/st/impls/cayley/cayley.c b/src/sys/classes/st/impls/cayley/cayley.c
index 592170bd6..a3778f387 100644
--- a/src/sys/classes/st/impls/cayley/cayley.c
+++ b/src/sys/classes/st/impls/cayley/cayley.c
@@ -345,7 +345,7 @@ PetscErrorCode STDestroy_Cayley(ST st)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode STCreate_Cayley(ST st)
+SLEPC_EXTERN PetscErrorCode STCreate_Cayley(ST st)
 {
   PetscErrorCode ierr;
   ST_CAYLEY      *ctx;
diff --git a/src/sys/classes/st/impls/filter/filter.c b/src/sys/classes/st/impls/filter/filter.c
index 97e105b26..df596402a 100644
--- a/src/sys/classes/st/impls/filter/filter.c
+++ b/src/sys/classes/st/impls/filter/filter.c
@@ -408,7 +408,7 @@ PetscErrorCode STDestroy_Filter(ST st)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode STCreate_Filter(ST st)
+SLEPC_EXTERN PetscErrorCode STCreate_Filter(ST st)
 {
   PetscErrorCode ierr;
   ST_FILTER      *ctx;
diff --git a/src/sys/classes/st/impls/precond/precond.c b/src/sys/classes/st/impls/precond/precond.c
index f814ac9f3..19929b76e 100644
--- a/src/sys/classes/st/impls/precond/precond.c
+++ b/src/sys/classes/st/impls/precond/precond.c
@@ -330,7 +330,7 @@ PetscErrorCode STDestroy_Precond(ST st)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode STCreate_Precond(ST st)
+SLEPC_EXTERN PetscErrorCode STCreate_Precond(ST st)
 {
   PetscErrorCode ierr;
   ST_PRECOND     *ctx;
diff --git a/src/sys/classes/st/impls/shell/ftn-custom/zshell.c b/src/sys/classes/st/impls/shell/ftn-custom/zshell.c
index 0cc9c7773..954c0ced6 100644
--- a/src/sys/classes/st/impls/shell/ftn-custom/zshell.c
+++ b/src/sys/classes/st/impls/shell/ftn-custom/zshell.c
@@ -45,24 +45,24 @@ static PetscErrorCode ourshellbacktransform(ST st,PetscInt n,PetscScalar *eigr,P
   PetscObjectUseFortranCallback(st,_cb.backtransform,(ST*,PetscInt*,PetscScalar*,PetscScalar*,PetscErrorCode*),(&st,&n,eigr,eigi,&ierr));
 }
 
-PETSC_EXTERN void PETSC_STDCALL stshellgetcontext_(ST *st,void **ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL stshellgetcontext_(ST *st,void **ctx,PetscErrorCode *ierr)
 {
   *ierr = STShellGetContext(*st,ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stshellsetapply_(ST *st,void (PETSC_STDCALL *apply)(void*,Vec*,Vec*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL stshellsetapply_(ST *st,void (PETSC_STDCALL *apply)(void*,Vec*,Vec*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   *ierr = PetscObjectSetFortranCallback((PetscObject)*st,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.apply,(PetscVoidFunction)apply,NULL); if (*ierr) return;
   *ierr = STShellSetApply(*st,ourshellapply);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stshellsetapplytranspose_(ST *st,void (PETSC_STDCALL *applytranspose)(void*,Vec*,Vec*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL stshellsetapplytranspose_(ST *st,void (PETSC_STDCALL *applytranspose)(void*,Vec*,Vec*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   *ierr = PetscObjectSetFortranCallback((PetscObject)*st,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.applytranspose,(PetscVoidFunction)applytranspose,NULL); if (*ierr) return;
   *ierr = STShellSetApplyTranspose(*st,ourshellapplytranspose);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stshellsetbacktransform_(ST *st,void (PETSC_STDCALL *backtransform)(void*,PetscScalar*,PetscScalar*,PetscErrorCode*),PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL stshellsetbacktransform_(ST *st,void (PETSC_STDCALL *backtransform)(void*,PetscScalar*,PetscScalar*,PetscErrorCode*),PetscErrorCode *ierr)
 {
   *ierr = PetscObjectSetFortranCallback((PetscObject)*st,PETSC_FORTRAN_CALLBACK_CLASS,&_cb.backtransform,(PetscVoidFunction)backtransform,NULL); if (*ierr) return;
   *ierr = STShellSetBackTransform(*st,ourshellbacktransform);
diff --git a/src/sys/classes/st/impls/shell/shell.c b/src/sys/classes/st/impls/shell/shell.c
index 46b0a8d48..f6e706068 100644
--- a/src/sys/classes/st/impls/shell/shell.c
+++ b/src/sys/classes/st/impls/shell/shell.c
@@ -294,7 +294,7 @@ $             STShellSetBackTransform(st,backtr);    (optional)
 
 M*/
 
-PETSC_EXTERN PetscErrorCode STCreate_Shell(ST st)
+SLEPC_EXTERN PetscErrorCode STCreate_Shell(ST st)
 {
   PetscErrorCode ierr;
   ST_SHELL       *ctx;
diff --git a/src/sys/classes/st/impls/shift/shift.c b/src/sys/classes/st/impls/shift/shift.c
index 407ca7f89..55966e47c 100644
--- a/src/sys/classes/st/impls/shift/shift.c
+++ b/src/sys/classes/st/impls/shift/shift.c
@@ -145,7 +145,7 @@ PetscErrorCode STSetShift_Shift(ST st,PetscScalar newshift)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode STCreate_Shift(ST st)
+SLEPC_EXTERN PetscErrorCode STCreate_Shift(ST st)
 {
   PetscFunctionBegin;
   st->ops->apply           = STApply_Shift;
diff --git a/src/sys/classes/st/impls/sinvert/sinvert.c b/src/sys/classes/st/impls/sinvert/sinvert.c
index 6e57f2a08..9ee8ce260 100644
--- a/src/sys/classes/st/impls/sinvert/sinvert.c
+++ b/src/sys/classes/st/impls/sinvert/sinvert.c
@@ -168,7 +168,7 @@ PetscErrorCode STSetShift_Sinvert(ST st,PetscScalar newshift)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode STCreate_Sinvert(ST st)
+SLEPC_EXTERN PetscErrorCode STCreate_Sinvert(ST st)
 {
   PetscFunctionBegin;
   st->ops->apply           = STApply_Sinvert;
diff --git a/src/sys/classes/st/interface/ftn-custom/zstf.c b/src/sys/classes/st/interface/ftn-custom/zstf.c
index b55bfbb91..2c29f9484 100644
--- a/src/sys/classes/st/interface/ftn-custom/zstf.c
+++ b/src/sys/classes/st/interface/ftn-custom/zstf.c
@@ -27,7 +27,7 @@
 #define stview_                   stview
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL stsettype_(ST *st,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL stsettype_(ST *st,char *type PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -36,7 +36,7 @@ PETSC_EXTERN void PETSC_STDCALL stsettype_(ST *st,char *type PETSC_MIXED_LEN(len
   FREECHAR(type,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stgettype_(ST *st,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL stgettype_(ST *st,char *name PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   STType tname;
 
@@ -45,7 +45,7 @@ PETSC_EXTERN void PETSC_STDCALL stgettype_(ST *st,char *name PETSC_MIXED_LEN(len
   FIXRETURNCHAR(PETSC_TRUE,name,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stsetoptionsprefix_(ST *st,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL stsetoptionsprefix_(ST *st,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -54,7 +54,7 @@ PETSC_EXTERN void PETSC_STDCALL stsetoptionsprefix_(ST *st,char *prefix PETSC_MI
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stappendoptionsprefix_(ST *st,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL stappendoptionsprefix_(ST *st,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   char *t;
 
@@ -63,7 +63,7 @@ PETSC_EXTERN void PETSC_STDCALL stappendoptionsprefix_(ST *st,char *prefix PETSC
   FREECHAR(prefix,t);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stgetoptionsprefix_(ST *st,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL stgetoptionsprefix_(ST *st,char *prefix PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   const char *tname;
 
@@ -72,7 +72,7 @@ PETSC_EXTERN void PETSC_STDCALL stgetoptionsprefix_(ST *st,char *prefix PETSC_MI
   FIXRETURNCHAR(PETSC_TRUE,prefix,len);
 }
 
-PETSC_EXTERN void PETSC_STDCALL stview_(ST *st,PetscViewer *viewer,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL stview_(ST *st,PetscViewer *viewer,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(viewer,v);
diff --git a/src/sys/classes/st/interface/stregis.c b/src/sys/classes/st/interface/stregis.c
index bc38017bb..155b75447 100644
--- a/src/sys/classes/st/interface/stregis.c
+++ b/src/sys/classes/st/interface/stregis.c
@@ -10,12 +10,12 @@
 
 #include <slepc/private/stimpl.h>          /*I   "slepcst.h"   I*/
 
-PETSC_EXTERN PetscErrorCode STCreate_Shell(ST);
-PETSC_EXTERN PetscErrorCode STCreate_Shift(ST);
-PETSC_EXTERN PetscErrorCode STCreate_Sinvert(ST);
-PETSC_EXTERN PetscErrorCode STCreate_Cayley(ST);
-PETSC_EXTERN PetscErrorCode STCreate_Precond(ST);
-PETSC_EXTERN PetscErrorCode STCreate_Filter(ST);
+SLEPC_EXTERN PetscErrorCode STCreate_Shell(ST);
+SLEPC_EXTERN PetscErrorCode STCreate_Shift(ST);
+SLEPC_EXTERN PetscErrorCode STCreate_Sinvert(ST);
+SLEPC_EXTERN PetscErrorCode STCreate_Cayley(ST);
+SLEPC_EXTERN PetscErrorCode STCreate_Precond(ST);
+SLEPC_EXTERN PetscErrorCode STCreate_Filter(ST);
 
 /*@C
    STRegisterAll - Registers all of the spectral transformations in the ST package.
diff --git a/src/sys/classes/st/interface/stsolve.c b/src/sys/classes/st/interface/stsolve.c
index fcd29adc1..0a6e64275 100644
--- a/src/sys/classes/st/interface/stsolve.c
+++ b/src/sys/classes/st/interface/stsolve.c
@@ -527,7 +527,7 @@ PetscErrorCode STMatSetUp(ST st,PetscScalar sigma,PetscScalar *coeffs)
 -  nw - number of work vectors to allocate
 
    Developers Note:
-   This is PETSC_EXTERN because it may be required by shell STs.
+   This is SLEPC_EXTERN because it may be required by shell STs.
 
    Level: developer
 @*/
diff --git a/src/sys/dlregisslepc.c b/src/sys/dlregisslepc.c
index c0ded3424..1716ce46e 100644
--- a/src/sys/dlregisslepc.c
+++ b/src/sys/dlregisslepc.c
@@ -17,12 +17,12 @@
 #if defined(PETSC_HAVE_DYNAMIC_LIBRARIES)
 
 #if defined(PETSC_USE_SINGLE_LIBRARY)
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepceps(void);
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcnep(void);
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcpep(void);
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcsvd(void);
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcmfn(void);
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepclme(void);
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepceps(void);
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcnep(void);
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcpep(void);
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcsvd(void);
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcmfn(void);
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepclme(void);
 #endif
 
 /*
@@ -32,9 +32,9 @@ PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepclme(void);
   This one registers all the basic objects ST, FN, DS, BV, RG.
  */
 #if defined(PETSC_USE_SINGLE_LIBRARY)
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepc(void)
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepc(void)
 #else
-PETSC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcsys(void)
+SLEPC_EXTERN PetscErrorCode PetscDLLibraryRegister_slepcsys(void)
 #endif
 {
   PetscErrorCode ierr;
diff --git a/src/sys/ftn-custom/zslepc_start.c b/src/sys/ftn-custom/zslepc_start.c
index e45cf328d..f77391814 100644
--- a/src/sys/ftn-custom/zslepc_start.c
+++ b/src/sys/ftn-custom/zslepc_start.c
@@ -30,9 +30,9 @@
 #define slepcfinalize_                slepcfinalize
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL petscinitialize_(char *filename PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len));
-PETSC_EXTERN void PETSC_STDCALL petscinitializenoarguments_(PetscErrorCode *ierr);
-PETSC_EXTERN void PETSC_STDCALL petscfinalize_(PetscErrorCode *ierr);
+SLEPC_EXTERN void PETSC_STDCALL petscinitialize_(char *filename PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len));
+SLEPC_EXTERN void PETSC_STDCALL petscinitializenoarguments_(PetscErrorCode *ierr);
+SLEPC_EXTERN void PETSC_STDCALL petscfinalize_(PetscErrorCode *ierr);
 
 /*
     SlepcInitialize - Version called from Fortran.
@@ -79,17 +79,17 @@ static void slepcinitialize_internal(char *filename,PetscInt len,PetscBool argum
   if (*ierr) { (*PetscErrorPrintf)("SlepcInitialize:Calling PetscInfo()");return; }
 }
 
-PETSC_EXTERN void PETSC_STDCALL slepcinitialize_(char *filename PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
+SLEPC_EXTERN void PETSC_STDCALL slepcinitialize_(char *filename PETSC_MIXED_LEN(len),PetscErrorCode *ierr PETSC_END_LEN(len))
 {
   slepcinitialize_internal(filename,len,PETSC_TRUE,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL slepcinitializenoarguments_(PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL slepcinitializenoarguments_(PetscErrorCode *ierr)
 {
   slepcinitialize_internal(NULL,(PetscInt)0,PETSC_FALSE,ierr);
 }
 
-PETSC_EXTERN void PETSC_STDCALL slepcfinalize_(PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL slepcfinalize_(PetscErrorCode *ierr)
 {
   *ierr = PetscInfo(0,"SlepcFinalize called from Fortran\n");
   if (*ierr) { (*PetscErrorPrintf)("SlepcFinalize:Calling PetscInfo()");return; }
diff --git a/src/sys/ftn-custom/zslepc_startf.c b/src/sys/ftn-custom/zslepc_startf.c
index af71c45f4..4cd94e5b8 100644
--- a/src/sys/ftn-custom/zslepc_startf.c
+++ b/src/sys/ftn-custom/zslepc_startf.c
@@ -9,6 +9,7 @@
 */
 
 #include <petsc/private/fortranimpl.h>
+#include <slepcsys.h>
 
 #if defined(PETSC_HAVE_FORTRAN_CAPS)
 #define slepcinitializefortran_     SLEPCINITIALIZEFORTRAN
@@ -42,7 +43,7 @@ PetscErrorCode SlepcInitializeFortran(void)
   return 0;
 }
 
-PETSC_EXTERN void PETSC_STDCALL slepcinitializefortran_(PetscErrorCode *info)
+SLEPC_EXTERN void PETSC_STDCALL slepcinitializefortran_(PetscErrorCode *info)
 {
   *info = SlepcInitializeFortran();
 }
diff --git a/src/sys/ftn-custom/zslepcutil.c b/src/sys/ftn-custom/zslepcutil.c
index 7c58b30cf..f672e766a 100644
--- a/src/sys/ftn-custom/zslepcutil.c
+++ b/src/sys/ftn-custom/zslepcutil.c
@@ -23,25 +23,25 @@
 #define slepcgetversionnumber_        slepcgetversionnumber
 #endif
 
-PETSC_EXTERN void PETSC_STDCALL slepcconvmonitorcreate_(PetscViewer *vin,PetscViewerFormat *format,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void PETSC_STDCALL slepcconvmonitorcreate_(PetscViewer *vin,PetscViewerFormat *format,SlepcConvMonitor *ctx,PetscErrorCode *ierr)
 {
   PetscViewer v;
   PetscPatchDefaultViewers_Fortran(vin,v);
   *ierr = SlepcConvMonitorCreate(v,*format,ctx);
 }
 
-PETSC_EXTERN void slepcconvmonitordestroy_(SlepcConvMonitor *ctx,PetscErrorCode *ierr)
+SLEPC_EXTERN void slepcconvmonitordestroy_(SlepcConvMonitor *ctx,PetscErrorCode *ierr)
 {
   *ierr = SlepcConvMonitorDestroy(ctx);
 }
 
-PETSC_EXTERN void PETSC_STDCALL slepcgetversion_(char *version PETSC_MIXED_LEN(len1),int *ierr PETSC_END_LEN(len1))
+SLEPC_EXTERN void PETSC_STDCALL slepcgetversion_(char *version PETSC_MIXED_LEN(len1),int *ierr PETSC_END_LEN(len1))
 {
   *ierr = SlepcGetVersion(version,len1);
   FIXRETURNCHAR(PETSC_TRUE,version,len1);
 }
 
-PETSC_EXTERN void PETSC_STDCALL slepcgetversionnumber_(PetscInt *major,PetscInt *minor,PetscInt *subminor,PetscInt *release,PetscInt *ierr )
+SLEPC_EXTERN void PETSC_STDCALL slepcgetversionnumber_(PetscInt *major,PetscInt *minor,PetscInt *subminor,PetscInt *release,PetscInt *ierr )
 {
   CHKFORTRANNULLINTEGER(major);
   CHKFORTRANNULLINTEGER(minor);
diff --git a/src/sys/slepcinit.c b/src/sys/slepcinit.c
index 3557ab8a1..be07f0ebf 100644
--- a/src/sys/slepcinit.c
+++ b/src/sys/slepcinit.c
@@ -323,8 +323,6 @@ PetscErrorCode SlepcInitialized(PetscBool *isInitialized)
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscBool PetscBeganMPI;
-
 /*
    SlepcInitializeNoPointers - Calls SlepcInitialize() from C/C++ without the pointers
    to argc and args (analogue to PetscInitializeNoPointers).
diff --git a/src/sys/vec/veccomp.c b/src/sys/vec/veccomp.c
index 05f58847a..9042babdf 100644
--- a/src/sys/vec/veccomp.c
+++ b/src/sys/vec/veccomp.c
@@ -61,7 +61,7 @@ PETSC_STATIC_INLINE void AddNorm2(PetscReal *ssq,PetscReal *scale,PetscReal x)
   }
 }
 
-PETSC_EXTERN void SlepcSumNorm2_Local(void *in,void *out,PetscMPIInt *cnt,MPI_Datatype *datatype)
+SLEPC_EXTERN void SlepcSumNorm2_Local(void *in,void *out,PetscMPIInt *cnt,MPI_Datatype *datatype)
 {
   PetscInt  i,count = *cnt;
   PetscReal *xin = (PetscReal*)in,*xout = (PetscReal*)out;
@@ -279,7 +279,7 @@ static PetscErrorCode VecCreate_Comp_Private(Vec v,Vec *x,PetscInt nx,PetscBool
   PetscFunctionReturn(0);
 }
 
-PETSC_EXTERN PetscErrorCode VecCreate_Comp(Vec V)
+SLEPC_EXTERN PetscErrorCode VecCreate_Comp(Vec V)
 {
   PetscErrorCode ierr;
 
-- 
2.18.0.windows.1

