diff --git a/src/http/Connection.C b/src/http/Connection.C
index 70ecfd5..b24c817 100644
--- a/src/http/Connection.C
+++ b/src/http/Connection.C
@@ -339,7 +339,7 @@ void Connection::handleReadBody(ReplyPtr reply,
 				const asio_error_code& e,
 				std::size_t bytes_transferred)
 {
-  LOG_DEBUG(socket().native() << ": handleReadBody(): " << e.message());
+  LOG_DEBUG(socket().native_handle() << ": handleReadBody(): " << e.message());
 
   if (disconnectCallback_) {
     rcv_body_buffer_ = false;
@@ -350,7 +350,7 @@ void Connection::handleReadBody(ReplyPtr reply,
       disconnectCallback_ = boost::function<void()>();
       f();
     } else if (!e) {
-      LOG_ERROR(socket().native()
+      LOG_ERROR(socket().native_handle()
 		<< ": handleReadBody(): while waiting for disconnect, "
 		"received unexpected data, closing");
       close();
@@ -471,3 +471,4 @@ void Connection::handleWriteResponse(ReplyPtr reply,
 
 } // namespace server
 } // namespace http
+
diff --git a/src/http/Connection.h b/src/http/Connection.h
index 712f736..dabba21 100644
--- a/src/http/Connection.h
+++ b/src/http/Connection.h
@@ -72,7 +72,7 @@ public:
   virtual ~Connection();
 
   Server *server() const { return server_; }
-  asio::strand& strand() { return strand_; }
+  asio::io_service::strand& strand() { return strand_; }
 
   /// Stop all asynchronous operations associated with the connection.
   void scheduleStop();
@@ -113,7 +113,7 @@ protected:
   /// The manager for this connection.
   ConnectionManager& ConnectionManager_;
 
-  asio::strand strand_;
+  asio::io_service::strand strand_;
 
   void finishReply();
 
@@ -204,3 +204,4 @@ typedef boost::shared_ptr<Connection> ConnectionPtr;
 } // namespace http
 
 #endif // HTTP_CONNECTION_HPP
+
diff --git a/src/http/Reply.C b/src/http/Reply.C
index f7fe2aa..603b9ea 100644
--- a/src/http/Reply.C
+++ b/src/http/Reply.C
@@ -593,7 +593,7 @@ bool Reply::encodeNextContentBuffer(
       originalSize += bs;
 
       gzipStrm_.avail_in = bs;
-      gzipStrm_.next_in = (unsigned char *)asio::detail::buffer_cast_helper(b);
+      gzipStrm_.next_in = (unsigned char *)b.data();
 
       unsigned char out[16*1024];
       do {
@@ -642,3 +642,4 @@ bool Reply::encodeNextContentBuffer(
 
 } // namespace server
 } // namespace http
+
diff --git a/src/http/Server.h b/src/http/Server.h
index 3260a23..c924ed2 100644
--- a/src/http/Server.h
+++ b/src/http/Server.h
@@ -120,7 +120,7 @@ private:
   Wt::WLogger accessLogger_;
 
   /// The strand for handleTcpAccept(), handleSslAccept() and handleStop()
-  asio::strand accept_strand_;
+  asio::io_service::strand accept_strand_;
 
   /// Acceptor used to listen for incoming http connections.
   asio::ip::tcp::acceptor tcp_acceptor_;
@@ -164,3 +164,4 @@ void handleTimeout(asio_timer *timer,
 } // namespace http
 
 #endif // HTTP_SERVER_HPP
+
diff --git a/src/wt/WServerGLWidget.C b/src/wt/WServerGLWidget.C
index a1fb5ee..7e1d31e 100644
--- a/src/wt/WServerGLWidget.C
+++ b/src/wt/WServerGLWidget.C
@@ -36,8 +36,9 @@ typedef GLXContext (*glXCreateContextAttribsARBProc)(Display*, GLXFBConfig, GLXC
 #endif
 
 #ifdef WIN32_GL
-#include <GL/wglew.h>
+#define WIN32_LEAN_AND_MEAN
 #include <Windows.h>
+#include <GL/wglew.h>
 #endif
 
 #ifdef APPLE_GL
diff --git a/src/wt/http/Client.C b/src/wt/http/Client.C
index 2c4e07d..ca793d4 100644
--- a/src/wt/http/Client.C
+++ b/src/wt/http/Client.C
@@ -605,7 +605,7 @@ private:
 
 protected:
   WIOService& ioService_;
-  boost::asio::strand strand_;
+  boost::asio::io_service::strand strand_;
   tcp::resolver resolver_;
   boost::asio::streambuf requestBuf_;
   boost::asio::streambuf responseBuf_;
@@ -1060,3 +1060,4 @@ bool Client::parseUrl(const std::string &url, URL &parsedUrl)
 
   }
 }
+
