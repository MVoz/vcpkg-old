## # vcpkg_find_acquire_program
##
## Download or find a well-known tool.
##
## ## Usage
## ```cmake
## vcpkg_find_acquire_program(<VAR>)
## ```
## ## Parameters
## ### VAR
## This variable specifies both the program to be acquired as well as the out parameter that will be set to the path of the program executable.
##
## ## Notes
## The current list of programs includes:
##
## - 7Z
## - BISON
## - FLEX
## - GASPREPROCESSOR
## - PERL
## - PYTHON2
## - PYTHON3
## - JOM
## - MESON
## - NASM
## - NINJA
## - NUGET
## - YASM
## - RUBY
## - TCL
## - ARIA2 (Downloader)
##
## Note that msys2 has a dedicated helper function: [`vcpkg_acquire_msys`](vcpkg_acquire_msys.md).
##
## ## Examples
##
## * [ffmpeg](https://github.com/Microsoft/vcpkg/blob/master/ports/ffmpeg/portfile.cmake)
## * [openssl](https://github.com/Microsoft/vcpkg/blob/master/ports/openssl/portfile.cmake)
## * [qt5](https://github.com/Microsoft/vcpkg/blob/master/ports/qt5/portfile.cmake)
function(vcpkg_find_acquire_program VAR)
  set(EXPANDED_VAR ${${VAR}})
  if(EXPANDED_VAR)
    return()
  endif()

  unset(NOEXTRACT)
  unset(_vfa_RENAME)
  unset(SUBDIR)
  unset(REQUIRED_INTERPRETER)
  unset(_vfa_SUPPORTED)
  unset(POST_INSTALL_COMMAND)

  vcpkg_get_program_files_platform_bitness(PROGRAM_FILES_PLATFORM_BITNESS)
  vcpkg_get_program_files_32_bit(PROGRAM_FILES_32_BIT)

  if(VAR MATCHES "PERL")
    set(PROGNAME perl)
    set(PATHS ${DOWNLOADS}/tools/perl/perl/bin)
    set(BREW_PACKAGE_NAME "perl")
    set(APT_PACKAGE_NAME "perl")
    set(URL "http://strawberryperl.com/download/5.30.0.1/strawberry-perl-5.30.0.1-32bit.zip")
    set(ARCHIVE "strawberry-perl-5.30.0.1-32bit.zip")
    set(HASH d353d3dc743ebdc6d1e9f6f2b7a6db3c387c1ce6c890bae8adc8ae5deae8404f4c5e3cf249d1e151e7256d4c5ee9cd317e6c41f3b6f244340de18a24b938e0c4)
  elseif(VAR MATCHES "NASM")
    set(PROGNAME nasm)
    set(PATHS ${DOWNLOADS}/tools/nasm/nasm-2.14.02)
    set(BREW_PACKAGE_NAME "nasm")
    set(APT_PACKAGE_NAME "nasm")
    set(URL
      "http://www.nasm.us/pub/nasm/releasebuilds/2.14.02/win32/nasm-2.14.02-win32.zip"
      "http://fossies.org/windows/misc/nasm-2.14.02-win32.zip"
    )
    set(ARCHIVE "nasm-2.14.02-win32.zip")
    set(HASH a0f16a9f3b668b086e3c4e23a33ff725998e120f2e3ccac8c28293fd4faeae6fc59398919e1b89eed7461685d2730de02f2eb83e321f73609f35bf6b17a23d1e)
  elseif(VAR MATCHES "YASM")
    set(PROGNAME yasm)
    set(SUBDIR 1.3.0.6)
    set(PATHS ${DOWNLOADS}/tools/yasm/${SUBDIR})
    set(URL "https://www.tortall.net/projects/yasm/snapshots/v1.3.0.6.g1962/yasm-1.3.0.6.g1962.exe")
    set(ARCHIVE "yasm-1.3.0.6.g1962.exe")
    set(_vfa_RENAME "yasm.exe")
    set(NOEXTRACT ON)
    set(HASH c1945669d983b632a10c5ff31e86d6ecbff143c3d8b2c433c0d3d18f84356d2b351f71ac05fd44e5403651b00c31db0d14615d7f9a6ecce5750438d37105c55b)
  elseif(VAR MATCHES "PYTHON3")
    if(CMAKE_HOST_WIN32)
      set(PROGNAME python)
      set(SUBDIR "python-3.7.3")
      set(PATHS ${DOWNLOADS}/tools/python/${SUBDIR})
      set(URL "https://www.python.org/ftp/python/3.7.3/python-3.7.3-embed-win32.zip")
      set(ARCHIVE "python-3.7.3-embed-win32.zip")
      set(HASH 2c1b1f0a29d40a91771ae21a5f733eedc10984cd182cb10c2793bbd24191a89f20612a3f23c34047f37fb06369016bfd4a52915ed1b4a56f8bd2b4ca6994eb31)
      set(POST_INSTALL_COMMAND ${CMAKE_COMMAND} -E remove python37._pth)
    else()
      set(PROGNAME python3)
      set(BREW_PACKAGE_NAME "python")
      set(APT_PACKAGE_NAME "python3")
    endif()
  elseif(VAR MATCHES "PYTHON2")
    if(CMAKE_HOST_WIN32)
      set(PROGNAME python)
      set(SUBDIR "python2")
      set(PATHS ${DOWNLOADS}/tools/python/${SUBDIR})
      set(URL "https://www.python.org/ftp/python/2.7.16/python-2.7.16.msi")
      set(ARCHIVE "python2.msi")
      set(HASH c34a6fa2438682104dccb53650a2bdb79eac7996deff075201a0f71bb835d60d3ed866652a1931f15a29510fe8e1009ac04e423b285122d2e5747fefc4c10254)
    else()
      set(PROGNAME python2)
      set(BREW_PACKAGE_NAME "python2")
      set(APT_PACKAGE_NAME "python")
    endif()
  elseif(VAR MATCHES "RUBY")
    set(PROGNAME "ruby")
    set(PATHS ${DOWNLOADS}/tools/ruby/rubyinstaller-2.6.3-1-x86/bin)
    set(URL "https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.6.4-1/rubyinstaller-2.6.4-1-x64.7z")
#    set(URL "https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.6.4-1/rubyinstaller-2.6.4-1-x86.7z")
#    set(URL "http://downloads.activestate.com/ActiveRuby/releases/2.3.4.0-beta/ActiveRuby-2.3.4.0-beta-win64.exe")
#    set(URL "https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.6.4-1/rubyinstaller-devkit-2.6.4-1-x64.exe")
#    set(URL "https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.6.4-1/rubyinstaller-devkit-2.6.4-1-x86.exe")
    set(ARCHIVE rubyinstaller.7z)
    set(HASH 4322317dd02ce13527bf09d6e6a7787ca3814ea04337107d28af1ac360bd272504b32e20ed3ea84eb5b21dae7b23bfe5eb0e529b6b0aa21a1a2bbb0a542d7aec)
  elseif(VAR MATCHES "JOM")
    set(PROGNAME jom)
    set(SUBDIR "jom-1.1.3")
    set(PATHS ${DOWNLOADS}/tools/jom/${SUBDIR})
    set(URL "http://download.qt.io/official_releases/jom/jom_1_1_3.zip")
    set(ARCHIVE "jom_1_1_3.zip")
    set(HASH 5b158ead86be4eb3a6780928d9163f8562372f30bde051d8c281d81027b766119a6e9241166b91de0aa6146836cea77e5121290e62e31b7a959407840fc57b33)
  elseif(VAR MATCHES "7Z")
    set(PROGNAME 7z)
    set(PATHS "${PROGRAM_FILES_PLATFORM_BITNESS}/7-Zip" "${PROGRAM_FILES_32_BIT}/7-Zip" "${DOWNLOADS}/tools/7z/Files/7-Zip")
    set(URL "https://7-zip.org/a/7z1900.msi")
    set(ARCHIVE "7z1900.msi")
    set(HASH f73b04e2d9f29d4393fde572dcf3c3f0f6fa27e747e5df292294ab7536ae24c239bf917689d71eb10cc49f6b9a4ace26d7c122ee887d93cc935f268c404e9067)
  elseif(VAR MATCHES "NINJA")
    # We use the Ninja fork from Kitware because it enables Fortran support
    set(PROGNAME ninja)
    set(SUBDIR "ninja")
    if(CMAKE_HOST_WIN32)
      set(PATHS "${DOWNLOADS}/tools/${SUBDIR}_fort")
    elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
      set(PATHS "${DOWNLOADS}/tools/${SUBDIR}-osx")
    elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "FreeBSD")
      set(PATHS "${DOWNLOADS}/tools/${SUBDIR}-freebsd")
    else()
      set(PATHS "${DOWNLOADS}/tools/${SUBDIR}-linux")
    endif()
    set(BREW_PACKAGE_NAME "ninja")
    set(APT_PACKAGE_NAME "ninja-build")
    set(URL "https://github.com/Kitware/ninja/releases/download/v1.9.0.g5b44b.kitware.dyndep-1.jobserver-1/ninja-1.9.0.g5b44b.kitware.dyndep-1.jobserver-1_i686-pc-windows-msvc.zip")
    set(ARCHIVE "ninja-1.9.0.g5b44b.kitware.dyndep-1.jobserver-1_i686-pc-windows-msvc.zip")
    set(HASH 814bd6ee637589711e7077c33ea74b9fa9c35376f61e823530df8e70b22352a83b5c65aefac482577986b748f6905856ffaea56c6b7ce430c20b6b4fca215655)
  elseif(VAR MATCHES "NUGET")
    set(PROGNAME nuget)
    set(PATHS "${DOWNLOADS}/tools/nuget")
    set(BREW_PACKAGE_NAME "nuget")
    set(URL "https://dist.nuget.org/win-x86-commandline/v4.8.1/nuget.exe")
    set(ARCHIVE "nuget.exe")
    set(NOEXTRACT ON)
    set(HASH 42cb744338af8decc033a75bce5b4c4df28e102bafc45f9a8ba86d7bc010f5b43ebacae80d7b28c4f85ac900eefc2a349620ae65f27f6ca1c21c53b63b92924b)
  elseif(VAR MATCHES "CMAKE")
    set(PROGNAME cmake)
    set(PATHS "${PROGRAM_FILES_PLATFORM_BITNESS}/CMake/bin" "${PROGRAM_FILES_32_BIT}/CMake/bin" "${DOWNLOADS}/tools/CMake/bin")
  elseif(VAR MATCHES "QT5")
    set(PROGNAME qmake.exe)
    set(PATHS "I:/Compile/Qt/5.11.1/msvc2015_64/bin")
  elseif(VAR MATCHES "QT4")
    set(PROGNAME qmake.exe)
    set(PATHS "I:/Compile/Qt/4.8/msvc2015_64/bin")
  elseif(VAR MATCHES "CLANG")
    set(PROGNAME clang)
    set(PATHS "E:/tools/LLVM-4/bin")
	
#  elseif(VAR MATCHES "WAF")
#    set(PROGNAME waf)
#    set(REQUIRED_INTERPRETER PYTHON3)
#    set(BREW_PACKAGE_NAME "waf")
#    set(APT_PACKAGE_NAME "waf")
#    if(CMAKE_HOST_WIN32)
#      set(SCRIPTNAME waf)
#    else()
#      set(SCRIPTNAME waf-light)
#    endif()
#    set(PATHS ${DOWNLOADS}/tools/waf/waf-2.0.18)
#    set(URL "https://waf.io/waf-2.0.18.tar.bz2")
#    set(ARCHIVE "waf-2.0.18.tar.bz2")
#    set(HASH aa102922dd48bd1d2f39208ee84f91330a1a5993a3471667181e3e47817d4cf57b0ff9041c1d75b6648d279de6688c7564670cb76ca19da1bd412d1603389e0a)

  elseif(VAR MATCHES "MESON")
    set(PROGNAME meson)
    set(REQUIRED_INTERPRETER PYTHON3)
    set(BREW_PACKAGE_NAME "meson")
    set(APT_PACKAGE_NAME "meson")
    if(CMAKE_HOST_WIN32)
      set(SCRIPTNAME meson.py)
    else()
      set(SCRIPTNAME meson)
    endif()
    set(PATHS ${DOWNLOADS}/tools/meson/meson-0.51.0)
    set(URL "https://github.com/mesonbuild/meson/archive/0.51.0.zip")
    set(ARCHIVE "meson-0.51.0.zip")
    set(HASH bf1df65cde7e0e0a44e4b4be7d68de9897a77c4ea4c694f1d77fe82cd3c7e7818dc034a3313ce885ba6883b4ba6d282b7a589f665fa499d9eb79fc7a23e415cc)

  elseif(VAR MATCHES "GYP")
    set(PROGNAME gyp)
    set(REQUIRED_INTERPRETER PYTHON2)
    set(BREW_PACKAGE_NAME "gyp")
    set(APT_PACKAGE_NAME "gyp")
    if(CMAKE_HOST_WIN32)
      set(SCRIPTNAME gyp_main.py)
    else()
      set(SCRIPTNAME gyp.bat)
    endif()
    set(PATHS ${DOWNLOADS}/gyp/gyp-aca1e2c3d346d704adfa60944e6b4dd06f4728be)
    set(URL "https://github.com/chromium/gyp/archive/aca1e2c3d346d704adfa60944e6b4dd06f4728be.zip")
    set(ARCHIVE "gyp.zip")
    set(HASH 2b972c60af4664baf6ce4d2181810a2e9d67fe634dd2942b92a8e5b9eccef6f5116cd943f2a4d1b2baffdc824bd7d4252d206c7cca638f44b13d8f7c18607e5d)
	
  elseif(VAR MATCHES "FLEX")
    if(CMAKE_HOST_WIN32)
      set(PROGNAME win_flex)
      set(SUBDIR win_flex-2.5.18)
      set(PATHS ${DOWNLOADS}/tools/win_flex/${SUBDIR})
      set(URL "https://sourceforge.net/projects/winflexbison/files/win_flex_bison-2.5.18.zip/download")
      set(ARCHIVE "win_flex_bison-2.5.18.zip")
      set(HASH 8b30f046e090a0ddcf85b38197913bbf5ac6f5e3063bdfebf288fd7e3d22288c72ba98fd2d04c5eaf9157997bc4bd9911c1e0f6007106589d25b58a9673f7b83)
      if(NOT EXISTS "${PATHS}/data/m4sugar/m4sugar.m4")
        file(REMOVE_RECURSE "${PATHS}")
      endif()
    else()
      set(PROGNAME flex)
      set(APT_PACKAGE_NAME flex)
      set(BREW_PACKAGE_NAME flex)
    endif()
  elseif(VAR MATCHES "BISON")
    if(CMAKE_HOST_WIN32)
      set(PROGNAME win_bison)
      set(SUBDIR win_bison-2.5.18)
      set(PATHS ${DOWNLOADS}/tools/win_bison/${SUBDIR})
      set(URL "https://sourceforge.net/projects/winflexbison/files/win_flex_bison-2.5.18.zip/download")
      set(ARCHIVE "win_flex_bison-2.5.18.zip")
      set(HASH 8b30f046e090a0ddcf85b38197913bbf5ac6f5e3063bdfebf288fd7e3d22288c72ba98fd2d04c5eaf9157997bc4bd9911c1e0f6007106589d25b58a9673f7b83)
      if(NOT EXISTS "${PATHS}/data/m4sugar/m4sugar.m4")
        file(REMOVE_RECURSE "${PATHS}")
      endif()
    else()
      set(PROGNAME bison)
      set(APT_PACKAGE_NAME bison)
      set(BREW_PACKAGE_NAME bison)
    endif()
  elseif(VAR MATCHES "GPERF")
    set(PROGNAME gperf)
    set(PATHS ${DOWNLOADS}/tools/gperf/bin)
    set(URL "https://sourceforge.net/projects/gnuwin32/files/gperf/3.0.1/gperf-3.0.1-bin.zip/download")
    set(ARCHIVE "gperf-3.0.1-bin.zip")
    set(HASH 3f2d3418304390ecd729b85f65240a9e4d204b218345f82ea466ca3d7467789f43d0d2129fcffc18eaad3513f49963e79775b10cc223979540fa2e502fe7d4d9)
  elseif(VAR MATCHES "GASPREPROCESSOR")
    set(NOEXTRACT true)
    set(PROGNAME gas-preprocessor)
    set(REQUIRED_INTERPRETER PERL)
    set(SCRIPTNAME "gas-preprocessor.pl")
    set(PATHS ${DOWNLOADS}/tools/gas-preprocessor)
    set(URL "https://raw.githubusercontent.com/FFmpeg/gas-preprocessor/36bacb4cba27003c572e5bf7a9c4dfe3c9a8d40d/gas-preprocessor.pl")
    set(ARCHIVE "gas-preprocessor.pl")
    set(HASH a25caadccd1457a0fd2abb5a0da9aca1713b2c351d76daf87a4141e52021f51aa09e95a62942c6f0764f79cc1fa65bf71584955b09e62ee7da067b5c82baf6b3)
  elseif(VAR MATCHES "DARK")
    set(PROGNAME dark)
    set(SUBDIR "wix311-binaries")
    set(PATHS ${DOWNLOADS}/tools/dark/${SUBDIR})
    set(URL "https://github.com/wixtoolset/wix3/releases/download/wix311rtm/wix311-binaries.zip")
    set(ARCHIVE "wix311-binaries.zip")
    set(HASH 74f0fa29b5991ca655e34a9d1000d47d4272e071113fada86727ee943d913177ae96dc3d435eaf494d2158f37560cd4c2c5274176946ebdb17bf2354ced1c516)
  elseif(VAR MATCHES "SCONS")
    set(PROGNAME scons)
    set(REQUIRED_INTERPRETER PYTHON2)
    set(SCRIPTNAME "scons.py")
    set(PATHS ${DOWNLOADS}/tools/scons)
    set(URL "https://sourceforge.net/projects/scons/files/scons-local-3.0.5.zip/download")
    set(ARCHIVE "scons-local-3.0.5.zip")
    set(HASH 88469e84bb59723deccda9becc71983da9c727145104e8259404fd0fb324a023c05cfb4024a8872e5b6bcfaa89ef1ecc9cc98d6057ac6579ba68fe472453effb)
  elseif(VAR MATCHES "ASCIIDOC")
    set(PROGNAME asciidoc)
    set(REQUIRED_INTERPRETER PYTHON2)
    set(SCRIPTNAME asciidoc.py)
    set(PATHS ${DOWNLOADS}/tools/${PROGNAME}/asciidoc-8.6.10)
    set(URL "https://github.com/asciidoc/asciidoc/archive/8.6.10.zip")
    set(ARCHIVE "asciidoc.zip")
    set(HASH c418e0dc7c9dfe83721823ddcfb6e57ac73dc911a33ecc217390d8ec58323b5aa8046b7e123c2a5f5a127ff4eb9e03c801719037be328d85987b4b22dab55e87)
  elseif(VAR MATCHES "TCL")
    set(PROGNAME tclsh)
    set(PATHS ${DOWNLOADS}/tools/tcl/bin)
#	set(SUBDIR "F0EB52A")
#    set(URL "https://sourceforge.net/projects/magicsplat/files/magicsplat-tcl/tcl-8.6.9-installer-1.9.1-x64.msi/download")
    set(URL "https://downloads.activestate.com/ActiveTcl/releases/8.6.9.0/ActiveTcl-8.6.9.8609.2-MSWin32-x64.exe")
    set(ARCHIVE "ActiveTcl.exe")
    set(HASH 8e5f4d81afea4ca64815b4b9ae1aa421ca6e24ced8b4f1bdd01236b7f0e94fef02d16e0b9716c4bbda3c340384d0b770b719888eb17427e74b5c0017765c4567)
#    file(TO_NATIVE_PATH "${DOWNLOADS}/tools/${PROGNAME}/${SUBDIR}" DESTINATION_NATIVE_PATH)
    file(TO_NATIVE_PATH "${DOWNLOADS}/tools/${PROGNAME}" DESTINATION_NATIVE_PATH)
    set(INSTALL_OPTIONS "/extract:${DESTINATION_NATIVE_PATH}")
  elseif(VAR MATCHES "DOXYGEN")
    set(PROGNAME doxygen)
    set(PATHS ${DOWNLOADS}/tools/doxygen)
    set(URL "https://sourceforge.net/projects/doxygen/files/rel-1.8.15/doxygen-1.8.15.windows.bin.zip/download")
    set(ARCHIVE "doxygen-1.8.15.windows.bin.zip")
    set(HASH 89482dcb1863d381d47812c985593e736d703931d49994e09c7c03ef67e064115d0222b8de1563a7930404c9bc2d3be323f3d13a01ef18861be584db3d5a953c)
  # Download Tools
  elseif(VAR MATCHES "NPM")
    set(PROGNAME npm)
    set(PATHS "${PROGRAM_FILES_PLATFORM_BITNESS}/nodejs" "${PROGRAM_FILES_32_BIT}/nodejs" "${DOWNLOADS}/tools/nodejs")
  elseif(VAR MATCHES "GO")
    set(PROGNAME go)
    set(PATHS "I:/Compile/Go/bin")

  elseif(VAR MATCHES "MEINPROC4")
    set(PROGNAME meinproc4)
    set(PATHS "${DOWNLOADS}/tools/${PROGNAME}")

  elseif(VAR MATCHES "VALAC")
    set(PROGNAME valac)
    set(PATHS ${DOWNLOADS}/tools/valac/bin)
#    set(URL "http://www.tarnyko.net/repo/vala-0.20.1_(GTK+-3.6.4)(TARNYKO).exe")	
#    set(ARCHIVE "vala-0.20.1.bin")

#    vcpkg_find_acquire_program(7Z)
#    message(STATUS "Распаковка ${PROGNAME}")
#    if(NOT EXISTS ${DESTINATION_NATIVE_PATH})
#    file(TO_NATIVE_PATH "${DOWNLOADS}/tools/${PROGNAME}" DESTINATION_NATIVE_PATH)
#        _execute_process(
#        COMMAND ${7Z} x -tNsis ${ARCHIVE} -o${DESTINATION_NATIVE_PATH}
#        WORKING_DIRECTORY ${DOWNLOADS}
#        )
#    endif()

#    set(HASH 32b9709694e9c40d38dc01889026a689fe31e0d38f7e6ffeaf4f6e52a4259827475bb6f8d38848ea56bb697d7d9885b61fd90b9afa6545e035e069704028cbb2)

#  if(NOT EXISTS "${PATHS}/uninstall.exe" "${PATHS}/vala-0.20.1_(GTK+-3.6.4)(TARNYKO).zip" "${PATHS}/$PLUGINSDIR")
#    file(REMOVE_RECURSE "${PATHS}")
#  endif()

  elseif(VAR MATCHES "TEXLIVE")
    set(PROGNAME tex)
#http://ctan.pp.ua/systems/win32/w32tex/TLW64/tl-win64.zip
#http://core.ring.gr.jp/pub/text/TeX/ptex-win32/current/TLW64/tl-win64.zip
#http://mirrors.mi.ras.ru/CTAN/systems/win32/w32tex/TLW64/tl-win64.zip
    set(PATHS "${DOWNLOADS}/tools/texlive/bin/win32" "${DOWNLOADS}/tools/miktex/texmfs/install/miktex/bin")

  elseif(VAR MATCHES "DocBookXML4_DTD")
    set(PROGNAME docbookx.dtd)
    set(PATHS "${DOWNLOADS}/tools/xgettext/bin/docbook-xml")
  elseif(VAR MATCHES "DocBookXSL")
    set(PROGNAME catalog.xml)
    set(PATHS "${DOWNLOADS}/tools/xgettext/bin/docbook-xsl")
  elseif(VAR MATCHES "BAZEL")
    set(PROGNAME bazel)
    set(BAZEL_VERSION 0.25.2)
    set(SUBDIR ${BAZEL_VERSION})
    set(PATHS ${DOWNLOADS}/tools/bazel/${SUBDIR})
    set(_vfa_RENAME "bazel")
    if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
      set(_vfa_SUPPORTED ON)
      set(URL "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-linux-x86_64")
      set(ARCHIVE "bazel-${BAZEL_VERSION}-linux-x86_64")
      set(NOEXTRACT ON)
      set(HASH db4a583cf2996aeb29fd008261b12fe39a4a5faf0fbf96f7124e6d3ffeccf6d9655d391378e68dd0915bc91c9e146a51fd9661963743857ca25179547feceab1)
    else()
      set(URL "https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-windows-x86_64.zip") 
      set(ARCHIVE "bazel-${BAZEL_VERSION}-windows-x86_64.zip")
      set(HASH 6482f99a0896f55ef65739e7b53452fd9c0adf597b599d0022a5e0c5fa4374f4a958d46f98e8ba25af4b065adacc578bfedced483d8c169ea5cb1777a99eea53)
    endif()
  # Download Tools
  elseif(VAR MATCHES "ARIA2")
    set(PROGNAME aria2c)
    set(PATHS ${DOWNLOADS}/tools/aria2c/aria2-1.34.0-win-32bit-build1)
    set(URL "https://github.com/aria2/aria2/releases/download/release-1.34.0/aria2-1.34.0-win-32bit-build1.zip")
    set(ARCHIVE "aria2-1.34.0-win-32bit-build1.zip")
    set(HASH 2a5480d503ac6e8203040c7e516a3395028520da05d0ebf3a2d56d5d24ba5d17630e8f318dd4e3cc2094cc4668b90108fb58e8b986b1ffebd429995058063c27)
  elseif(VAR MATCHES "XGETTEXT")
    set(PROGNAME xgettext)
    set(PATHS "${DOWNLOADS}/tools/xgettext/bin")
    set(URL "https://github.com/mlocati/gettext-iconv-windows/releases/download/v0.20.1-v1.16/gettext0.20.1-iconv1.16-static-32.zip")
    set(ARCHIVE "gettext0.20.1.zip")
    set(HASH 9b423bc72c06ce8e1f59842a3ec2d8e2ccab2179179f733a83703d4145300ca9053758ca1232245435e88a82983a785c3b51030eea4a5aaa7c3d7d3995b1c040)	

  elseif(VAR MATCHES "MOZMAKE")
    set(PROGNAME "mozmake")
      set(PATHS "${DOWNLOADS}/tools/${PROGNAME}/bin")
    set(URL "https://ftp.mozilla.org/pub/mozilla/libraries/win32/MozillaBuildSetup-Latest.exe")
    set(ARCHIVE "mozillabuild.nsis")
      set(MOZILLABUILD "${DOWNLOADS}/tools/${PROGNAME}")
    if(VAR MATCHES "MOZ_PYTHON2")
      set(PROGNAME "python2.7")
      set(PATHS "${DOWNLOADS}/tools/${PROGNAME}/python")
      find_program(PYTHON_EXECUTABLE NAMES "python2.7.exe" HINTS "${MOZMAKE}/../python" DOC "path to MOZ_PYTHON2")
    elseif(VAR MATCHES "MOZ_PYTHON3")
      set(PROGNAME "python3.6")
      set(PATHS "${DOWNLOADS}/tools/${PROGNAME}/python3")
    endif()
    find_program(PYTHON3_EXECUTABLE NAMES "python3.6.exe" HINTS "${MOZMAKE}/../python3" DOC "path to MOZ_PYTHON2")
#    set(ENV{MOZILLABUILD} "${DOWNLOADS}/tools/${PROGNAME}")
#    get_filename_component(PYTHON2 "${MOZ_PYTHON2}" DIRECTORY)
#    get_filename_component(PYTHON3 "${MOZ_PYTHON3}" DIRECTORY)
#    set(ENV{PATH} ";$ENV{PATH};${MOZILLABUILD};${MOZILLABUILD}/../nsis-3.01;${MOZILLABUILD}/../msys/bin;${MOZILLABUILD}/../python;${MOZILLABUILD}/../python3")

#    vcpkg_find_acquire_program(7Z)
#    message(STATUS "Использование: get_filename_component(MOZILLABUILD "\${MOZMAKE}"\ DIRECTORY)")
#    file(TO_NATIVE_PATH "${DOWNLOADS}/tools/${PROGNAME}" DESTINATION_NATIVE_PATH)
#        _execute_process(
#        COMMAND ${7Z} x -tNsis ${ARCHIVE} -o${DESTINATION_NATIVE_PATH}
#        WORKING_DIRECTORY ${DOWNLOADS}
#    )
    set(HASH db77e882de30f5050489852353d6c171c09b3e70bfd3285d7cda4ea3fc8e7b8df9537ba6430f605c68a1a8c3f33e4763a03d353f915fd755df2a7e26409974c2)

  elseif(VAR MATCHES "SWIG")
    set(PROGNAME swig)
    set(PATHS "${DOWNLOADS}/tools/swig/swigwin-3.0.12")
    set(URL "https://jaist.dl.sourceforge.net/project/swig/swigwin/swigwin-3.0.12/swigwin-3.0.12.zip")
    set(ARCHIVE "swigwin-3.0.12.zip")
    set(HASH f47024e850e2a7eca97e2d67c6a3e88677a44678bf0bf9cc0cd4f784648d325645e05dee5b3d661caa24b9653054447d3b53eefe005a09ad6a82cdc286c3c22b)
  else()
    message(FATAL "unknown tool ${VAR} -- unable to acquire.")
  endif()

  macro(do_find)
    if(NOT DEFINED REQUIRED_INTERPRETER)
      find_program(${VAR} ${PROGNAME} PATHS ${PATHS} ${FIND_OPTIONS})
    else()
      vcpkg_find_acquire_program(${REQUIRED_INTERPRETER})
      find_file(SCRIPT ${SCRIPTNAME} PATHS ${PATHS})
      set(${VAR} ${${REQUIRED_INTERPRETER}} ${SCRIPT})
    endif()
  endmacro()

  do_find()
  if("${${VAR}}" MATCHES "-NOTFOUND")
    if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows" AND NOT _vfa_SUPPORTED AND NOT SKIP_PACKAGE_MANAGER)
      set(EXAMPLE ".")
      if(DEFINED BREW_PACKAGE_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
        set(EXAMPLE ":\n    brew install ${BREW_PACKAGE_NAME}")
      elseif(DEFINED APT_PACKAGE_NAME AND CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
        set(EXAMPLE ":\n    sudo apt-get install ${APT_PACKAGE_NAME}")
      endif()
      message(FATAL_ERROR "Could not find ${PROGNAME}. Please install it via your package manager${EXAMPLE}")
    endif()

    vcpkg_download_distfile(ARCHIVE_PATH
        URLS ${URL}
        SHA512 ${HASH}
        FILENAME ${ARCHIVE}
    )

    set(PROG_PATH_SUBDIR "${DOWNLOADS}/tools/${PROGNAME}/${SUBDIR}")
    file(MAKE_DIRECTORY ${PROG_PATH_SUBDIR})
    if(DEFINED NOEXTRACT)
      if(DEFINED _vfa_RENAME)
        file(INSTALL ${ARCHIVE_PATH} DESTINATION ${PROG_PATH_SUBDIR} RENAME ${_vfa_RENAME} PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
      else()
        file(COPY ${ARCHIVE_PATH} DESTINATION ${PROG_PATH_SUBDIR} PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
      endif()
    else()
      get_filename_component(ARCHIVE_EXTENSION ${ARCHIVE} EXT)
      string(FIND ${ARCHIVE_EXTENSION} "." IDX REVERSE)
      if (IDX GREATER 0)
        string(SUBSTRING ${ARCHIVE_EXTENSION} ${IDX} -1 ARCHIVE_EXTENSION)
      endif()
      string(TOLOWER "${ARCHIVE_EXTENSION}" ARCHIVE_EXTENSION)
      if (INSTALL_OPTIONS STREQUAL "")
        set(HAS_INSTALL_OPTIONS OFF)
      else()
        set(HAS_INSTALL_OPTIONS ON)
      endif()
      if(ARCHIVE_EXTENSION STREQUAL ".msi")
        file(TO_NATIVE_PATH "${ARCHIVE_PATH}" ARCHIVE_NATIVE_PATH)
        file(TO_NATIVE_PATH "${PROG_PATH_SUBDIR}" DESTINATION_NATIVE_PATH)
        _execute_process(
          COMMAND msiexec /a ${ARCHIVE_NATIVE_PATH} /qn TARGETDIR=${DESTINATION_NATIVE_PATH}
          WORKING_DIRECTORY ${DOWNLOADS}
        )
      elseif(ARCHIVE_EXTENSION STREQUAL ".exe" AND HAS_INSTALL_OPTIONS)
        file(TO_NATIVE_PATH "${ARCHIVE_PATH}" ARCHIVE_NATIVE_PATH)
        _execute_process(
          COMMAND "${ARCHIVE_NATIVE_PATH}" ${INSTALL_OPTIONS}
          WORKING_DIRECTORY ${DOWNLOADS}
        )
      elseif(ARCHIVE_EXTENSION STREQUAL ".nsis")
        vcpkg_find_acquire_program(7Z)
        file(TO_NATIVE_PATH "${DOWNLOADS}/tools/${PROGNAME}" DESTINATION_NATIVE_PATH)
        _execute_process(
          COMMAND ${7Z} x ${ARCHIVE} -o${DESTINATION_NATIVE_PATH}
          WORKING_DIRECTORY ${DOWNLOADS}
        )

#	file(TO_NATIVE_PATH "${DOWNLOADS}/tools/${PROGNAME}" DESTINATION_NATIVE_PATH)
#        _execute_process(
#			COMMAND ${7Z} x -tNsis ${ARCHIVE} -o${DESTINATION_NATIVE_PATH}

#	if(ARCHIVE_EXTENSION STREQUAL ".exe")
#		file(TO_NATIVE_PATH "${PROG_PATH_SUBDIR}" DESTINATION_NATIVE_PATH)
#		file(TO_NATIVE_PATH "${ARCHIVE}" ARCHIVE_NATIVE_PATH)
#        _execute_process(
#			COMMAND ${7z} x ${ARCHIVE_NATIVE_PATH} -o${DESTINATION_NATIVE_PATH}
#			WORKING_DIRECTORY ${DOWNLOADS}
#        )
#	endif()

#    else()
#      get_filename_component(ARCHIVE_EXTENSION ${ARCHIVE} EXT)
#      string(TOLOWER "${ARCHIVE_EXTENSION}" ARCHIVE_EXTENSION)
#      if(ARCHIVE_EXTENSION STREQUAL ".exe")
#        file(TO_NATIVE_PATH "${ARCHIVE_PATH}" ARCHIVE_NATIVE_PATH)
#        file(TO_NATIVE_PATH "${PROG_PATH_SUBDIR}" DESTINATION_NATIVE_PATH)
#        _execute_process(
#          COMMAND ${7Z} x ${ARCHIVE_NATIVE_PATH} -o${DESTINATION_NATIVE_PATH}
#          WORKING_DIRECTORY ${DOWNLOADS}
#    )
      else()
        _execute_process(
          COMMAND ${CMAKE_COMMAND} -E tar xzf ${ARCHIVE_PATH}
          WORKING_DIRECTORY ${PROG_PATH_SUBDIR}
        )
      endif()
    endif()

    if(DEFINED POST_INSTALL_COMMAND)
      vcpkg_execute_required_process(
        ALLOW_IN_DOWNLOAD_MODE
        COMMAND ${POST_INSTALL_COMMAND}
        WORKING_DIRECTORY ${PROG_PATH_SUBDIR}
        LOGNAME ${VAR}-tool-post-install
      )
    endif()

    do_find()
  endif()

  set(${VAR} "${${VAR}}" PARENT_SCOPE)
endfunction()
